
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f44  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800a000  0800a000  0001a000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a584  0800a584  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  0800a584  0800a584  0001a584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a58c  0800a58c  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a58c  0800a58c  0001a58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a590  0800a590  0001a590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800a594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000234  0800a7c8  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  0800a7c8  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea7a  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d8  00000000  00000000  0002ecd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  000310b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  00031b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cf4e  00000000  00000000  00032478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e242  00000000  00000000  0004f3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2ca6  00000000  00000000  0005d608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001102ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035dc  00000000  00000000  00110300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  001138dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00113918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000234 	.word	0x20000234
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009fe8 	.word	0x08009fe8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000238 	.word	0x20000238
 8000100:	08009fe8 	.word	0x08009fe8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f000 fff9 	bl	8001430 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff49 	bl	80012e0 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ffeb 	bl	8001430 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ffe1 	bl	8001430 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff71 	bl	8001364 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ff67 	bl	8001364 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f001 febe 	bl	8002284 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f001 feb9 	bl	8002284 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	469b      	mov	fp, r3
 800051a:	d433      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051c:	465a      	mov	r2, fp
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83a      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e078      	b.n	8000628 <__udivmoddi4+0x144>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e075      	b.n	800062e <__udivmoddi4+0x14a>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e028      	b.n	80005ae <__udivmoddi4+0xca>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	4652      	mov	r2, sl
 800058c:	40da      	lsrs	r2, r3
 800058e:	4641      	mov	r1, r8
 8000590:	0013      	movs	r3, r2
 8000592:	464a      	mov	r2, r9
 8000594:	408a      	lsls	r2, r1
 8000596:	0017      	movs	r7, r2
 8000598:	4642      	mov	r2, r8
 800059a:	431f      	orrs	r7, r3
 800059c:	4653      	mov	r3, sl
 800059e:	4093      	lsls	r3, r2
 80005a0:	001e      	movs	r6, r3
 80005a2:	42af      	cmp	r7, r5
 80005a4:	d9c4      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	4643      	mov	r3, r8
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0d9      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b4:	07fb      	lsls	r3, r7, #31
 80005b6:	0872      	lsrs	r2, r6, #1
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4646      	mov	r6, r8
 80005bc:	087b      	lsrs	r3, r7, #1
 80005be:	e00e      	b.n	80005de <__udivmoddi4+0xfa>
 80005c0:	42ab      	cmp	r3, r5
 80005c2:	d101      	bne.n	80005c8 <__udivmoddi4+0xe4>
 80005c4:	42a2      	cmp	r2, r4
 80005c6:	d80c      	bhi.n	80005e2 <__udivmoddi4+0xfe>
 80005c8:	1aa4      	subs	r4, r4, r2
 80005ca:	419d      	sbcs	r5, r3
 80005cc:	2001      	movs	r0, #1
 80005ce:	1924      	adds	r4, r4, r4
 80005d0:	416d      	adcs	r5, r5
 80005d2:	2100      	movs	r1, #0
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1824      	adds	r4, r4, r0
 80005d8:	414d      	adcs	r5, r1
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d006      	beq.n	80005ec <__udivmoddi4+0x108>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d9ee      	bls.n	80005c0 <__udivmoddi4+0xdc>
 80005e2:	3e01      	subs	r6, #1
 80005e4:	1924      	adds	r4, r4, r4
 80005e6:	416d      	adcs	r5, r5
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d1f8      	bne.n	80005de <__udivmoddi4+0xfa>
 80005ec:	9800      	ldr	r0, [sp, #0]
 80005ee:	9901      	ldr	r1, [sp, #4]
 80005f0:	465b      	mov	r3, fp
 80005f2:	1900      	adds	r0, r0, r4
 80005f4:	4169      	adcs	r1, r5
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db24      	blt.n	8000644 <__udivmoddi4+0x160>
 80005fa:	002b      	movs	r3, r5
 80005fc:	465a      	mov	r2, fp
 80005fe:	4644      	mov	r4, r8
 8000600:	40d3      	lsrs	r3, r2
 8000602:	002a      	movs	r2, r5
 8000604:	40e2      	lsrs	r2, r4
 8000606:	001c      	movs	r4, r3
 8000608:	465b      	mov	r3, fp
 800060a:	0015      	movs	r5, r2
 800060c:	2b00      	cmp	r3, #0
 800060e:	db2a      	blt.n	8000666 <__udivmoddi4+0x182>
 8000610:	0026      	movs	r6, r4
 8000612:	409e      	lsls	r6, r3
 8000614:	0033      	movs	r3, r6
 8000616:	0026      	movs	r6, r4
 8000618:	4647      	mov	r7, r8
 800061a:	40be      	lsls	r6, r7
 800061c:	0032      	movs	r2, r6
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	4199      	sbcs	r1, r3
 8000622:	9000      	str	r0, [sp, #0]
 8000624:	9101      	str	r1, [sp, #4]
 8000626:	e79f      	b.n	8000568 <__udivmoddi4+0x84>
 8000628:	42a3      	cmp	r3, r4
 800062a:	d8bc      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 800062c:	e783      	b.n	8000536 <__udivmoddi4+0x52>
 800062e:	4642      	mov	r2, r8
 8000630:	2320      	movs	r3, #32
 8000632:	2100      	movs	r1, #0
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	2200      	movs	r2, #0
 8000638:	9100      	str	r1, [sp, #0]
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	40da      	lsrs	r2, r3
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	e786      	b.n	8000552 <__udivmoddi4+0x6e>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	4646      	mov	r6, r8
 800064e:	409a      	lsls	r2, r3
 8000650:	0023      	movs	r3, r4
 8000652:	40f3      	lsrs	r3, r6
 8000654:	4644      	mov	r4, r8
 8000656:	4313      	orrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	dad4      	bge.n	8000610 <__udivmoddi4+0x12c>
 8000666:	4642      	mov	r2, r8
 8000668:	002f      	movs	r7, r5
 800066a:	2320      	movs	r3, #32
 800066c:	0026      	movs	r6, r4
 800066e:	4097      	lsls	r7, r2
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	40de      	lsrs	r6, r3
 8000674:	003b      	movs	r3, r7
 8000676:	4333      	orrs	r3, r6
 8000678:	e7cd      	b.n	8000616 <__udivmoddi4+0x132>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_dadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	4646      	mov	r6, r8
 8000682:	46d6      	mov	lr, sl
 8000684:	000d      	movs	r5, r1
 8000686:	0004      	movs	r4, r0
 8000688:	b5c0      	push	{r6, r7, lr}
 800068a:	001f      	movs	r7, r3
 800068c:	0011      	movs	r1, r2
 800068e:	0328      	lsls	r0, r5, #12
 8000690:	0f62      	lsrs	r2, r4, #29
 8000692:	0a40      	lsrs	r0, r0, #9
 8000694:	4310      	orrs	r0, r2
 8000696:	007a      	lsls	r2, r7, #1
 8000698:	0d52      	lsrs	r2, r2, #21
 800069a:	00e3      	lsls	r3, r4, #3
 800069c:	033c      	lsls	r4, r7, #12
 800069e:	4691      	mov	r9, r2
 80006a0:	0a64      	lsrs	r4, r4, #9
 80006a2:	0ffa      	lsrs	r2, r7, #31
 80006a4:	0f4f      	lsrs	r7, r1, #29
 80006a6:	006e      	lsls	r6, r5, #1
 80006a8:	4327      	orrs	r7, r4
 80006aa:	4692      	mov	sl, r2
 80006ac:	46b8      	mov	r8, r7
 80006ae:	0d76      	lsrs	r6, r6, #21
 80006b0:	0fed      	lsrs	r5, r5, #31
 80006b2:	00c9      	lsls	r1, r1, #3
 80006b4:	4295      	cmp	r5, r2
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x3e>
 80006b8:	e099      	b.n	80007ee <__aeabi_dadd+0x172>
 80006ba:	464c      	mov	r4, r9
 80006bc:	1b34      	subs	r4, r6, r4
 80006be:	46a4      	mov	ip, r4
 80006c0:	2c00      	cmp	r4, #0
 80006c2:	dc00      	bgt.n	80006c6 <__aeabi_dadd+0x4a>
 80006c4:	e07c      	b.n	80007c0 <__aeabi_dadd+0x144>
 80006c6:	464a      	mov	r2, r9
 80006c8:	2a00      	cmp	r2, #0
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x52>
 80006cc:	e0b8      	b.n	8000840 <__aeabi_dadd+0x1c4>
 80006ce:	4ac5      	ldr	r2, [pc, #788]	; (80009e4 <__aeabi_dadd+0x368>)
 80006d0:	4296      	cmp	r6, r2
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dadd+0x5a>
 80006d4:	e11c      	b.n	8000910 <__aeabi_dadd+0x294>
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	003c      	movs	r4, r7
 80006da:	0412      	lsls	r2, r2, #16
 80006dc:	4314      	orrs	r4, r2
 80006de:	46a0      	mov	r8, r4
 80006e0:	4662      	mov	r2, ip
 80006e2:	2a38      	cmp	r2, #56	; 0x38
 80006e4:	dd00      	ble.n	80006e8 <__aeabi_dadd+0x6c>
 80006e6:	e161      	b.n	80009ac <__aeabi_dadd+0x330>
 80006e8:	2a1f      	cmp	r2, #31
 80006ea:	dd00      	ble.n	80006ee <__aeabi_dadd+0x72>
 80006ec:	e1cc      	b.n	8000a88 <__aeabi_dadd+0x40c>
 80006ee:	4664      	mov	r4, ip
 80006f0:	2220      	movs	r2, #32
 80006f2:	1b12      	subs	r2, r2, r4
 80006f4:	4644      	mov	r4, r8
 80006f6:	4094      	lsls	r4, r2
 80006f8:	000f      	movs	r7, r1
 80006fa:	46a1      	mov	r9, r4
 80006fc:	4664      	mov	r4, ip
 80006fe:	4091      	lsls	r1, r2
 8000700:	40e7      	lsrs	r7, r4
 8000702:	464c      	mov	r4, r9
 8000704:	1e4a      	subs	r2, r1, #1
 8000706:	4191      	sbcs	r1, r2
 8000708:	433c      	orrs	r4, r7
 800070a:	4642      	mov	r2, r8
 800070c:	4321      	orrs	r1, r4
 800070e:	4664      	mov	r4, ip
 8000710:	40e2      	lsrs	r2, r4
 8000712:	1a80      	subs	r0, r0, r2
 8000714:	1a5c      	subs	r4, r3, r1
 8000716:	42a3      	cmp	r3, r4
 8000718:	419b      	sbcs	r3, r3
 800071a:	425f      	negs	r7, r3
 800071c:	1bc7      	subs	r7, r0, r7
 800071e:	023b      	lsls	r3, r7, #8
 8000720:	d400      	bmi.n	8000724 <__aeabi_dadd+0xa8>
 8000722:	e0d0      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000724:	027f      	lsls	r7, r7, #9
 8000726:	0a7f      	lsrs	r7, r7, #9
 8000728:	2f00      	cmp	r7, #0
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0xb2>
 800072c:	e0ff      	b.n	800092e <__aeabi_dadd+0x2b2>
 800072e:	0038      	movs	r0, r7
 8000730:	f001 fd8a 	bl	8002248 <__clzsi2>
 8000734:	0001      	movs	r1, r0
 8000736:	3908      	subs	r1, #8
 8000738:	2320      	movs	r3, #32
 800073a:	0022      	movs	r2, r4
 800073c:	1a5b      	subs	r3, r3, r1
 800073e:	408f      	lsls	r7, r1
 8000740:	40da      	lsrs	r2, r3
 8000742:	408c      	lsls	r4, r1
 8000744:	4317      	orrs	r7, r2
 8000746:	42b1      	cmp	r1, r6
 8000748:	da00      	bge.n	800074c <__aeabi_dadd+0xd0>
 800074a:	e0ff      	b.n	800094c <__aeabi_dadd+0x2d0>
 800074c:	1b89      	subs	r1, r1, r6
 800074e:	1c4b      	adds	r3, r1, #1
 8000750:	2b1f      	cmp	r3, #31
 8000752:	dd00      	ble.n	8000756 <__aeabi_dadd+0xda>
 8000754:	e0a8      	b.n	80008a8 <__aeabi_dadd+0x22c>
 8000756:	2220      	movs	r2, #32
 8000758:	0039      	movs	r1, r7
 800075a:	1ad2      	subs	r2, r2, r3
 800075c:	0020      	movs	r0, r4
 800075e:	4094      	lsls	r4, r2
 8000760:	4091      	lsls	r1, r2
 8000762:	40d8      	lsrs	r0, r3
 8000764:	1e62      	subs	r2, r4, #1
 8000766:	4194      	sbcs	r4, r2
 8000768:	40df      	lsrs	r7, r3
 800076a:	2600      	movs	r6, #0
 800076c:	4301      	orrs	r1, r0
 800076e:	430c      	orrs	r4, r1
 8000770:	0763      	lsls	r3, r4, #29
 8000772:	d009      	beq.n	8000788 <__aeabi_dadd+0x10c>
 8000774:	230f      	movs	r3, #15
 8000776:	4023      	ands	r3, r4
 8000778:	2b04      	cmp	r3, #4
 800077a:	d005      	beq.n	8000788 <__aeabi_dadd+0x10c>
 800077c:	1d23      	adds	r3, r4, #4
 800077e:	42a3      	cmp	r3, r4
 8000780:	41a4      	sbcs	r4, r4
 8000782:	4264      	negs	r4, r4
 8000784:	193f      	adds	r7, r7, r4
 8000786:	001c      	movs	r4, r3
 8000788:	023b      	lsls	r3, r7, #8
 800078a:	d400      	bmi.n	800078e <__aeabi_dadd+0x112>
 800078c:	e09e      	b.n	80008cc <__aeabi_dadd+0x250>
 800078e:	4b95      	ldr	r3, [pc, #596]	; (80009e4 <__aeabi_dadd+0x368>)
 8000790:	3601      	adds	r6, #1
 8000792:	429e      	cmp	r6, r3
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x11c>
 8000796:	e0b7      	b.n	8000908 <__aeabi_dadd+0x28c>
 8000798:	4a93      	ldr	r2, [pc, #588]	; (80009e8 <__aeabi_dadd+0x36c>)
 800079a:	08e4      	lsrs	r4, r4, #3
 800079c:	4017      	ands	r7, r2
 800079e:	077b      	lsls	r3, r7, #29
 80007a0:	0571      	lsls	r1, r6, #21
 80007a2:	027f      	lsls	r7, r7, #9
 80007a4:	4323      	orrs	r3, r4
 80007a6:	0b3f      	lsrs	r7, r7, #12
 80007a8:	0d4a      	lsrs	r2, r1, #21
 80007aa:	0512      	lsls	r2, r2, #20
 80007ac:	433a      	orrs	r2, r7
 80007ae:	07ed      	lsls	r5, r5, #31
 80007b0:	432a      	orrs	r2, r5
 80007b2:	0018      	movs	r0, r3
 80007b4:	0011      	movs	r1, r2
 80007b6:	bce0      	pop	{r5, r6, r7}
 80007b8:	46ba      	mov	sl, r7
 80007ba:	46b1      	mov	r9, r6
 80007bc:	46a8      	mov	r8, r5
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	2c00      	cmp	r4, #0
 80007c2:	d04b      	beq.n	800085c <__aeabi_dadd+0x1e0>
 80007c4:	464c      	mov	r4, r9
 80007c6:	1ba4      	subs	r4, r4, r6
 80007c8:	46a4      	mov	ip, r4
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d000      	beq.n	80007d0 <__aeabi_dadd+0x154>
 80007ce:	e123      	b.n	8000a18 <__aeabi_dadd+0x39c>
 80007d0:	0004      	movs	r4, r0
 80007d2:	431c      	orrs	r4, r3
 80007d4:	d100      	bne.n	80007d8 <__aeabi_dadd+0x15c>
 80007d6:	e1af      	b.n	8000b38 <__aeabi_dadd+0x4bc>
 80007d8:	4662      	mov	r2, ip
 80007da:	1e54      	subs	r4, r2, #1
 80007dc:	2a01      	cmp	r2, #1
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0x166>
 80007e0:	e215      	b.n	8000c0e <__aeabi_dadd+0x592>
 80007e2:	4d80      	ldr	r5, [pc, #512]	; (80009e4 <__aeabi_dadd+0x368>)
 80007e4:	45ac      	cmp	ip, r5
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x16e>
 80007e8:	e1c8      	b.n	8000b7c <__aeabi_dadd+0x500>
 80007ea:	46a4      	mov	ip, r4
 80007ec:	e11b      	b.n	8000a26 <__aeabi_dadd+0x3aa>
 80007ee:	464a      	mov	r2, r9
 80007f0:	1ab2      	subs	r2, r6, r2
 80007f2:	4694      	mov	ip, r2
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	dc00      	bgt.n	80007fa <__aeabi_dadd+0x17e>
 80007f8:	e0ac      	b.n	8000954 <__aeabi_dadd+0x2d8>
 80007fa:	464a      	mov	r2, r9
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d043      	beq.n	8000888 <__aeabi_dadd+0x20c>
 8000800:	4a78      	ldr	r2, [pc, #480]	; (80009e4 <__aeabi_dadd+0x368>)
 8000802:	4296      	cmp	r6, r2
 8000804:	d100      	bne.n	8000808 <__aeabi_dadd+0x18c>
 8000806:	e1af      	b.n	8000b68 <__aeabi_dadd+0x4ec>
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	003c      	movs	r4, r7
 800080c:	0412      	lsls	r2, r2, #16
 800080e:	4314      	orrs	r4, r2
 8000810:	46a0      	mov	r8, r4
 8000812:	4662      	mov	r2, ip
 8000814:	2a38      	cmp	r2, #56	; 0x38
 8000816:	dc67      	bgt.n	80008e8 <__aeabi_dadd+0x26c>
 8000818:	2a1f      	cmp	r2, #31
 800081a:	dc00      	bgt.n	800081e <__aeabi_dadd+0x1a2>
 800081c:	e15f      	b.n	8000ade <__aeabi_dadd+0x462>
 800081e:	4647      	mov	r7, r8
 8000820:	3a20      	subs	r2, #32
 8000822:	40d7      	lsrs	r7, r2
 8000824:	4662      	mov	r2, ip
 8000826:	2a20      	cmp	r2, #32
 8000828:	d005      	beq.n	8000836 <__aeabi_dadd+0x1ba>
 800082a:	4664      	mov	r4, ip
 800082c:	2240      	movs	r2, #64	; 0x40
 800082e:	1b12      	subs	r2, r2, r4
 8000830:	4644      	mov	r4, r8
 8000832:	4094      	lsls	r4, r2
 8000834:	4321      	orrs	r1, r4
 8000836:	1e4a      	subs	r2, r1, #1
 8000838:	4191      	sbcs	r1, r2
 800083a:	000c      	movs	r4, r1
 800083c:	433c      	orrs	r4, r7
 800083e:	e057      	b.n	80008f0 <__aeabi_dadd+0x274>
 8000840:	003a      	movs	r2, r7
 8000842:	430a      	orrs	r2, r1
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x1cc>
 8000846:	e105      	b.n	8000a54 <__aeabi_dadd+0x3d8>
 8000848:	0022      	movs	r2, r4
 800084a:	3a01      	subs	r2, #1
 800084c:	2c01      	cmp	r4, #1
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x1d6>
 8000850:	e182      	b.n	8000b58 <__aeabi_dadd+0x4dc>
 8000852:	4c64      	ldr	r4, [pc, #400]	; (80009e4 <__aeabi_dadd+0x368>)
 8000854:	45a4      	cmp	ip, r4
 8000856:	d05b      	beq.n	8000910 <__aeabi_dadd+0x294>
 8000858:	4694      	mov	ip, r2
 800085a:	e741      	b.n	80006e0 <__aeabi_dadd+0x64>
 800085c:	4c63      	ldr	r4, [pc, #396]	; (80009ec <__aeabi_dadd+0x370>)
 800085e:	1c77      	adds	r7, r6, #1
 8000860:	4227      	tst	r7, r4
 8000862:	d000      	beq.n	8000866 <__aeabi_dadd+0x1ea>
 8000864:	e0c4      	b.n	80009f0 <__aeabi_dadd+0x374>
 8000866:	0004      	movs	r4, r0
 8000868:	431c      	orrs	r4, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d000      	beq.n	8000870 <__aeabi_dadd+0x1f4>
 800086e:	e169      	b.n	8000b44 <__aeabi_dadd+0x4c8>
 8000870:	2c00      	cmp	r4, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_dadd+0x1fa>
 8000874:	e1bf      	b.n	8000bf6 <__aeabi_dadd+0x57a>
 8000876:	4644      	mov	r4, r8
 8000878:	430c      	orrs	r4, r1
 800087a:	d000      	beq.n	800087e <__aeabi_dadd+0x202>
 800087c:	e1d0      	b.n	8000c20 <__aeabi_dadd+0x5a4>
 800087e:	0742      	lsls	r2, r0, #29
 8000880:	08db      	lsrs	r3, r3, #3
 8000882:	4313      	orrs	r3, r2
 8000884:	08c0      	lsrs	r0, r0, #3
 8000886:	e029      	b.n	80008dc <__aeabi_dadd+0x260>
 8000888:	003a      	movs	r2, r7
 800088a:	430a      	orrs	r2, r1
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x214>
 800088e:	e170      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 8000890:	4662      	mov	r2, ip
 8000892:	4664      	mov	r4, ip
 8000894:	3a01      	subs	r2, #1
 8000896:	2c01      	cmp	r4, #1
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x220>
 800089a:	e0e0      	b.n	8000a5e <__aeabi_dadd+0x3e2>
 800089c:	4c51      	ldr	r4, [pc, #324]	; (80009e4 <__aeabi_dadd+0x368>)
 800089e:	45a4      	cmp	ip, r4
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x228>
 80008a2:	e161      	b.n	8000b68 <__aeabi_dadd+0x4ec>
 80008a4:	4694      	mov	ip, r2
 80008a6:	e7b4      	b.n	8000812 <__aeabi_dadd+0x196>
 80008a8:	003a      	movs	r2, r7
 80008aa:	391f      	subs	r1, #31
 80008ac:	40ca      	lsrs	r2, r1
 80008ae:	0011      	movs	r1, r2
 80008b0:	2b20      	cmp	r3, #32
 80008b2:	d003      	beq.n	80008bc <__aeabi_dadd+0x240>
 80008b4:	2240      	movs	r2, #64	; 0x40
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	409f      	lsls	r7, r3
 80008ba:	433c      	orrs	r4, r7
 80008bc:	1e63      	subs	r3, r4, #1
 80008be:	419c      	sbcs	r4, r3
 80008c0:	2700      	movs	r7, #0
 80008c2:	2600      	movs	r6, #0
 80008c4:	430c      	orrs	r4, r1
 80008c6:	0763      	lsls	r3, r4, #29
 80008c8:	d000      	beq.n	80008cc <__aeabi_dadd+0x250>
 80008ca:	e753      	b.n	8000774 <__aeabi_dadd+0xf8>
 80008cc:	46b4      	mov	ip, r6
 80008ce:	08e4      	lsrs	r4, r4, #3
 80008d0:	077b      	lsls	r3, r7, #29
 80008d2:	4323      	orrs	r3, r4
 80008d4:	08f8      	lsrs	r0, r7, #3
 80008d6:	4a43      	ldr	r2, [pc, #268]	; (80009e4 <__aeabi_dadd+0x368>)
 80008d8:	4594      	cmp	ip, r2
 80008da:	d01d      	beq.n	8000918 <__aeabi_dadd+0x29c>
 80008dc:	4662      	mov	r2, ip
 80008de:	0307      	lsls	r7, r0, #12
 80008e0:	0552      	lsls	r2, r2, #21
 80008e2:	0b3f      	lsrs	r7, r7, #12
 80008e4:	0d52      	lsrs	r2, r2, #21
 80008e6:	e760      	b.n	80007aa <__aeabi_dadd+0x12e>
 80008e8:	4644      	mov	r4, r8
 80008ea:	430c      	orrs	r4, r1
 80008ec:	1e62      	subs	r2, r4, #1
 80008ee:	4194      	sbcs	r4, r2
 80008f0:	18e4      	adds	r4, r4, r3
 80008f2:	429c      	cmp	r4, r3
 80008f4:	419b      	sbcs	r3, r3
 80008f6:	425f      	negs	r7, r3
 80008f8:	183f      	adds	r7, r7, r0
 80008fa:	023b      	lsls	r3, r7, #8
 80008fc:	d5e3      	bpl.n	80008c6 <__aeabi_dadd+0x24a>
 80008fe:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <__aeabi_dadd+0x368>)
 8000900:	3601      	adds	r6, #1
 8000902:	429e      	cmp	r6, r3
 8000904:	d000      	beq.n	8000908 <__aeabi_dadd+0x28c>
 8000906:	e0b5      	b.n	8000a74 <__aeabi_dadd+0x3f8>
 8000908:	0032      	movs	r2, r6
 800090a:	2700      	movs	r7, #0
 800090c:	2300      	movs	r3, #0
 800090e:	e74c      	b.n	80007aa <__aeabi_dadd+0x12e>
 8000910:	0742      	lsls	r2, r0, #29
 8000912:	08db      	lsrs	r3, r3, #3
 8000914:	4313      	orrs	r3, r2
 8000916:	08c0      	lsrs	r0, r0, #3
 8000918:	001a      	movs	r2, r3
 800091a:	4302      	orrs	r2, r0
 800091c:	d100      	bne.n	8000920 <__aeabi_dadd+0x2a4>
 800091e:	e1e1      	b.n	8000ce4 <__aeabi_dadd+0x668>
 8000920:	2780      	movs	r7, #128	; 0x80
 8000922:	033f      	lsls	r7, r7, #12
 8000924:	4307      	orrs	r7, r0
 8000926:	033f      	lsls	r7, r7, #12
 8000928:	4a2e      	ldr	r2, [pc, #184]	; (80009e4 <__aeabi_dadd+0x368>)
 800092a:	0b3f      	lsrs	r7, r7, #12
 800092c:	e73d      	b.n	80007aa <__aeabi_dadd+0x12e>
 800092e:	0020      	movs	r0, r4
 8000930:	f001 fc8a 	bl	8002248 <__clzsi2>
 8000934:	0001      	movs	r1, r0
 8000936:	3118      	adds	r1, #24
 8000938:	291f      	cmp	r1, #31
 800093a:	dc00      	bgt.n	800093e <__aeabi_dadd+0x2c2>
 800093c:	e6fc      	b.n	8000738 <__aeabi_dadd+0xbc>
 800093e:	3808      	subs	r0, #8
 8000940:	4084      	lsls	r4, r0
 8000942:	0027      	movs	r7, r4
 8000944:	2400      	movs	r4, #0
 8000946:	42b1      	cmp	r1, r6
 8000948:	db00      	blt.n	800094c <__aeabi_dadd+0x2d0>
 800094a:	e6ff      	b.n	800074c <__aeabi_dadd+0xd0>
 800094c:	4a26      	ldr	r2, [pc, #152]	; (80009e8 <__aeabi_dadd+0x36c>)
 800094e:	1a76      	subs	r6, r6, r1
 8000950:	4017      	ands	r7, r2
 8000952:	e70d      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000954:	2a00      	cmp	r2, #0
 8000956:	d02f      	beq.n	80009b8 <__aeabi_dadd+0x33c>
 8000958:	464a      	mov	r2, r9
 800095a:	1b92      	subs	r2, r2, r6
 800095c:	4694      	mov	ip, r2
 800095e:	2e00      	cmp	r6, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_dadd+0x2e8>
 8000962:	e0ad      	b.n	8000ac0 <__aeabi_dadd+0x444>
 8000964:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <__aeabi_dadd+0x368>)
 8000966:	4591      	cmp	r9, r2
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x2f0>
 800096a:	e10f      	b.n	8000b8c <__aeabi_dadd+0x510>
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	0412      	lsls	r2, r2, #16
 8000970:	4310      	orrs	r0, r2
 8000972:	4662      	mov	r2, ip
 8000974:	2a38      	cmp	r2, #56	; 0x38
 8000976:	dd00      	ble.n	800097a <__aeabi_dadd+0x2fe>
 8000978:	e10f      	b.n	8000b9a <__aeabi_dadd+0x51e>
 800097a:	2a1f      	cmp	r2, #31
 800097c:	dd00      	ble.n	8000980 <__aeabi_dadd+0x304>
 800097e:	e180      	b.n	8000c82 <__aeabi_dadd+0x606>
 8000980:	4664      	mov	r4, ip
 8000982:	2220      	movs	r2, #32
 8000984:	001e      	movs	r6, r3
 8000986:	1b12      	subs	r2, r2, r4
 8000988:	4667      	mov	r7, ip
 800098a:	0004      	movs	r4, r0
 800098c:	4093      	lsls	r3, r2
 800098e:	4094      	lsls	r4, r2
 8000990:	40fe      	lsrs	r6, r7
 8000992:	1e5a      	subs	r2, r3, #1
 8000994:	4193      	sbcs	r3, r2
 8000996:	40f8      	lsrs	r0, r7
 8000998:	4334      	orrs	r4, r6
 800099a:	431c      	orrs	r4, r3
 800099c:	4480      	add	r8, r0
 800099e:	1864      	adds	r4, r4, r1
 80009a0:	428c      	cmp	r4, r1
 80009a2:	41bf      	sbcs	r7, r7
 80009a4:	427f      	negs	r7, r7
 80009a6:	464e      	mov	r6, r9
 80009a8:	4447      	add	r7, r8
 80009aa:	e7a6      	b.n	80008fa <__aeabi_dadd+0x27e>
 80009ac:	4642      	mov	r2, r8
 80009ae:	430a      	orrs	r2, r1
 80009b0:	0011      	movs	r1, r2
 80009b2:	1e4a      	subs	r2, r1, #1
 80009b4:	4191      	sbcs	r1, r2
 80009b6:	e6ad      	b.n	8000714 <__aeabi_dadd+0x98>
 80009b8:	4c0c      	ldr	r4, [pc, #48]	; (80009ec <__aeabi_dadd+0x370>)
 80009ba:	1c72      	adds	r2, r6, #1
 80009bc:	4222      	tst	r2, r4
 80009be:	d000      	beq.n	80009c2 <__aeabi_dadd+0x346>
 80009c0:	e0a1      	b.n	8000b06 <__aeabi_dadd+0x48a>
 80009c2:	0002      	movs	r2, r0
 80009c4:	431a      	orrs	r2, r3
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d000      	beq.n	80009cc <__aeabi_dadd+0x350>
 80009ca:	e0fa      	b.n	8000bc2 <__aeabi_dadd+0x546>
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	d100      	bne.n	80009d2 <__aeabi_dadd+0x356>
 80009d0:	e145      	b.n	8000c5e <__aeabi_dadd+0x5e2>
 80009d2:	003a      	movs	r2, r7
 80009d4:	430a      	orrs	r2, r1
 80009d6:	d000      	beq.n	80009da <__aeabi_dadd+0x35e>
 80009d8:	e146      	b.n	8000c68 <__aeabi_dadd+0x5ec>
 80009da:	0742      	lsls	r2, r0, #29
 80009dc:	08db      	lsrs	r3, r3, #3
 80009de:	4313      	orrs	r3, r2
 80009e0:	08c0      	lsrs	r0, r0, #3
 80009e2:	e77b      	b.n	80008dc <__aeabi_dadd+0x260>
 80009e4:	000007ff 	.word	0x000007ff
 80009e8:	ff7fffff 	.word	0xff7fffff
 80009ec:	000007fe 	.word	0x000007fe
 80009f0:	4647      	mov	r7, r8
 80009f2:	1a5c      	subs	r4, r3, r1
 80009f4:	1bc2      	subs	r2, r0, r7
 80009f6:	42a3      	cmp	r3, r4
 80009f8:	41bf      	sbcs	r7, r7
 80009fa:	427f      	negs	r7, r7
 80009fc:	46b9      	mov	r9, r7
 80009fe:	0017      	movs	r7, r2
 8000a00:	464a      	mov	r2, r9
 8000a02:	1abf      	subs	r7, r7, r2
 8000a04:	023a      	lsls	r2, r7, #8
 8000a06:	d500      	bpl.n	8000a0a <__aeabi_dadd+0x38e>
 8000a08:	e08d      	b.n	8000b26 <__aeabi_dadd+0x4aa>
 8000a0a:	0023      	movs	r3, r4
 8000a0c:	433b      	orrs	r3, r7
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_dadd+0x396>
 8000a10:	e68a      	b.n	8000728 <__aeabi_dadd+0xac>
 8000a12:	2000      	movs	r0, #0
 8000a14:	2500      	movs	r5, #0
 8000a16:	e761      	b.n	80008dc <__aeabi_dadd+0x260>
 8000a18:	4cb4      	ldr	r4, [pc, #720]	; (8000cec <__aeabi_dadd+0x670>)
 8000a1a:	45a1      	cmp	r9, r4
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dadd+0x3a4>
 8000a1e:	e0ad      	b.n	8000b7c <__aeabi_dadd+0x500>
 8000a20:	2480      	movs	r4, #128	; 0x80
 8000a22:	0424      	lsls	r4, r4, #16
 8000a24:	4320      	orrs	r0, r4
 8000a26:	4664      	mov	r4, ip
 8000a28:	2c38      	cmp	r4, #56	; 0x38
 8000a2a:	dc3d      	bgt.n	8000aa8 <__aeabi_dadd+0x42c>
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	2c1f      	cmp	r4, #31
 8000a30:	dd00      	ble.n	8000a34 <__aeabi_dadd+0x3b8>
 8000a32:	e0b7      	b.n	8000ba4 <__aeabi_dadd+0x528>
 8000a34:	2520      	movs	r5, #32
 8000a36:	001e      	movs	r6, r3
 8000a38:	1b2d      	subs	r5, r5, r4
 8000a3a:	0004      	movs	r4, r0
 8000a3c:	40ab      	lsls	r3, r5
 8000a3e:	40ac      	lsls	r4, r5
 8000a40:	40d6      	lsrs	r6, r2
 8000a42:	40d0      	lsrs	r0, r2
 8000a44:	4642      	mov	r2, r8
 8000a46:	1e5d      	subs	r5, r3, #1
 8000a48:	41ab      	sbcs	r3, r5
 8000a4a:	4334      	orrs	r4, r6
 8000a4c:	1a12      	subs	r2, r2, r0
 8000a4e:	4690      	mov	r8, r2
 8000a50:	4323      	orrs	r3, r4
 8000a52:	e02c      	b.n	8000aae <__aeabi_dadd+0x432>
 8000a54:	0742      	lsls	r2, r0, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c0      	lsrs	r0, r0, #3
 8000a5c:	e73b      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000a5e:	185c      	adds	r4, r3, r1
 8000a60:	429c      	cmp	r4, r3
 8000a62:	419b      	sbcs	r3, r3
 8000a64:	4440      	add	r0, r8
 8000a66:	425b      	negs	r3, r3
 8000a68:	18c7      	adds	r7, r0, r3
 8000a6a:	2601      	movs	r6, #1
 8000a6c:	023b      	lsls	r3, r7, #8
 8000a6e:	d400      	bmi.n	8000a72 <__aeabi_dadd+0x3f6>
 8000a70:	e729      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000a72:	2602      	movs	r6, #2
 8000a74:	4a9e      	ldr	r2, [pc, #632]	; (8000cf0 <__aeabi_dadd+0x674>)
 8000a76:	0863      	lsrs	r3, r4, #1
 8000a78:	4017      	ands	r7, r2
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4014      	ands	r4, r2
 8000a7e:	431c      	orrs	r4, r3
 8000a80:	07fb      	lsls	r3, r7, #31
 8000a82:	431c      	orrs	r4, r3
 8000a84:	087f      	lsrs	r7, r7, #1
 8000a86:	e673      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000a88:	4644      	mov	r4, r8
 8000a8a:	3a20      	subs	r2, #32
 8000a8c:	40d4      	lsrs	r4, r2
 8000a8e:	4662      	mov	r2, ip
 8000a90:	2a20      	cmp	r2, #32
 8000a92:	d005      	beq.n	8000aa0 <__aeabi_dadd+0x424>
 8000a94:	4667      	mov	r7, ip
 8000a96:	2240      	movs	r2, #64	; 0x40
 8000a98:	1bd2      	subs	r2, r2, r7
 8000a9a:	4647      	mov	r7, r8
 8000a9c:	4097      	lsls	r7, r2
 8000a9e:	4339      	orrs	r1, r7
 8000aa0:	1e4a      	subs	r2, r1, #1
 8000aa2:	4191      	sbcs	r1, r2
 8000aa4:	4321      	orrs	r1, r4
 8000aa6:	e635      	b.n	8000714 <__aeabi_dadd+0x98>
 8000aa8:	4303      	orrs	r3, r0
 8000aaa:	1e58      	subs	r0, r3, #1
 8000aac:	4183      	sbcs	r3, r0
 8000aae:	1acc      	subs	r4, r1, r3
 8000ab0:	42a1      	cmp	r1, r4
 8000ab2:	41bf      	sbcs	r7, r7
 8000ab4:	4643      	mov	r3, r8
 8000ab6:	427f      	negs	r7, r7
 8000ab8:	4655      	mov	r5, sl
 8000aba:	464e      	mov	r6, r9
 8000abc:	1bdf      	subs	r7, r3, r7
 8000abe:	e62e      	b.n	800071e <__aeabi_dadd+0xa2>
 8000ac0:	0002      	movs	r2, r0
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_dadd+0x44c>
 8000ac6:	e0bd      	b.n	8000c44 <__aeabi_dadd+0x5c8>
 8000ac8:	4662      	mov	r2, ip
 8000aca:	4664      	mov	r4, ip
 8000acc:	3a01      	subs	r2, #1
 8000ace:	2c01      	cmp	r4, #1
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x458>
 8000ad2:	e0e5      	b.n	8000ca0 <__aeabi_dadd+0x624>
 8000ad4:	4c85      	ldr	r4, [pc, #532]	; (8000cec <__aeabi_dadd+0x670>)
 8000ad6:	45a4      	cmp	ip, r4
 8000ad8:	d058      	beq.n	8000b8c <__aeabi_dadd+0x510>
 8000ada:	4694      	mov	ip, r2
 8000adc:	e749      	b.n	8000972 <__aeabi_dadd+0x2f6>
 8000ade:	4664      	mov	r4, ip
 8000ae0:	2220      	movs	r2, #32
 8000ae2:	1b12      	subs	r2, r2, r4
 8000ae4:	4644      	mov	r4, r8
 8000ae6:	4094      	lsls	r4, r2
 8000ae8:	000f      	movs	r7, r1
 8000aea:	46a1      	mov	r9, r4
 8000aec:	4664      	mov	r4, ip
 8000aee:	4091      	lsls	r1, r2
 8000af0:	40e7      	lsrs	r7, r4
 8000af2:	464c      	mov	r4, r9
 8000af4:	1e4a      	subs	r2, r1, #1
 8000af6:	4191      	sbcs	r1, r2
 8000af8:	433c      	orrs	r4, r7
 8000afa:	4642      	mov	r2, r8
 8000afc:	430c      	orrs	r4, r1
 8000afe:	4661      	mov	r1, ip
 8000b00:	40ca      	lsrs	r2, r1
 8000b02:	1880      	adds	r0, r0, r2
 8000b04:	e6f4      	b.n	80008f0 <__aeabi_dadd+0x274>
 8000b06:	4c79      	ldr	r4, [pc, #484]	; (8000cec <__aeabi_dadd+0x670>)
 8000b08:	42a2      	cmp	r2, r4
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x492>
 8000b0c:	e6fd      	b.n	800090a <__aeabi_dadd+0x28e>
 8000b0e:	1859      	adds	r1, r3, r1
 8000b10:	4299      	cmp	r1, r3
 8000b12:	419b      	sbcs	r3, r3
 8000b14:	4440      	add	r0, r8
 8000b16:	425f      	negs	r7, r3
 8000b18:	19c7      	adds	r7, r0, r7
 8000b1a:	07fc      	lsls	r4, r7, #31
 8000b1c:	0849      	lsrs	r1, r1, #1
 8000b1e:	0016      	movs	r6, r2
 8000b20:	430c      	orrs	r4, r1
 8000b22:	087f      	lsrs	r7, r7, #1
 8000b24:	e6cf      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000b26:	1acc      	subs	r4, r1, r3
 8000b28:	42a1      	cmp	r1, r4
 8000b2a:	41bf      	sbcs	r7, r7
 8000b2c:	4643      	mov	r3, r8
 8000b2e:	427f      	negs	r7, r7
 8000b30:	1a18      	subs	r0, r3, r0
 8000b32:	4655      	mov	r5, sl
 8000b34:	1bc7      	subs	r7, r0, r7
 8000b36:	e5f7      	b.n	8000728 <__aeabi_dadd+0xac>
 8000b38:	08c9      	lsrs	r1, r1, #3
 8000b3a:	077b      	lsls	r3, r7, #29
 8000b3c:	4655      	mov	r5, sl
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	08f8      	lsrs	r0, r7, #3
 8000b42:	e6c8      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000b44:	2c00      	cmp	r4, #0
 8000b46:	d000      	beq.n	8000b4a <__aeabi_dadd+0x4ce>
 8000b48:	e081      	b.n	8000c4e <__aeabi_dadd+0x5d2>
 8000b4a:	4643      	mov	r3, r8
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	d115      	bne.n	8000b7c <__aeabi_dadd+0x500>
 8000b50:	2080      	movs	r0, #128	; 0x80
 8000b52:	2500      	movs	r5, #0
 8000b54:	0300      	lsls	r0, r0, #12
 8000b56:	e6e3      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000b58:	1a5c      	subs	r4, r3, r1
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	419b      	sbcs	r3, r3
 8000b5e:	1bc7      	subs	r7, r0, r7
 8000b60:	425b      	negs	r3, r3
 8000b62:	2601      	movs	r6, #1
 8000b64:	1aff      	subs	r7, r7, r3
 8000b66:	e5da      	b.n	800071e <__aeabi_dadd+0xa2>
 8000b68:	0742      	lsls	r2, r0, #29
 8000b6a:	08db      	lsrs	r3, r3, #3
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	08c0      	lsrs	r0, r0, #3
 8000b70:	e6d2      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000b72:	0742      	lsls	r2, r0, #29
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	08c0      	lsrs	r0, r0, #3
 8000b7a:	e6ac      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000b7c:	4643      	mov	r3, r8
 8000b7e:	4642      	mov	r2, r8
 8000b80:	08c9      	lsrs	r1, r1, #3
 8000b82:	075b      	lsls	r3, r3, #29
 8000b84:	4655      	mov	r5, sl
 8000b86:	430b      	orrs	r3, r1
 8000b88:	08d0      	lsrs	r0, r2, #3
 8000b8a:	e6c5      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	4642      	mov	r2, r8
 8000b90:	075b      	lsls	r3, r3, #29
 8000b92:	08c9      	lsrs	r1, r1, #3
 8000b94:	430b      	orrs	r3, r1
 8000b96:	08d0      	lsrs	r0, r2, #3
 8000b98:	e6be      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000b9a:	4303      	orrs	r3, r0
 8000b9c:	001c      	movs	r4, r3
 8000b9e:	1e63      	subs	r3, r4, #1
 8000ba0:	419c      	sbcs	r4, r3
 8000ba2:	e6fc      	b.n	800099e <__aeabi_dadd+0x322>
 8000ba4:	0002      	movs	r2, r0
 8000ba6:	3c20      	subs	r4, #32
 8000ba8:	40e2      	lsrs	r2, r4
 8000baa:	0014      	movs	r4, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	2a20      	cmp	r2, #32
 8000bb0:	d003      	beq.n	8000bba <__aeabi_dadd+0x53e>
 8000bb2:	2540      	movs	r5, #64	; 0x40
 8000bb4:	1aad      	subs	r5, r5, r2
 8000bb6:	40a8      	lsls	r0, r5
 8000bb8:	4303      	orrs	r3, r0
 8000bba:	1e58      	subs	r0, r3, #1
 8000bbc:	4183      	sbcs	r3, r0
 8000bbe:	4323      	orrs	r3, r4
 8000bc0:	e775      	b.n	8000aae <__aeabi_dadd+0x432>
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	d0e2      	beq.n	8000b8c <__aeabi_dadd+0x510>
 8000bc6:	003a      	movs	r2, r7
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	d0cd      	beq.n	8000b68 <__aeabi_dadd+0x4ec>
 8000bcc:	0742      	lsls	r2, r0, #29
 8000bce:	08db      	lsrs	r3, r3, #3
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	08c0      	lsrs	r0, r0, #3
 8000bd6:	0312      	lsls	r2, r2, #12
 8000bd8:	4210      	tst	r0, r2
 8000bda:	d006      	beq.n	8000bea <__aeabi_dadd+0x56e>
 8000bdc:	08fc      	lsrs	r4, r7, #3
 8000bde:	4214      	tst	r4, r2
 8000be0:	d103      	bne.n	8000bea <__aeabi_dadd+0x56e>
 8000be2:	0020      	movs	r0, r4
 8000be4:	08cb      	lsrs	r3, r1, #3
 8000be6:	077a      	lsls	r2, r7, #29
 8000be8:	4313      	orrs	r3, r2
 8000bea:	0f5a      	lsrs	r2, r3, #29
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	0752      	lsls	r2, r2, #29
 8000bf0:	08db      	lsrs	r3, r3, #3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	e690      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	430b      	orrs	r3, r1
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x582>
 8000bfc:	e709      	b.n	8000a12 <__aeabi_dadd+0x396>
 8000bfe:	4643      	mov	r3, r8
 8000c00:	4642      	mov	r2, r8
 8000c02:	08c9      	lsrs	r1, r1, #3
 8000c04:	075b      	lsls	r3, r3, #29
 8000c06:	4655      	mov	r5, sl
 8000c08:	430b      	orrs	r3, r1
 8000c0a:	08d0      	lsrs	r0, r2, #3
 8000c0c:	e666      	b.n	80008dc <__aeabi_dadd+0x260>
 8000c0e:	1acc      	subs	r4, r1, r3
 8000c10:	42a1      	cmp	r1, r4
 8000c12:	4189      	sbcs	r1, r1
 8000c14:	1a3f      	subs	r7, r7, r0
 8000c16:	4249      	negs	r1, r1
 8000c18:	4655      	mov	r5, sl
 8000c1a:	2601      	movs	r6, #1
 8000c1c:	1a7f      	subs	r7, r7, r1
 8000c1e:	e57e      	b.n	800071e <__aeabi_dadd+0xa2>
 8000c20:	4642      	mov	r2, r8
 8000c22:	1a5c      	subs	r4, r3, r1
 8000c24:	1a87      	subs	r7, r0, r2
 8000c26:	42a3      	cmp	r3, r4
 8000c28:	4192      	sbcs	r2, r2
 8000c2a:	4252      	negs	r2, r2
 8000c2c:	1abf      	subs	r7, r7, r2
 8000c2e:	023a      	lsls	r2, r7, #8
 8000c30:	d53d      	bpl.n	8000cae <__aeabi_dadd+0x632>
 8000c32:	1acc      	subs	r4, r1, r3
 8000c34:	42a1      	cmp	r1, r4
 8000c36:	4189      	sbcs	r1, r1
 8000c38:	4643      	mov	r3, r8
 8000c3a:	4249      	negs	r1, r1
 8000c3c:	1a1f      	subs	r7, r3, r0
 8000c3e:	4655      	mov	r5, sl
 8000c40:	1a7f      	subs	r7, r7, r1
 8000c42:	e595      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000c44:	077b      	lsls	r3, r7, #29
 8000c46:	08c9      	lsrs	r1, r1, #3
 8000c48:	430b      	orrs	r3, r1
 8000c4a:	08f8      	lsrs	r0, r7, #3
 8000c4c:	e643      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000c4e:	4644      	mov	r4, r8
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	430c      	orrs	r4, r1
 8000c54:	d130      	bne.n	8000cb8 <__aeabi_dadd+0x63c>
 8000c56:	0742      	lsls	r2, r0, #29
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	08c0      	lsrs	r0, r0, #3
 8000c5c:	e65c      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000c5e:	077b      	lsls	r3, r7, #29
 8000c60:	08c9      	lsrs	r1, r1, #3
 8000c62:	430b      	orrs	r3, r1
 8000c64:	08f8      	lsrs	r0, r7, #3
 8000c66:	e639      	b.n	80008dc <__aeabi_dadd+0x260>
 8000c68:	185c      	adds	r4, r3, r1
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	419b      	sbcs	r3, r3
 8000c6e:	4440      	add	r0, r8
 8000c70:	425b      	negs	r3, r3
 8000c72:	18c7      	adds	r7, r0, r3
 8000c74:	023b      	lsls	r3, r7, #8
 8000c76:	d400      	bmi.n	8000c7a <__aeabi_dadd+0x5fe>
 8000c78:	e625      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <__aeabi_dadd+0x674>)
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	401f      	ands	r7, r3
 8000c80:	e621      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000c82:	0004      	movs	r4, r0
 8000c84:	3a20      	subs	r2, #32
 8000c86:	40d4      	lsrs	r4, r2
 8000c88:	4662      	mov	r2, ip
 8000c8a:	2a20      	cmp	r2, #32
 8000c8c:	d004      	beq.n	8000c98 <__aeabi_dadd+0x61c>
 8000c8e:	2240      	movs	r2, #64	; 0x40
 8000c90:	4666      	mov	r6, ip
 8000c92:	1b92      	subs	r2, r2, r6
 8000c94:	4090      	lsls	r0, r2
 8000c96:	4303      	orrs	r3, r0
 8000c98:	1e5a      	subs	r2, r3, #1
 8000c9a:	4193      	sbcs	r3, r2
 8000c9c:	431c      	orrs	r4, r3
 8000c9e:	e67e      	b.n	800099e <__aeabi_dadd+0x322>
 8000ca0:	185c      	adds	r4, r3, r1
 8000ca2:	428c      	cmp	r4, r1
 8000ca4:	4189      	sbcs	r1, r1
 8000ca6:	4440      	add	r0, r8
 8000ca8:	4249      	negs	r1, r1
 8000caa:	1847      	adds	r7, r0, r1
 8000cac:	e6dd      	b.n	8000a6a <__aeabi_dadd+0x3ee>
 8000cae:	0023      	movs	r3, r4
 8000cb0:	433b      	orrs	r3, r7
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dadd+0x63a>
 8000cb4:	e6ad      	b.n	8000a12 <__aeabi_dadd+0x396>
 8000cb6:	e606      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cb8:	0744      	lsls	r4, r0, #29
 8000cba:	4323      	orrs	r3, r4
 8000cbc:	2480      	movs	r4, #128	; 0x80
 8000cbe:	08c0      	lsrs	r0, r0, #3
 8000cc0:	0324      	lsls	r4, r4, #12
 8000cc2:	4220      	tst	r0, r4
 8000cc4:	d008      	beq.n	8000cd8 <__aeabi_dadd+0x65c>
 8000cc6:	4642      	mov	r2, r8
 8000cc8:	08d6      	lsrs	r6, r2, #3
 8000cca:	4226      	tst	r6, r4
 8000ccc:	d104      	bne.n	8000cd8 <__aeabi_dadd+0x65c>
 8000cce:	4655      	mov	r5, sl
 8000cd0:	0030      	movs	r0, r6
 8000cd2:	08cb      	lsrs	r3, r1, #3
 8000cd4:	0751      	lsls	r1, r2, #29
 8000cd6:	430b      	orrs	r3, r1
 8000cd8:	0f5a      	lsrs	r2, r3, #29
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	0752      	lsls	r2, r2, #29
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	e619      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4a01      	ldr	r2, [pc, #4]	; (8000cec <__aeabi_dadd+0x670>)
 8000ce8:	001f      	movs	r7, r3
 8000cea:	e55e      	b.n	80007aa <__aeabi_dadd+0x12e>
 8000cec:	000007ff 	.word	0x000007ff
 8000cf0:	ff7fffff 	.word	0xff7fffff

08000cf4 <__aeabi_ddiv>:
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf6:	4657      	mov	r7, sl
 8000cf8:	464e      	mov	r6, r9
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	46de      	mov	lr, fp
 8000cfe:	b5e0      	push	{r5, r6, r7, lr}
 8000d00:	4681      	mov	r9, r0
 8000d02:	0005      	movs	r5, r0
 8000d04:	030c      	lsls	r4, r1, #12
 8000d06:	0048      	lsls	r0, r1, #1
 8000d08:	4692      	mov	sl, r2
 8000d0a:	001f      	movs	r7, r3
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	0b24      	lsrs	r4, r4, #12
 8000d10:	0d40      	lsrs	r0, r0, #21
 8000d12:	0fce      	lsrs	r6, r1, #31
 8000d14:	2800      	cmp	r0, #0
 8000d16:	d100      	bne.n	8000d1a <__aeabi_ddiv+0x26>
 8000d18:	e156      	b.n	8000fc8 <__aeabi_ddiv+0x2d4>
 8000d1a:	4bd4      	ldr	r3, [pc, #848]	; (800106c <__aeabi_ddiv+0x378>)
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_ddiv+0x2e>
 8000d20:	e172      	b.n	8001008 <__aeabi_ddiv+0x314>
 8000d22:	0f6b      	lsrs	r3, r5, #29
 8000d24:	00e4      	lsls	r4, r4, #3
 8000d26:	431c      	orrs	r4, r3
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	041b      	lsls	r3, r3, #16
 8000d2c:	4323      	orrs	r3, r4
 8000d2e:	4698      	mov	r8, r3
 8000d30:	4bcf      	ldr	r3, [pc, #828]	; (8001070 <__aeabi_ddiv+0x37c>)
 8000d32:	00ed      	lsls	r5, r5, #3
 8000d34:	469b      	mov	fp, r3
 8000d36:	2300      	movs	r3, #0
 8000d38:	4699      	mov	r9, r3
 8000d3a:	4483      	add	fp, r0
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	033c      	lsls	r4, r7, #12
 8000d40:	007b      	lsls	r3, r7, #1
 8000d42:	4650      	mov	r0, sl
 8000d44:	0b24      	lsrs	r4, r4, #12
 8000d46:	0d5b      	lsrs	r3, r3, #21
 8000d48:	0fff      	lsrs	r7, r7, #31
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_ddiv+0x5c>
 8000d4e:	e11f      	b.n	8000f90 <__aeabi_ddiv+0x29c>
 8000d50:	4ac6      	ldr	r2, [pc, #792]	; (800106c <__aeabi_ddiv+0x378>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d100      	bne.n	8000d58 <__aeabi_ddiv+0x64>
 8000d56:	e162      	b.n	800101e <__aeabi_ddiv+0x32a>
 8000d58:	49c5      	ldr	r1, [pc, #788]	; (8001070 <__aeabi_ddiv+0x37c>)
 8000d5a:	0f42      	lsrs	r2, r0, #29
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	00e4      	lsls	r4, r4, #3
 8000d60:	4659      	mov	r1, fp
 8000d62:	4314      	orrs	r4, r2
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	4463      	add	r3, ip
 8000d68:	0412      	lsls	r2, r2, #16
 8000d6a:	1acb      	subs	r3, r1, r3
 8000d6c:	4314      	orrs	r4, r2
 8000d6e:	469b      	mov	fp, r3
 8000d70:	00c2      	lsls	r2, r0, #3
 8000d72:	2000      	movs	r0, #0
 8000d74:	0033      	movs	r3, r6
 8000d76:	407b      	eors	r3, r7
 8000d78:	469a      	mov	sl, r3
 8000d7a:	464b      	mov	r3, r9
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d827      	bhi.n	8000dd0 <__aeabi_ddiv+0xdc>
 8000d80:	49bc      	ldr	r1, [pc, #752]	; (8001074 <__aeabi_ddiv+0x380>)
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	58cb      	ldr	r3, [r1, r3]
 8000d86:	469f      	mov	pc, r3
 8000d88:	46b2      	mov	sl, r6
 8000d8a:	9b00      	ldr	r3, [sp, #0]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d016      	beq.n	8000dbe <__aeabi_ddiv+0xca>
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	d100      	bne.n	8000d96 <__aeabi_ddiv+0xa2>
 8000d94:	e28e      	b.n	80012b4 <__aeabi_ddiv+0x5c0>
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d000      	beq.n	8000d9c <__aeabi_ddiv+0xa8>
 8000d9a:	e0d9      	b.n	8000f50 <__aeabi_ddiv+0x25c>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	2400      	movs	r4, #0
 8000da0:	2500      	movs	r5, #0
 8000da2:	4652      	mov	r2, sl
 8000da4:	051b      	lsls	r3, r3, #20
 8000da6:	4323      	orrs	r3, r4
 8000da8:	07d2      	lsls	r2, r2, #31
 8000daa:	4313      	orrs	r3, r2
 8000dac:	0028      	movs	r0, r5
 8000dae:	0019      	movs	r1, r3
 8000db0:	b005      	add	sp, #20
 8000db2:	bcf0      	pop	{r4, r5, r6, r7}
 8000db4:	46bb      	mov	fp, r7
 8000db6:	46b2      	mov	sl, r6
 8000db8:	46a9      	mov	r9, r5
 8000dba:	46a0      	mov	r8, r4
 8000dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dbe:	2400      	movs	r4, #0
 8000dc0:	2500      	movs	r5, #0
 8000dc2:	4baa      	ldr	r3, [pc, #680]	; (800106c <__aeabi_ddiv+0x378>)
 8000dc4:	e7ed      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8000dc6:	46ba      	mov	sl, r7
 8000dc8:	46a0      	mov	r8, r4
 8000dca:	0015      	movs	r5, r2
 8000dcc:	9000      	str	r0, [sp, #0]
 8000dce:	e7dc      	b.n	8000d8a <__aeabi_ddiv+0x96>
 8000dd0:	4544      	cmp	r4, r8
 8000dd2:	d200      	bcs.n	8000dd6 <__aeabi_ddiv+0xe2>
 8000dd4:	e1c7      	b.n	8001166 <__aeabi_ddiv+0x472>
 8000dd6:	d100      	bne.n	8000dda <__aeabi_ddiv+0xe6>
 8000dd8:	e1c2      	b.n	8001160 <__aeabi_ddiv+0x46c>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	425b      	negs	r3, r3
 8000dde:	469c      	mov	ip, r3
 8000de0:	002e      	movs	r6, r5
 8000de2:	4640      	mov	r0, r8
 8000de4:	2500      	movs	r5, #0
 8000de6:	44e3      	add	fp, ip
 8000de8:	0223      	lsls	r3, r4, #8
 8000dea:	0e14      	lsrs	r4, r2, #24
 8000dec:	431c      	orrs	r4, r3
 8000dee:	0c1b      	lsrs	r3, r3, #16
 8000df0:	4699      	mov	r9, r3
 8000df2:	0423      	lsls	r3, r4, #16
 8000df4:	0c1f      	lsrs	r7, r3, #16
 8000df6:	0212      	lsls	r2, r2, #8
 8000df8:	4649      	mov	r1, r9
 8000dfa:	9200      	str	r2, [sp, #0]
 8000dfc:	9701      	str	r7, [sp, #4]
 8000dfe:	f7ff fa23 	bl	8000248 <__aeabi_uidivmod>
 8000e02:	0002      	movs	r2, r0
 8000e04:	437a      	muls	r2, r7
 8000e06:	040b      	lsls	r3, r1, #16
 8000e08:	0c31      	lsrs	r1, r6, #16
 8000e0a:	4680      	mov	r8, r0
 8000e0c:	4319      	orrs	r1, r3
 8000e0e:	428a      	cmp	r2, r1
 8000e10:	d907      	bls.n	8000e22 <__aeabi_ddiv+0x12e>
 8000e12:	2301      	movs	r3, #1
 8000e14:	425b      	negs	r3, r3
 8000e16:	469c      	mov	ip, r3
 8000e18:	1909      	adds	r1, r1, r4
 8000e1a:	44e0      	add	r8, ip
 8000e1c:	428c      	cmp	r4, r1
 8000e1e:	d800      	bhi.n	8000e22 <__aeabi_ddiv+0x12e>
 8000e20:	e207      	b.n	8001232 <__aeabi_ddiv+0x53e>
 8000e22:	1a88      	subs	r0, r1, r2
 8000e24:	4649      	mov	r1, r9
 8000e26:	f7ff fa0f 	bl	8000248 <__aeabi_uidivmod>
 8000e2a:	0409      	lsls	r1, r1, #16
 8000e2c:	468c      	mov	ip, r1
 8000e2e:	0431      	lsls	r1, r6, #16
 8000e30:	4666      	mov	r6, ip
 8000e32:	9a01      	ldr	r2, [sp, #4]
 8000e34:	0c09      	lsrs	r1, r1, #16
 8000e36:	4342      	muls	r2, r0
 8000e38:	0003      	movs	r3, r0
 8000e3a:	4331      	orrs	r1, r6
 8000e3c:	428a      	cmp	r2, r1
 8000e3e:	d904      	bls.n	8000e4a <__aeabi_ddiv+0x156>
 8000e40:	1909      	adds	r1, r1, r4
 8000e42:	3b01      	subs	r3, #1
 8000e44:	428c      	cmp	r4, r1
 8000e46:	d800      	bhi.n	8000e4a <__aeabi_ddiv+0x156>
 8000e48:	e1ed      	b.n	8001226 <__aeabi_ddiv+0x532>
 8000e4a:	1a88      	subs	r0, r1, r2
 8000e4c:	4642      	mov	r2, r8
 8000e4e:	0412      	lsls	r2, r2, #16
 8000e50:	431a      	orrs	r2, r3
 8000e52:	4690      	mov	r8, r2
 8000e54:	4641      	mov	r1, r8
 8000e56:	9b00      	ldr	r3, [sp, #0]
 8000e58:	040e      	lsls	r6, r1, #16
 8000e5a:	0c1b      	lsrs	r3, r3, #16
 8000e5c:	001f      	movs	r7, r3
 8000e5e:	9302      	str	r3, [sp, #8]
 8000e60:	9b00      	ldr	r3, [sp, #0]
 8000e62:	0c36      	lsrs	r6, r6, #16
 8000e64:	041b      	lsls	r3, r3, #16
 8000e66:	0c19      	lsrs	r1, r3, #16
 8000e68:	000b      	movs	r3, r1
 8000e6a:	4373      	muls	r3, r6
 8000e6c:	0c12      	lsrs	r2, r2, #16
 8000e6e:	437e      	muls	r6, r7
 8000e70:	9103      	str	r1, [sp, #12]
 8000e72:	4351      	muls	r1, r2
 8000e74:	437a      	muls	r2, r7
 8000e76:	0c1f      	lsrs	r7, r3, #16
 8000e78:	46bc      	mov	ip, r7
 8000e7a:	1876      	adds	r6, r6, r1
 8000e7c:	4466      	add	r6, ip
 8000e7e:	42b1      	cmp	r1, r6
 8000e80:	d903      	bls.n	8000e8a <__aeabi_ddiv+0x196>
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	0249      	lsls	r1, r1, #9
 8000e86:	468c      	mov	ip, r1
 8000e88:	4462      	add	r2, ip
 8000e8a:	0c31      	lsrs	r1, r6, #16
 8000e8c:	188a      	adds	r2, r1, r2
 8000e8e:	0431      	lsls	r1, r6, #16
 8000e90:	041e      	lsls	r6, r3, #16
 8000e92:	0c36      	lsrs	r6, r6, #16
 8000e94:	198e      	adds	r6, r1, r6
 8000e96:	4290      	cmp	r0, r2
 8000e98:	d302      	bcc.n	8000ea0 <__aeabi_ddiv+0x1ac>
 8000e9a:	d112      	bne.n	8000ec2 <__aeabi_ddiv+0x1ce>
 8000e9c:	42b5      	cmp	r5, r6
 8000e9e:	d210      	bcs.n	8000ec2 <__aeabi_ddiv+0x1ce>
 8000ea0:	4643      	mov	r3, r8
 8000ea2:	1e59      	subs	r1, r3, #1
 8000ea4:	9b00      	ldr	r3, [sp, #0]
 8000ea6:	469c      	mov	ip, r3
 8000ea8:	4465      	add	r5, ip
 8000eaa:	001f      	movs	r7, r3
 8000eac:	429d      	cmp	r5, r3
 8000eae:	419b      	sbcs	r3, r3
 8000eb0:	425b      	negs	r3, r3
 8000eb2:	191b      	adds	r3, r3, r4
 8000eb4:	18c0      	adds	r0, r0, r3
 8000eb6:	4284      	cmp	r4, r0
 8000eb8:	d200      	bcs.n	8000ebc <__aeabi_ddiv+0x1c8>
 8000eba:	e1a0      	b.n	80011fe <__aeabi_ddiv+0x50a>
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_ddiv+0x1cc>
 8000ebe:	e19b      	b.n	80011f8 <__aeabi_ddiv+0x504>
 8000ec0:	4688      	mov	r8, r1
 8000ec2:	1bae      	subs	r6, r5, r6
 8000ec4:	42b5      	cmp	r5, r6
 8000ec6:	41ad      	sbcs	r5, r5
 8000ec8:	1a80      	subs	r0, r0, r2
 8000eca:	426d      	negs	r5, r5
 8000ecc:	1b40      	subs	r0, r0, r5
 8000ece:	4284      	cmp	r4, r0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x1e0>
 8000ed2:	e1d5      	b.n	8001280 <__aeabi_ddiv+0x58c>
 8000ed4:	4649      	mov	r1, r9
 8000ed6:	f7ff f9b7 	bl	8000248 <__aeabi_uidivmod>
 8000eda:	9a01      	ldr	r2, [sp, #4]
 8000edc:	040b      	lsls	r3, r1, #16
 8000ede:	4342      	muls	r2, r0
 8000ee0:	0c31      	lsrs	r1, r6, #16
 8000ee2:	0005      	movs	r5, r0
 8000ee4:	4319      	orrs	r1, r3
 8000ee6:	428a      	cmp	r2, r1
 8000ee8:	d900      	bls.n	8000eec <__aeabi_ddiv+0x1f8>
 8000eea:	e16c      	b.n	80011c6 <__aeabi_ddiv+0x4d2>
 8000eec:	1a88      	subs	r0, r1, r2
 8000eee:	4649      	mov	r1, r9
 8000ef0:	f7ff f9aa 	bl	8000248 <__aeabi_uidivmod>
 8000ef4:	9a01      	ldr	r2, [sp, #4]
 8000ef6:	0436      	lsls	r6, r6, #16
 8000ef8:	4342      	muls	r2, r0
 8000efa:	0409      	lsls	r1, r1, #16
 8000efc:	0c36      	lsrs	r6, r6, #16
 8000efe:	0003      	movs	r3, r0
 8000f00:	430e      	orrs	r6, r1
 8000f02:	42b2      	cmp	r2, r6
 8000f04:	d900      	bls.n	8000f08 <__aeabi_ddiv+0x214>
 8000f06:	e153      	b.n	80011b0 <__aeabi_ddiv+0x4bc>
 8000f08:	9803      	ldr	r0, [sp, #12]
 8000f0a:	1ab6      	subs	r6, r6, r2
 8000f0c:	0002      	movs	r2, r0
 8000f0e:	042d      	lsls	r5, r5, #16
 8000f10:	431d      	orrs	r5, r3
 8000f12:	9f02      	ldr	r7, [sp, #8]
 8000f14:	042b      	lsls	r3, r5, #16
 8000f16:	0c1b      	lsrs	r3, r3, #16
 8000f18:	435a      	muls	r2, r3
 8000f1a:	437b      	muls	r3, r7
 8000f1c:	469c      	mov	ip, r3
 8000f1e:	0c29      	lsrs	r1, r5, #16
 8000f20:	4348      	muls	r0, r1
 8000f22:	0c13      	lsrs	r3, r2, #16
 8000f24:	4484      	add	ip, r0
 8000f26:	4463      	add	r3, ip
 8000f28:	4379      	muls	r1, r7
 8000f2a:	4298      	cmp	r0, r3
 8000f2c:	d903      	bls.n	8000f36 <__aeabi_ddiv+0x242>
 8000f2e:	2080      	movs	r0, #128	; 0x80
 8000f30:	0240      	lsls	r0, r0, #9
 8000f32:	4684      	mov	ip, r0
 8000f34:	4461      	add	r1, ip
 8000f36:	0c18      	lsrs	r0, r3, #16
 8000f38:	0412      	lsls	r2, r2, #16
 8000f3a:	041b      	lsls	r3, r3, #16
 8000f3c:	0c12      	lsrs	r2, r2, #16
 8000f3e:	1841      	adds	r1, r0, r1
 8000f40:	189b      	adds	r3, r3, r2
 8000f42:	428e      	cmp	r6, r1
 8000f44:	d200      	bcs.n	8000f48 <__aeabi_ddiv+0x254>
 8000f46:	e0ff      	b.n	8001148 <__aeabi_ddiv+0x454>
 8000f48:	d100      	bne.n	8000f4c <__aeabi_ddiv+0x258>
 8000f4a:	e0fa      	b.n	8001142 <__aeabi_ddiv+0x44e>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	431d      	orrs	r5, r3
 8000f50:	4a49      	ldr	r2, [pc, #292]	; (8001078 <__aeabi_ddiv+0x384>)
 8000f52:	445a      	add	r2, fp
 8000f54:	2a00      	cmp	r2, #0
 8000f56:	dc00      	bgt.n	8000f5a <__aeabi_ddiv+0x266>
 8000f58:	e0aa      	b.n	80010b0 <__aeabi_ddiv+0x3bc>
 8000f5a:	076b      	lsls	r3, r5, #29
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_ddiv+0x26c>
 8000f5e:	e13d      	b.n	80011dc <__aeabi_ddiv+0x4e8>
 8000f60:	08ed      	lsrs	r5, r5, #3
 8000f62:	4643      	mov	r3, r8
 8000f64:	01db      	lsls	r3, r3, #7
 8000f66:	d506      	bpl.n	8000f76 <__aeabi_ddiv+0x282>
 8000f68:	4642      	mov	r2, r8
 8000f6a:	4b44      	ldr	r3, [pc, #272]	; (800107c <__aeabi_ddiv+0x388>)
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	4690      	mov	r8, r2
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	00d2      	lsls	r2, r2, #3
 8000f74:	445a      	add	r2, fp
 8000f76:	4b42      	ldr	r3, [pc, #264]	; (8001080 <__aeabi_ddiv+0x38c>)
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dd00      	ble.n	8000f7e <__aeabi_ddiv+0x28a>
 8000f7c:	e71f      	b.n	8000dbe <__aeabi_ddiv+0xca>
 8000f7e:	4643      	mov	r3, r8
 8000f80:	075b      	lsls	r3, r3, #29
 8000f82:	431d      	orrs	r5, r3
 8000f84:	4643      	mov	r3, r8
 8000f86:	0552      	lsls	r2, r2, #21
 8000f88:	025c      	lsls	r4, r3, #9
 8000f8a:	0b24      	lsrs	r4, r4, #12
 8000f8c:	0d53      	lsrs	r3, r2, #21
 8000f8e:	e708      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8000f90:	4652      	mov	r2, sl
 8000f92:	4322      	orrs	r2, r4
 8000f94:	d100      	bne.n	8000f98 <__aeabi_ddiv+0x2a4>
 8000f96:	e07b      	b.n	8001090 <__aeabi_ddiv+0x39c>
 8000f98:	2c00      	cmp	r4, #0
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_ddiv+0x2aa>
 8000f9c:	e0fa      	b.n	8001194 <__aeabi_ddiv+0x4a0>
 8000f9e:	0020      	movs	r0, r4
 8000fa0:	f001 f952 	bl	8002248 <__clzsi2>
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	3a0b      	subs	r2, #11
 8000fa8:	231d      	movs	r3, #29
 8000faa:	0001      	movs	r1, r0
 8000fac:	1a9b      	subs	r3, r3, r2
 8000fae:	4652      	mov	r2, sl
 8000fb0:	3908      	subs	r1, #8
 8000fb2:	40da      	lsrs	r2, r3
 8000fb4:	408c      	lsls	r4, r1
 8000fb6:	4314      	orrs	r4, r2
 8000fb8:	4652      	mov	r2, sl
 8000fba:	408a      	lsls	r2, r1
 8000fbc:	4b31      	ldr	r3, [pc, #196]	; (8001084 <__aeabi_ddiv+0x390>)
 8000fbe:	4458      	add	r0, fp
 8000fc0:	469b      	mov	fp, r3
 8000fc2:	4483      	add	fp, r0
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	e6d5      	b.n	8000d74 <__aeabi_ddiv+0x80>
 8000fc8:	464b      	mov	r3, r9
 8000fca:	4323      	orrs	r3, r4
 8000fcc:	4698      	mov	r8, r3
 8000fce:	d044      	beq.n	800105a <__aeabi_ddiv+0x366>
 8000fd0:	2c00      	cmp	r4, #0
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_ddiv+0x2e2>
 8000fd4:	e0ce      	b.n	8001174 <__aeabi_ddiv+0x480>
 8000fd6:	0020      	movs	r0, r4
 8000fd8:	f001 f936 	bl	8002248 <__clzsi2>
 8000fdc:	0001      	movs	r1, r0
 8000fde:	0002      	movs	r2, r0
 8000fe0:	390b      	subs	r1, #11
 8000fe2:	231d      	movs	r3, #29
 8000fe4:	1a5b      	subs	r3, r3, r1
 8000fe6:	4649      	mov	r1, r9
 8000fe8:	0010      	movs	r0, r2
 8000fea:	40d9      	lsrs	r1, r3
 8000fec:	3808      	subs	r0, #8
 8000fee:	4084      	lsls	r4, r0
 8000ff0:	000b      	movs	r3, r1
 8000ff2:	464d      	mov	r5, r9
 8000ff4:	4323      	orrs	r3, r4
 8000ff6:	4698      	mov	r8, r3
 8000ff8:	4085      	lsls	r5, r0
 8000ffa:	4823      	ldr	r0, [pc, #140]	; (8001088 <__aeabi_ddiv+0x394>)
 8000ffc:	1a83      	subs	r3, r0, r2
 8000ffe:	469b      	mov	fp, r3
 8001000:	2300      	movs	r3, #0
 8001002:	4699      	mov	r9, r3
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	e69a      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 8001008:	464b      	mov	r3, r9
 800100a:	4323      	orrs	r3, r4
 800100c:	4698      	mov	r8, r3
 800100e:	d11d      	bne.n	800104c <__aeabi_ddiv+0x358>
 8001010:	2308      	movs	r3, #8
 8001012:	4699      	mov	r9, r3
 8001014:	3b06      	subs	r3, #6
 8001016:	2500      	movs	r5, #0
 8001018:	4683      	mov	fp, r0
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	e68f      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 800101e:	4652      	mov	r2, sl
 8001020:	4322      	orrs	r2, r4
 8001022:	d109      	bne.n	8001038 <__aeabi_ddiv+0x344>
 8001024:	2302      	movs	r3, #2
 8001026:	4649      	mov	r1, r9
 8001028:	4319      	orrs	r1, r3
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <__aeabi_ddiv+0x398>)
 800102c:	4689      	mov	r9, r1
 800102e:	469c      	mov	ip, r3
 8001030:	2400      	movs	r4, #0
 8001032:	2002      	movs	r0, #2
 8001034:	44e3      	add	fp, ip
 8001036:	e69d      	b.n	8000d74 <__aeabi_ddiv+0x80>
 8001038:	2303      	movs	r3, #3
 800103a:	464a      	mov	r2, r9
 800103c:	431a      	orrs	r2, r3
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <__aeabi_ddiv+0x398>)
 8001040:	4691      	mov	r9, r2
 8001042:	469c      	mov	ip, r3
 8001044:	4652      	mov	r2, sl
 8001046:	2003      	movs	r0, #3
 8001048:	44e3      	add	fp, ip
 800104a:	e693      	b.n	8000d74 <__aeabi_ddiv+0x80>
 800104c:	230c      	movs	r3, #12
 800104e:	4699      	mov	r9, r3
 8001050:	3b09      	subs	r3, #9
 8001052:	46a0      	mov	r8, r4
 8001054:	4683      	mov	fp, r0
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	e671      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 800105a:	2304      	movs	r3, #4
 800105c:	4699      	mov	r9, r3
 800105e:	2300      	movs	r3, #0
 8001060:	469b      	mov	fp, r3
 8001062:	3301      	adds	r3, #1
 8001064:	2500      	movs	r5, #0
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	e669      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	000007ff 	.word	0x000007ff
 8001070:	fffffc01 	.word	0xfffffc01
 8001074:	0800a0a0 	.word	0x0800a0a0
 8001078:	000003ff 	.word	0x000003ff
 800107c:	feffffff 	.word	0xfeffffff
 8001080:	000007fe 	.word	0x000007fe
 8001084:	000003f3 	.word	0x000003f3
 8001088:	fffffc0d 	.word	0xfffffc0d
 800108c:	fffff801 	.word	0xfffff801
 8001090:	4649      	mov	r1, r9
 8001092:	2301      	movs	r3, #1
 8001094:	4319      	orrs	r1, r3
 8001096:	4689      	mov	r9, r1
 8001098:	2400      	movs	r4, #0
 800109a:	2001      	movs	r0, #1
 800109c:	e66a      	b.n	8000d74 <__aeabi_ddiv+0x80>
 800109e:	2300      	movs	r3, #0
 80010a0:	2480      	movs	r4, #128	; 0x80
 80010a2:	469a      	mov	sl, r3
 80010a4:	2500      	movs	r5, #0
 80010a6:	4b8a      	ldr	r3, [pc, #552]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 80010a8:	0324      	lsls	r4, r4, #12
 80010aa:	e67a      	b.n	8000da2 <__aeabi_ddiv+0xae>
 80010ac:	2501      	movs	r5, #1
 80010ae:	426d      	negs	r5, r5
 80010b0:	2301      	movs	r3, #1
 80010b2:	1a9b      	subs	r3, r3, r2
 80010b4:	2b38      	cmp	r3, #56	; 0x38
 80010b6:	dd00      	ble.n	80010ba <__aeabi_ddiv+0x3c6>
 80010b8:	e670      	b.n	8000d9c <__aeabi_ddiv+0xa8>
 80010ba:	2b1f      	cmp	r3, #31
 80010bc:	dc00      	bgt.n	80010c0 <__aeabi_ddiv+0x3cc>
 80010be:	e0bf      	b.n	8001240 <__aeabi_ddiv+0x54c>
 80010c0:	211f      	movs	r1, #31
 80010c2:	4249      	negs	r1, r1
 80010c4:	1a8a      	subs	r2, r1, r2
 80010c6:	4641      	mov	r1, r8
 80010c8:	40d1      	lsrs	r1, r2
 80010ca:	000a      	movs	r2, r1
 80010cc:	2b20      	cmp	r3, #32
 80010ce:	d004      	beq.n	80010da <__aeabi_ddiv+0x3e6>
 80010d0:	4641      	mov	r1, r8
 80010d2:	4b80      	ldr	r3, [pc, #512]	; (80012d4 <__aeabi_ddiv+0x5e0>)
 80010d4:	445b      	add	r3, fp
 80010d6:	4099      	lsls	r1, r3
 80010d8:	430d      	orrs	r5, r1
 80010da:	1e6b      	subs	r3, r5, #1
 80010dc:	419d      	sbcs	r5, r3
 80010de:	2307      	movs	r3, #7
 80010e0:	432a      	orrs	r2, r5
 80010e2:	001d      	movs	r5, r3
 80010e4:	2400      	movs	r4, #0
 80010e6:	4015      	ands	r5, r2
 80010e8:	4213      	tst	r3, r2
 80010ea:	d100      	bne.n	80010ee <__aeabi_ddiv+0x3fa>
 80010ec:	e0d4      	b.n	8001298 <__aeabi_ddiv+0x5a4>
 80010ee:	210f      	movs	r1, #15
 80010f0:	2300      	movs	r3, #0
 80010f2:	4011      	ands	r1, r2
 80010f4:	2904      	cmp	r1, #4
 80010f6:	d100      	bne.n	80010fa <__aeabi_ddiv+0x406>
 80010f8:	e0cb      	b.n	8001292 <__aeabi_ddiv+0x59e>
 80010fa:	1d11      	adds	r1, r2, #4
 80010fc:	4291      	cmp	r1, r2
 80010fe:	4192      	sbcs	r2, r2
 8001100:	4252      	negs	r2, r2
 8001102:	189b      	adds	r3, r3, r2
 8001104:	000a      	movs	r2, r1
 8001106:	0219      	lsls	r1, r3, #8
 8001108:	d400      	bmi.n	800110c <__aeabi_ddiv+0x418>
 800110a:	e0c2      	b.n	8001292 <__aeabi_ddiv+0x59e>
 800110c:	2301      	movs	r3, #1
 800110e:	2400      	movs	r4, #0
 8001110:	2500      	movs	r5, #0
 8001112:	e646      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	4641      	mov	r1, r8
 8001118:	031b      	lsls	r3, r3, #12
 800111a:	4219      	tst	r1, r3
 800111c:	d008      	beq.n	8001130 <__aeabi_ddiv+0x43c>
 800111e:	421c      	tst	r4, r3
 8001120:	d106      	bne.n	8001130 <__aeabi_ddiv+0x43c>
 8001122:	431c      	orrs	r4, r3
 8001124:	0324      	lsls	r4, r4, #12
 8001126:	46ba      	mov	sl, r7
 8001128:	0015      	movs	r5, r2
 800112a:	4b69      	ldr	r3, [pc, #420]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 800112c:	0b24      	lsrs	r4, r4, #12
 800112e:	e638      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8001130:	2480      	movs	r4, #128	; 0x80
 8001132:	4643      	mov	r3, r8
 8001134:	0324      	lsls	r4, r4, #12
 8001136:	431c      	orrs	r4, r3
 8001138:	0324      	lsls	r4, r4, #12
 800113a:	46b2      	mov	sl, r6
 800113c:	4b64      	ldr	r3, [pc, #400]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 800113e:	0b24      	lsrs	r4, r4, #12
 8001140:	e62f      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8001142:	2b00      	cmp	r3, #0
 8001144:	d100      	bne.n	8001148 <__aeabi_ddiv+0x454>
 8001146:	e703      	b.n	8000f50 <__aeabi_ddiv+0x25c>
 8001148:	19a6      	adds	r6, r4, r6
 800114a:	1e68      	subs	r0, r5, #1
 800114c:	42a6      	cmp	r6, r4
 800114e:	d200      	bcs.n	8001152 <__aeabi_ddiv+0x45e>
 8001150:	e08d      	b.n	800126e <__aeabi_ddiv+0x57a>
 8001152:	428e      	cmp	r6, r1
 8001154:	d200      	bcs.n	8001158 <__aeabi_ddiv+0x464>
 8001156:	e0a3      	b.n	80012a0 <__aeabi_ddiv+0x5ac>
 8001158:	d100      	bne.n	800115c <__aeabi_ddiv+0x468>
 800115a:	e0b3      	b.n	80012c4 <__aeabi_ddiv+0x5d0>
 800115c:	0005      	movs	r5, r0
 800115e:	e6f5      	b.n	8000f4c <__aeabi_ddiv+0x258>
 8001160:	42aa      	cmp	r2, r5
 8001162:	d900      	bls.n	8001166 <__aeabi_ddiv+0x472>
 8001164:	e639      	b.n	8000dda <__aeabi_ddiv+0xe6>
 8001166:	4643      	mov	r3, r8
 8001168:	07de      	lsls	r6, r3, #31
 800116a:	0858      	lsrs	r0, r3, #1
 800116c:	086b      	lsrs	r3, r5, #1
 800116e:	431e      	orrs	r6, r3
 8001170:	07ed      	lsls	r5, r5, #31
 8001172:	e639      	b.n	8000de8 <__aeabi_ddiv+0xf4>
 8001174:	4648      	mov	r0, r9
 8001176:	f001 f867 	bl	8002248 <__clzsi2>
 800117a:	0001      	movs	r1, r0
 800117c:	0002      	movs	r2, r0
 800117e:	3115      	adds	r1, #21
 8001180:	3220      	adds	r2, #32
 8001182:	291c      	cmp	r1, #28
 8001184:	dc00      	bgt.n	8001188 <__aeabi_ddiv+0x494>
 8001186:	e72c      	b.n	8000fe2 <__aeabi_ddiv+0x2ee>
 8001188:	464b      	mov	r3, r9
 800118a:	3808      	subs	r0, #8
 800118c:	4083      	lsls	r3, r0
 800118e:	2500      	movs	r5, #0
 8001190:	4698      	mov	r8, r3
 8001192:	e732      	b.n	8000ffa <__aeabi_ddiv+0x306>
 8001194:	f001 f858 	bl	8002248 <__clzsi2>
 8001198:	0003      	movs	r3, r0
 800119a:	001a      	movs	r2, r3
 800119c:	3215      	adds	r2, #21
 800119e:	3020      	adds	r0, #32
 80011a0:	2a1c      	cmp	r2, #28
 80011a2:	dc00      	bgt.n	80011a6 <__aeabi_ddiv+0x4b2>
 80011a4:	e700      	b.n	8000fa8 <__aeabi_ddiv+0x2b4>
 80011a6:	4654      	mov	r4, sl
 80011a8:	3b08      	subs	r3, #8
 80011aa:	2200      	movs	r2, #0
 80011ac:	409c      	lsls	r4, r3
 80011ae:	e705      	b.n	8000fbc <__aeabi_ddiv+0x2c8>
 80011b0:	1936      	adds	r6, r6, r4
 80011b2:	3b01      	subs	r3, #1
 80011b4:	42b4      	cmp	r4, r6
 80011b6:	d900      	bls.n	80011ba <__aeabi_ddiv+0x4c6>
 80011b8:	e6a6      	b.n	8000f08 <__aeabi_ddiv+0x214>
 80011ba:	42b2      	cmp	r2, r6
 80011bc:	d800      	bhi.n	80011c0 <__aeabi_ddiv+0x4cc>
 80011be:	e6a3      	b.n	8000f08 <__aeabi_ddiv+0x214>
 80011c0:	1e83      	subs	r3, r0, #2
 80011c2:	1936      	adds	r6, r6, r4
 80011c4:	e6a0      	b.n	8000f08 <__aeabi_ddiv+0x214>
 80011c6:	1909      	adds	r1, r1, r4
 80011c8:	3d01      	subs	r5, #1
 80011ca:	428c      	cmp	r4, r1
 80011cc:	d900      	bls.n	80011d0 <__aeabi_ddiv+0x4dc>
 80011ce:	e68d      	b.n	8000eec <__aeabi_ddiv+0x1f8>
 80011d0:	428a      	cmp	r2, r1
 80011d2:	d800      	bhi.n	80011d6 <__aeabi_ddiv+0x4e2>
 80011d4:	e68a      	b.n	8000eec <__aeabi_ddiv+0x1f8>
 80011d6:	1e85      	subs	r5, r0, #2
 80011d8:	1909      	adds	r1, r1, r4
 80011da:	e687      	b.n	8000eec <__aeabi_ddiv+0x1f8>
 80011dc:	230f      	movs	r3, #15
 80011de:	402b      	ands	r3, r5
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d100      	bne.n	80011e6 <__aeabi_ddiv+0x4f2>
 80011e4:	e6bc      	b.n	8000f60 <__aeabi_ddiv+0x26c>
 80011e6:	2305      	movs	r3, #5
 80011e8:	425b      	negs	r3, r3
 80011ea:	42ab      	cmp	r3, r5
 80011ec:	419b      	sbcs	r3, r3
 80011ee:	3504      	adds	r5, #4
 80011f0:	425b      	negs	r3, r3
 80011f2:	08ed      	lsrs	r5, r5, #3
 80011f4:	4498      	add	r8, r3
 80011f6:	e6b4      	b.n	8000f62 <__aeabi_ddiv+0x26e>
 80011f8:	42af      	cmp	r7, r5
 80011fa:	d900      	bls.n	80011fe <__aeabi_ddiv+0x50a>
 80011fc:	e660      	b.n	8000ec0 <__aeabi_ddiv+0x1cc>
 80011fe:	4282      	cmp	r2, r0
 8001200:	d804      	bhi.n	800120c <__aeabi_ddiv+0x518>
 8001202:	d000      	beq.n	8001206 <__aeabi_ddiv+0x512>
 8001204:	e65c      	b.n	8000ec0 <__aeabi_ddiv+0x1cc>
 8001206:	42ae      	cmp	r6, r5
 8001208:	d800      	bhi.n	800120c <__aeabi_ddiv+0x518>
 800120a:	e659      	b.n	8000ec0 <__aeabi_ddiv+0x1cc>
 800120c:	2302      	movs	r3, #2
 800120e:	425b      	negs	r3, r3
 8001210:	469c      	mov	ip, r3
 8001212:	9b00      	ldr	r3, [sp, #0]
 8001214:	44e0      	add	r8, ip
 8001216:	469c      	mov	ip, r3
 8001218:	4465      	add	r5, ip
 800121a:	429d      	cmp	r5, r3
 800121c:	419b      	sbcs	r3, r3
 800121e:	425b      	negs	r3, r3
 8001220:	191b      	adds	r3, r3, r4
 8001222:	18c0      	adds	r0, r0, r3
 8001224:	e64d      	b.n	8000ec2 <__aeabi_ddiv+0x1ce>
 8001226:	428a      	cmp	r2, r1
 8001228:	d800      	bhi.n	800122c <__aeabi_ddiv+0x538>
 800122a:	e60e      	b.n	8000e4a <__aeabi_ddiv+0x156>
 800122c:	1e83      	subs	r3, r0, #2
 800122e:	1909      	adds	r1, r1, r4
 8001230:	e60b      	b.n	8000e4a <__aeabi_ddiv+0x156>
 8001232:	428a      	cmp	r2, r1
 8001234:	d800      	bhi.n	8001238 <__aeabi_ddiv+0x544>
 8001236:	e5f4      	b.n	8000e22 <__aeabi_ddiv+0x12e>
 8001238:	1e83      	subs	r3, r0, #2
 800123a:	4698      	mov	r8, r3
 800123c:	1909      	adds	r1, r1, r4
 800123e:	e5f0      	b.n	8000e22 <__aeabi_ddiv+0x12e>
 8001240:	4925      	ldr	r1, [pc, #148]	; (80012d8 <__aeabi_ddiv+0x5e4>)
 8001242:	0028      	movs	r0, r5
 8001244:	4459      	add	r1, fp
 8001246:	408d      	lsls	r5, r1
 8001248:	4642      	mov	r2, r8
 800124a:	408a      	lsls	r2, r1
 800124c:	1e69      	subs	r1, r5, #1
 800124e:	418d      	sbcs	r5, r1
 8001250:	4641      	mov	r1, r8
 8001252:	40d8      	lsrs	r0, r3
 8001254:	40d9      	lsrs	r1, r3
 8001256:	4302      	orrs	r2, r0
 8001258:	432a      	orrs	r2, r5
 800125a:	000b      	movs	r3, r1
 800125c:	0751      	lsls	r1, r2, #29
 800125e:	d100      	bne.n	8001262 <__aeabi_ddiv+0x56e>
 8001260:	e751      	b.n	8001106 <__aeabi_ddiv+0x412>
 8001262:	210f      	movs	r1, #15
 8001264:	4011      	ands	r1, r2
 8001266:	2904      	cmp	r1, #4
 8001268:	d000      	beq.n	800126c <__aeabi_ddiv+0x578>
 800126a:	e746      	b.n	80010fa <__aeabi_ddiv+0x406>
 800126c:	e74b      	b.n	8001106 <__aeabi_ddiv+0x412>
 800126e:	0005      	movs	r5, r0
 8001270:	428e      	cmp	r6, r1
 8001272:	d000      	beq.n	8001276 <__aeabi_ddiv+0x582>
 8001274:	e66a      	b.n	8000f4c <__aeabi_ddiv+0x258>
 8001276:	9a00      	ldr	r2, [sp, #0]
 8001278:	4293      	cmp	r3, r2
 800127a:	d000      	beq.n	800127e <__aeabi_ddiv+0x58a>
 800127c:	e666      	b.n	8000f4c <__aeabi_ddiv+0x258>
 800127e:	e667      	b.n	8000f50 <__aeabi_ddiv+0x25c>
 8001280:	4a16      	ldr	r2, [pc, #88]	; (80012dc <__aeabi_ddiv+0x5e8>)
 8001282:	445a      	add	r2, fp
 8001284:	2a00      	cmp	r2, #0
 8001286:	dc00      	bgt.n	800128a <__aeabi_ddiv+0x596>
 8001288:	e710      	b.n	80010ac <__aeabi_ddiv+0x3b8>
 800128a:	2301      	movs	r3, #1
 800128c:	2500      	movs	r5, #0
 800128e:	4498      	add	r8, r3
 8001290:	e667      	b.n	8000f62 <__aeabi_ddiv+0x26e>
 8001292:	075d      	lsls	r5, r3, #29
 8001294:	025b      	lsls	r3, r3, #9
 8001296:	0b1c      	lsrs	r4, r3, #12
 8001298:	08d2      	lsrs	r2, r2, #3
 800129a:	2300      	movs	r3, #0
 800129c:	4315      	orrs	r5, r2
 800129e:	e580      	b.n	8000da2 <__aeabi_ddiv+0xae>
 80012a0:	9800      	ldr	r0, [sp, #0]
 80012a2:	3d02      	subs	r5, #2
 80012a4:	0042      	lsls	r2, r0, #1
 80012a6:	4282      	cmp	r2, r0
 80012a8:	41bf      	sbcs	r7, r7
 80012aa:	427f      	negs	r7, r7
 80012ac:	193c      	adds	r4, r7, r4
 80012ae:	1936      	adds	r6, r6, r4
 80012b0:	9200      	str	r2, [sp, #0]
 80012b2:	e7dd      	b.n	8001270 <__aeabi_ddiv+0x57c>
 80012b4:	2480      	movs	r4, #128	; 0x80
 80012b6:	4643      	mov	r3, r8
 80012b8:	0324      	lsls	r4, r4, #12
 80012ba:	431c      	orrs	r4, r3
 80012bc:	0324      	lsls	r4, r4, #12
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 80012c0:	0b24      	lsrs	r4, r4, #12
 80012c2:	e56e      	b.n	8000da2 <__aeabi_ddiv+0xae>
 80012c4:	9a00      	ldr	r2, [sp, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d3ea      	bcc.n	80012a0 <__aeabi_ddiv+0x5ac>
 80012ca:	0005      	movs	r5, r0
 80012cc:	e7d3      	b.n	8001276 <__aeabi_ddiv+0x582>
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	000007ff 	.word	0x000007ff
 80012d4:	0000043e 	.word	0x0000043e
 80012d8:	0000041e 	.word	0x0000041e
 80012dc:	000003ff 	.word	0x000003ff

080012e0 <__eqdf2>:
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	464e      	mov	r6, r9
 80012e4:	4645      	mov	r5, r8
 80012e6:	46de      	mov	lr, fp
 80012e8:	4657      	mov	r7, sl
 80012ea:	4690      	mov	r8, r2
 80012ec:	b5e0      	push	{r5, r6, r7, lr}
 80012ee:	0017      	movs	r7, r2
 80012f0:	031a      	lsls	r2, r3, #12
 80012f2:	0b12      	lsrs	r2, r2, #12
 80012f4:	0005      	movs	r5, r0
 80012f6:	4684      	mov	ip, r0
 80012f8:	4819      	ldr	r0, [pc, #100]	; (8001360 <__eqdf2+0x80>)
 80012fa:	030e      	lsls	r6, r1, #12
 80012fc:	004c      	lsls	r4, r1, #1
 80012fe:	4691      	mov	r9, r2
 8001300:	005a      	lsls	r2, r3, #1
 8001302:	0fdb      	lsrs	r3, r3, #31
 8001304:	469b      	mov	fp, r3
 8001306:	0b36      	lsrs	r6, r6, #12
 8001308:	0d64      	lsrs	r4, r4, #21
 800130a:	0fc9      	lsrs	r1, r1, #31
 800130c:	0d52      	lsrs	r2, r2, #21
 800130e:	4284      	cmp	r4, r0
 8001310:	d019      	beq.n	8001346 <__eqdf2+0x66>
 8001312:	4282      	cmp	r2, r0
 8001314:	d010      	beq.n	8001338 <__eqdf2+0x58>
 8001316:	2001      	movs	r0, #1
 8001318:	4294      	cmp	r4, r2
 800131a:	d10e      	bne.n	800133a <__eqdf2+0x5a>
 800131c:	454e      	cmp	r6, r9
 800131e:	d10c      	bne.n	800133a <__eqdf2+0x5a>
 8001320:	2001      	movs	r0, #1
 8001322:	45c4      	cmp	ip, r8
 8001324:	d109      	bne.n	800133a <__eqdf2+0x5a>
 8001326:	4559      	cmp	r1, fp
 8001328:	d017      	beq.n	800135a <__eqdf2+0x7a>
 800132a:	2c00      	cmp	r4, #0
 800132c:	d105      	bne.n	800133a <__eqdf2+0x5a>
 800132e:	0030      	movs	r0, r6
 8001330:	4328      	orrs	r0, r5
 8001332:	1e43      	subs	r3, r0, #1
 8001334:	4198      	sbcs	r0, r3
 8001336:	e000      	b.n	800133a <__eqdf2+0x5a>
 8001338:	2001      	movs	r0, #1
 800133a:	bcf0      	pop	{r4, r5, r6, r7}
 800133c:	46bb      	mov	fp, r7
 800133e:	46b2      	mov	sl, r6
 8001340:	46a9      	mov	r9, r5
 8001342:	46a0      	mov	r8, r4
 8001344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001346:	0033      	movs	r3, r6
 8001348:	2001      	movs	r0, #1
 800134a:	432b      	orrs	r3, r5
 800134c:	d1f5      	bne.n	800133a <__eqdf2+0x5a>
 800134e:	42a2      	cmp	r2, r4
 8001350:	d1f3      	bne.n	800133a <__eqdf2+0x5a>
 8001352:	464b      	mov	r3, r9
 8001354:	433b      	orrs	r3, r7
 8001356:	d1f0      	bne.n	800133a <__eqdf2+0x5a>
 8001358:	e7e2      	b.n	8001320 <__eqdf2+0x40>
 800135a:	2000      	movs	r0, #0
 800135c:	e7ed      	b.n	800133a <__eqdf2+0x5a>
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	000007ff 	.word	0x000007ff

08001364 <__gedf2>:
 8001364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001366:	4647      	mov	r7, r8
 8001368:	46ce      	mov	lr, r9
 800136a:	0004      	movs	r4, r0
 800136c:	0018      	movs	r0, r3
 800136e:	0016      	movs	r6, r2
 8001370:	031b      	lsls	r3, r3, #12
 8001372:	0b1b      	lsrs	r3, r3, #12
 8001374:	4d2d      	ldr	r5, [pc, #180]	; (800142c <__gedf2+0xc8>)
 8001376:	004a      	lsls	r2, r1, #1
 8001378:	4699      	mov	r9, r3
 800137a:	b580      	push	{r7, lr}
 800137c:	0043      	lsls	r3, r0, #1
 800137e:	030f      	lsls	r7, r1, #12
 8001380:	46a4      	mov	ip, r4
 8001382:	46b0      	mov	r8, r6
 8001384:	0b3f      	lsrs	r7, r7, #12
 8001386:	0d52      	lsrs	r2, r2, #21
 8001388:	0fc9      	lsrs	r1, r1, #31
 800138a:	0d5b      	lsrs	r3, r3, #21
 800138c:	0fc0      	lsrs	r0, r0, #31
 800138e:	42aa      	cmp	r2, r5
 8001390:	d021      	beq.n	80013d6 <__gedf2+0x72>
 8001392:	42ab      	cmp	r3, r5
 8001394:	d013      	beq.n	80013be <__gedf2+0x5a>
 8001396:	2a00      	cmp	r2, #0
 8001398:	d122      	bne.n	80013e0 <__gedf2+0x7c>
 800139a:	433c      	orrs	r4, r7
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <__gedf2+0x42>
 80013a0:	464d      	mov	r5, r9
 80013a2:	432e      	orrs	r6, r5
 80013a4:	d022      	beq.n	80013ec <__gedf2+0x88>
 80013a6:	2c00      	cmp	r4, #0
 80013a8:	d010      	beq.n	80013cc <__gedf2+0x68>
 80013aa:	4281      	cmp	r1, r0
 80013ac:	d022      	beq.n	80013f4 <__gedf2+0x90>
 80013ae:	2002      	movs	r0, #2
 80013b0:	3901      	subs	r1, #1
 80013b2:	4008      	ands	r0, r1
 80013b4:	3801      	subs	r0, #1
 80013b6:	bcc0      	pop	{r6, r7}
 80013b8:	46b9      	mov	r9, r7
 80013ba:	46b0      	mov	r8, r6
 80013bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013be:	464d      	mov	r5, r9
 80013c0:	432e      	orrs	r6, r5
 80013c2:	d129      	bne.n	8001418 <__gedf2+0xb4>
 80013c4:	2a00      	cmp	r2, #0
 80013c6:	d1f0      	bne.n	80013aa <__gedf2+0x46>
 80013c8:	433c      	orrs	r4, r7
 80013ca:	d1ee      	bne.n	80013aa <__gedf2+0x46>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d1f2      	bne.n	80013b6 <__gedf2+0x52>
 80013d0:	2001      	movs	r0, #1
 80013d2:	4240      	negs	r0, r0
 80013d4:	e7ef      	b.n	80013b6 <__gedf2+0x52>
 80013d6:	003d      	movs	r5, r7
 80013d8:	4325      	orrs	r5, r4
 80013da:	d11d      	bne.n	8001418 <__gedf2+0xb4>
 80013dc:	4293      	cmp	r3, r2
 80013de:	d0ee      	beq.n	80013be <__gedf2+0x5a>
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1e2      	bne.n	80013aa <__gedf2+0x46>
 80013e4:	464c      	mov	r4, r9
 80013e6:	4326      	orrs	r6, r4
 80013e8:	d1df      	bne.n	80013aa <__gedf2+0x46>
 80013ea:	e7e0      	b.n	80013ae <__gedf2+0x4a>
 80013ec:	2000      	movs	r0, #0
 80013ee:	2c00      	cmp	r4, #0
 80013f0:	d0e1      	beq.n	80013b6 <__gedf2+0x52>
 80013f2:	e7dc      	b.n	80013ae <__gedf2+0x4a>
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dc0a      	bgt.n	800140e <__gedf2+0xaa>
 80013f8:	dbe8      	blt.n	80013cc <__gedf2+0x68>
 80013fa:	454f      	cmp	r7, r9
 80013fc:	d8d7      	bhi.n	80013ae <__gedf2+0x4a>
 80013fe:	d00e      	beq.n	800141e <__gedf2+0xba>
 8001400:	2000      	movs	r0, #0
 8001402:	454f      	cmp	r7, r9
 8001404:	d2d7      	bcs.n	80013b6 <__gedf2+0x52>
 8001406:	2900      	cmp	r1, #0
 8001408:	d0e2      	beq.n	80013d0 <__gedf2+0x6c>
 800140a:	0008      	movs	r0, r1
 800140c:	e7d3      	b.n	80013b6 <__gedf2+0x52>
 800140e:	4243      	negs	r3, r0
 8001410:	4158      	adcs	r0, r3
 8001412:	0040      	lsls	r0, r0, #1
 8001414:	3801      	subs	r0, #1
 8001416:	e7ce      	b.n	80013b6 <__gedf2+0x52>
 8001418:	2002      	movs	r0, #2
 800141a:	4240      	negs	r0, r0
 800141c:	e7cb      	b.n	80013b6 <__gedf2+0x52>
 800141e:	45c4      	cmp	ip, r8
 8001420:	d8c5      	bhi.n	80013ae <__gedf2+0x4a>
 8001422:	2000      	movs	r0, #0
 8001424:	45c4      	cmp	ip, r8
 8001426:	d2c6      	bcs.n	80013b6 <__gedf2+0x52>
 8001428:	e7ed      	b.n	8001406 <__gedf2+0xa2>
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	000007ff 	.word	0x000007ff

08001430 <__ledf2>:
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	4647      	mov	r7, r8
 8001434:	46ce      	mov	lr, r9
 8001436:	0004      	movs	r4, r0
 8001438:	0018      	movs	r0, r3
 800143a:	0016      	movs	r6, r2
 800143c:	031b      	lsls	r3, r3, #12
 800143e:	0b1b      	lsrs	r3, r3, #12
 8001440:	4d2c      	ldr	r5, [pc, #176]	; (80014f4 <__ledf2+0xc4>)
 8001442:	004a      	lsls	r2, r1, #1
 8001444:	4699      	mov	r9, r3
 8001446:	b580      	push	{r7, lr}
 8001448:	0043      	lsls	r3, r0, #1
 800144a:	030f      	lsls	r7, r1, #12
 800144c:	46a4      	mov	ip, r4
 800144e:	46b0      	mov	r8, r6
 8001450:	0b3f      	lsrs	r7, r7, #12
 8001452:	0d52      	lsrs	r2, r2, #21
 8001454:	0fc9      	lsrs	r1, r1, #31
 8001456:	0d5b      	lsrs	r3, r3, #21
 8001458:	0fc0      	lsrs	r0, r0, #31
 800145a:	42aa      	cmp	r2, r5
 800145c:	d00d      	beq.n	800147a <__ledf2+0x4a>
 800145e:	42ab      	cmp	r3, r5
 8001460:	d010      	beq.n	8001484 <__ledf2+0x54>
 8001462:	2a00      	cmp	r2, #0
 8001464:	d127      	bne.n	80014b6 <__ledf2+0x86>
 8001466:	433c      	orrs	r4, r7
 8001468:	2b00      	cmp	r3, #0
 800146a:	d111      	bne.n	8001490 <__ledf2+0x60>
 800146c:	464d      	mov	r5, r9
 800146e:	432e      	orrs	r6, r5
 8001470:	d10e      	bne.n	8001490 <__ledf2+0x60>
 8001472:	2000      	movs	r0, #0
 8001474:	2c00      	cmp	r4, #0
 8001476:	d015      	beq.n	80014a4 <__ledf2+0x74>
 8001478:	e00e      	b.n	8001498 <__ledf2+0x68>
 800147a:	003d      	movs	r5, r7
 800147c:	4325      	orrs	r5, r4
 800147e:	d110      	bne.n	80014a2 <__ledf2+0x72>
 8001480:	4293      	cmp	r3, r2
 8001482:	d118      	bne.n	80014b6 <__ledf2+0x86>
 8001484:	464d      	mov	r5, r9
 8001486:	432e      	orrs	r6, r5
 8001488:	d10b      	bne.n	80014a2 <__ledf2+0x72>
 800148a:	2a00      	cmp	r2, #0
 800148c:	d102      	bne.n	8001494 <__ledf2+0x64>
 800148e:	433c      	orrs	r4, r7
 8001490:	2c00      	cmp	r4, #0
 8001492:	d00b      	beq.n	80014ac <__ledf2+0x7c>
 8001494:	4281      	cmp	r1, r0
 8001496:	d014      	beq.n	80014c2 <__ledf2+0x92>
 8001498:	2002      	movs	r0, #2
 800149a:	3901      	subs	r1, #1
 800149c:	4008      	ands	r0, r1
 800149e:	3801      	subs	r0, #1
 80014a0:	e000      	b.n	80014a4 <__ledf2+0x74>
 80014a2:	2002      	movs	r0, #2
 80014a4:	bcc0      	pop	{r6, r7}
 80014a6:	46b9      	mov	r9, r7
 80014a8:	46b0      	mov	r8, r6
 80014aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ac:	2800      	cmp	r0, #0
 80014ae:	d1f9      	bne.n	80014a4 <__ledf2+0x74>
 80014b0:	2001      	movs	r0, #1
 80014b2:	4240      	negs	r0, r0
 80014b4:	e7f6      	b.n	80014a4 <__ledf2+0x74>
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1ec      	bne.n	8001494 <__ledf2+0x64>
 80014ba:	464c      	mov	r4, r9
 80014bc:	4326      	orrs	r6, r4
 80014be:	d1e9      	bne.n	8001494 <__ledf2+0x64>
 80014c0:	e7ea      	b.n	8001498 <__ledf2+0x68>
 80014c2:	429a      	cmp	r2, r3
 80014c4:	dd04      	ble.n	80014d0 <__ledf2+0xa0>
 80014c6:	4243      	negs	r3, r0
 80014c8:	4158      	adcs	r0, r3
 80014ca:	0040      	lsls	r0, r0, #1
 80014cc:	3801      	subs	r0, #1
 80014ce:	e7e9      	b.n	80014a4 <__ledf2+0x74>
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbeb      	blt.n	80014ac <__ledf2+0x7c>
 80014d4:	454f      	cmp	r7, r9
 80014d6:	d8df      	bhi.n	8001498 <__ledf2+0x68>
 80014d8:	d006      	beq.n	80014e8 <__ledf2+0xb8>
 80014da:	2000      	movs	r0, #0
 80014dc:	454f      	cmp	r7, r9
 80014de:	d2e1      	bcs.n	80014a4 <__ledf2+0x74>
 80014e0:	2900      	cmp	r1, #0
 80014e2:	d0e5      	beq.n	80014b0 <__ledf2+0x80>
 80014e4:	0008      	movs	r0, r1
 80014e6:	e7dd      	b.n	80014a4 <__ledf2+0x74>
 80014e8:	45c4      	cmp	ip, r8
 80014ea:	d8d5      	bhi.n	8001498 <__ledf2+0x68>
 80014ec:	2000      	movs	r0, #0
 80014ee:	45c4      	cmp	ip, r8
 80014f0:	d2d8      	bcs.n	80014a4 <__ledf2+0x74>
 80014f2:	e7f5      	b.n	80014e0 <__ledf2+0xb0>
 80014f4:	000007ff 	.word	0x000007ff

080014f8 <__aeabi_dmul>:
 80014f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fa:	4657      	mov	r7, sl
 80014fc:	464e      	mov	r6, r9
 80014fe:	4645      	mov	r5, r8
 8001500:	46de      	mov	lr, fp
 8001502:	b5e0      	push	{r5, r6, r7, lr}
 8001504:	4698      	mov	r8, r3
 8001506:	030c      	lsls	r4, r1, #12
 8001508:	004b      	lsls	r3, r1, #1
 800150a:	0006      	movs	r6, r0
 800150c:	4692      	mov	sl, r2
 800150e:	b087      	sub	sp, #28
 8001510:	0b24      	lsrs	r4, r4, #12
 8001512:	0d5b      	lsrs	r3, r3, #21
 8001514:	0fcf      	lsrs	r7, r1, #31
 8001516:	2b00      	cmp	r3, #0
 8001518:	d100      	bne.n	800151c <__aeabi_dmul+0x24>
 800151a:	e15c      	b.n	80017d6 <__aeabi_dmul+0x2de>
 800151c:	4ad9      	ldr	r2, [pc, #868]	; (8001884 <__aeabi_dmul+0x38c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d100      	bne.n	8001524 <__aeabi_dmul+0x2c>
 8001522:	e175      	b.n	8001810 <__aeabi_dmul+0x318>
 8001524:	0f42      	lsrs	r2, r0, #29
 8001526:	00e4      	lsls	r4, r4, #3
 8001528:	4314      	orrs	r4, r2
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	0412      	lsls	r2, r2, #16
 800152e:	4314      	orrs	r4, r2
 8001530:	4ad5      	ldr	r2, [pc, #852]	; (8001888 <__aeabi_dmul+0x390>)
 8001532:	00c5      	lsls	r5, r0, #3
 8001534:	4694      	mov	ip, r2
 8001536:	4463      	add	r3, ip
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2300      	movs	r3, #0
 800153c:	4699      	mov	r9, r3
 800153e:	469b      	mov	fp, r3
 8001540:	4643      	mov	r3, r8
 8001542:	4642      	mov	r2, r8
 8001544:	031e      	lsls	r6, r3, #12
 8001546:	0fd2      	lsrs	r2, r2, #31
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4650      	mov	r0, sl
 800154c:	4690      	mov	r8, r2
 800154e:	0b36      	lsrs	r6, r6, #12
 8001550:	0d5b      	lsrs	r3, r3, #21
 8001552:	d100      	bne.n	8001556 <__aeabi_dmul+0x5e>
 8001554:	e120      	b.n	8001798 <__aeabi_dmul+0x2a0>
 8001556:	4acb      	ldr	r2, [pc, #812]	; (8001884 <__aeabi_dmul+0x38c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d100      	bne.n	800155e <__aeabi_dmul+0x66>
 800155c:	e162      	b.n	8001824 <__aeabi_dmul+0x32c>
 800155e:	49ca      	ldr	r1, [pc, #808]	; (8001888 <__aeabi_dmul+0x390>)
 8001560:	0f42      	lsrs	r2, r0, #29
 8001562:	468c      	mov	ip, r1
 8001564:	9900      	ldr	r1, [sp, #0]
 8001566:	4463      	add	r3, ip
 8001568:	00f6      	lsls	r6, r6, #3
 800156a:	468c      	mov	ip, r1
 800156c:	4316      	orrs	r6, r2
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	449c      	add	ip, r3
 8001572:	0412      	lsls	r2, r2, #16
 8001574:	4663      	mov	r3, ip
 8001576:	4316      	orrs	r6, r2
 8001578:	00c2      	lsls	r2, r0, #3
 800157a:	2000      	movs	r0, #0
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	9900      	ldr	r1, [sp, #0]
 8001580:	4643      	mov	r3, r8
 8001582:	3101      	adds	r1, #1
 8001584:	468c      	mov	ip, r1
 8001586:	4649      	mov	r1, r9
 8001588:	407b      	eors	r3, r7
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	290f      	cmp	r1, #15
 800158e:	d826      	bhi.n	80015de <__aeabi_dmul+0xe6>
 8001590:	4bbe      	ldr	r3, [pc, #760]	; (800188c <__aeabi_dmul+0x394>)
 8001592:	0089      	lsls	r1, r1, #2
 8001594:	5859      	ldr	r1, [r3, r1]
 8001596:	468f      	mov	pc, r1
 8001598:	4643      	mov	r3, r8
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	0034      	movs	r4, r6
 800159e:	0015      	movs	r5, r2
 80015a0:	4683      	mov	fp, r0
 80015a2:	465b      	mov	r3, fp
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d016      	beq.n	80015d6 <__aeabi_dmul+0xde>
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d100      	bne.n	80015ae <__aeabi_dmul+0xb6>
 80015ac:	e203      	b.n	80019b6 <__aeabi_dmul+0x4be>
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d000      	beq.n	80015b4 <__aeabi_dmul+0xbc>
 80015b2:	e0cd      	b.n	8001750 <__aeabi_dmul+0x258>
 80015b4:	2200      	movs	r2, #0
 80015b6:	2400      	movs	r4, #0
 80015b8:	2500      	movs	r5, #0
 80015ba:	9b01      	ldr	r3, [sp, #4]
 80015bc:	0512      	lsls	r2, r2, #20
 80015be:	4322      	orrs	r2, r4
 80015c0:	07db      	lsls	r3, r3, #31
 80015c2:	431a      	orrs	r2, r3
 80015c4:	0028      	movs	r0, r5
 80015c6:	0011      	movs	r1, r2
 80015c8:	b007      	add	sp, #28
 80015ca:	bcf0      	pop	{r4, r5, r6, r7}
 80015cc:	46bb      	mov	fp, r7
 80015ce:	46b2      	mov	sl, r6
 80015d0:	46a9      	mov	r9, r5
 80015d2:	46a0      	mov	r8, r4
 80015d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d6:	2400      	movs	r4, #0
 80015d8:	2500      	movs	r5, #0
 80015da:	4aaa      	ldr	r2, [pc, #680]	; (8001884 <__aeabi_dmul+0x38c>)
 80015dc:	e7ed      	b.n	80015ba <__aeabi_dmul+0xc2>
 80015de:	0c28      	lsrs	r0, r5, #16
 80015e0:	042d      	lsls	r5, r5, #16
 80015e2:	0c2d      	lsrs	r5, r5, #16
 80015e4:	002b      	movs	r3, r5
 80015e6:	0c11      	lsrs	r1, r2, #16
 80015e8:	0412      	lsls	r2, r2, #16
 80015ea:	0c12      	lsrs	r2, r2, #16
 80015ec:	4353      	muls	r3, r2
 80015ee:	4698      	mov	r8, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	002f      	movs	r7, r5
 80015f4:	4343      	muls	r3, r0
 80015f6:	4699      	mov	r9, r3
 80015f8:	434f      	muls	r7, r1
 80015fa:	444f      	add	r7, r9
 80015fc:	46bb      	mov	fp, r7
 80015fe:	4647      	mov	r7, r8
 8001600:	000b      	movs	r3, r1
 8001602:	0c3f      	lsrs	r7, r7, #16
 8001604:	46ba      	mov	sl, r7
 8001606:	4343      	muls	r3, r0
 8001608:	44da      	add	sl, fp
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	45d1      	cmp	r9, sl
 800160e:	d904      	bls.n	800161a <__aeabi_dmul+0x122>
 8001610:	2780      	movs	r7, #128	; 0x80
 8001612:	027f      	lsls	r7, r7, #9
 8001614:	46b9      	mov	r9, r7
 8001616:	444b      	add	r3, r9
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	4653      	mov	r3, sl
 800161c:	0c1b      	lsrs	r3, r3, #16
 800161e:	469b      	mov	fp, r3
 8001620:	4653      	mov	r3, sl
 8001622:	041f      	lsls	r7, r3, #16
 8001624:	4643      	mov	r3, r8
 8001626:	041b      	lsls	r3, r3, #16
 8001628:	0c1b      	lsrs	r3, r3, #16
 800162a:	4698      	mov	r8, r3
 800162c:	003b      	movs	r3, r7
 800162e:	4443      	add	r3, r8
 8001630:	9304      	str	r3, [sp, #16]
 8001632:	0c33      	lsrs	r3, r6, #16
 8001634:	0436      	lsls	r6, r6, #16
 8001636:	0c36      	lsrs	r6, r6, #16
 8001638:	4698      	mov	r8, r3
 800163a:	0033      	movs	r3, r6
 800163c:	4343      	muls	r3, r0
 800163e:	4699      	mov	r9, r3
 8001640:	4643      	mov	r3, r8
 8001642:	4343      	muls	r3, r0
 8001644:	002f      	movs	r7, r5
 8001646:	469a      	mov	sl, r3
 8001648:	4643      	mov	r3, r8
 800164a:	4377      	muls	r7, r6
 800164c:	435d      	muls	r5, r3
 800164e:	0c38      	lsrs	r0, r7, #16
 8001650:	444d      	add	r5, r9
 8001652:	1945      	adds	r5, r0, r5
 8001654:	45a9      	cmp	r9, r5
 8001656:	d903      	bls.n	8001660 <__aeabi_dmul+0x168>
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	025b      	lsls	r3, r3, #9
 800165c:	4699      	mov	r9, r3
 800165e:	44ca      	add	sl, r9
 8001660:	043f      	lsls	r7, r7, #16
 8001662:	0c28      	lsrs	r0, r5, #16
 8001664:	0c3f      	lsrs	r7, r7, #16
 8001666:	042d      	lsls	r5, r5, #16
 8001668:	19ed      	adds	r5, r5, r7
 800166a:	0c27      	lsrs	r7, r4, #16
 800166c:	0424      	lsls	r4, r4, #16
 800166e:	0c24      	lsrs	r4, r4, #16
 8001670:	0003      	movs	r3, r0
 8001672:	0020      	movs	r0, r4
 8001674:	4350      	muls	r0, r2
 8001676:	437a      	muls	r2, r7
 8001678:	4691      	mov	r9, r2
 800167a:	003a      	movs	r2, r7
 800167c:	4453      	add	r3, sl
 800167e:	9305      	str	r3, [sp, #20]
 8001680:	0c03      	lsrs	r3, r0, #16
 8001682:	469a      	mov	sl, r3
 8001684:	434a      	muls	r2, r1
 8001686:	4361      	muls	r1, r4
 8001688:	4449      	add	r1, r9
 800168a:	4451      	add	r1, sl
 800168c:	44ab      	add	fp, r5
 800168e:	4589      	cmp	r9, r1
 8001690:	d903      	bls.n	800169a <__aeabi_dmul+0x1a2>
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	025b      	lsls	r3, r3, #9
 8001696:	4699      	mov	r9, r3
 8001698:	444a      	add	r2, r9
 800169a:	0400      	lsls	r0, r0, #16
 800169c:	0c0b      	lsrs	r3, r1, #16
 800169e:	0c00      	lsrs	r0, r0, #16
 80016a0:	0409      	lsls	r1, r1, #16
 80016a2:	1809      	adds	r1, r1, r0
 80016a4:	0020      	movs	r0, r4
 80016a6:	4699      	mov	r9, r3
 80016a8:	4643      	mov	r3, r8
 80016aa:	4370      	muls	r0, r6
 80016ac:	435c      	muls	r4, r3
 80016ae:	437e      	muls	r6, r7
 80016b0:	435f      	muls	r7, r3
 80016b2:	0c03      	lsrs	r3, r0, #16
 80016b4:	4698      	mov	r8, r3
 80016b6:	19a4      	adds	r4, r4, r6
 80016b8:	4444      	add	r4, r8
 80016ba:	444a      	add	r2, r9
 80016bc:	9703      	str	r7, [sp, #12]
 80016be:	42a6      	cmp	r6, r4
 80016c0:	d904      	bls.n	80016cc <__aeabi_dmul+0x1d4>
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	025b      	lsls	r3, r3, #9
 80016c6:	4698      	mov	r8, r3
 80016c8:	4447      	add	r7, r8
 80016ca:	9703      	str	r7, [sp, #12]
 80016cc:	0423      	lsls	r3, r4, #16
 80016ce:	9e02      	ldr	r6, [sp, #8]
 80016d0:	469a      	mov	sl, r3
 80016d2:	9b05      	ldr	r3, [sp, #20]
 80016d4:	445e      	add	r6, fp
 80016d6:	4698      	mov	r8, r3
 80016d8:	42ae      	cmp	r6, r5
 80016da:	41ad      	sbcs	r5, r5
 80016dc:	1876      	adds	r6, r6, r1
 80016de:	428e      	cmp	r6, r1
 80016e0:	4189      	sbcs	r1, r1
 80016e2:	0400      	lsls	r0, r0, #16
 80016e4:	0c00      	lsrs	r0, r0, #16
 80016e6:	4450      	add	r0, sl
 80016e8:	4440      	add	r0, r8
 80016ea:	426d      	negs	r5, r5
 80016ec:	1947      	adds	r7, r0, r5
 80016ee:	46b8      	mov	r8, r7
 80016f0:	4693      	mov	fp, r2
 80016f2:	4249      	negs	r1, r1
 80016f4:	4689      	mov	r9, r1
 80016f6:	44c3      	add	fp, r8
 80016f8:	44d9      	add	r9, fp
 80016fa:	4298      	cmp	r0, r3
 80016fc:	4180      	sbcs	r0, r0
 80016fe:	45a8      	cmp	r8, r5
 8001700:	41ad      	sbcs	r5, r5
 8001702:	4593      	cmp	fp, r2
 8001704:	4192      	sbcs	r2, r2
 8001706:	4589      	cmp	r9, r1
 8001708:	4189      	sbcs	r1, r1
 800170a:	426d      	negs	r5, r5
 800170c:	4240      	negs	r0, r0
 800170e:	4328      	orrs	r0, r5
 8001710:	0c24      	lsrs	r4, r4, #16
 8001712:	4252      	negs	r2, r2
 8001714:	4249      	negs	r1, r1
 8001716:	430a      	orrs	r2, r1
 8001718:	9b03      	ldr	r3, [sp, #12]
 800171a:	1900      	adds	r0, r0, r4
 800171c:	1880      	adds	r0, r0, r2
 800171e:	18c7      	adds	r7, r0, r3
 8001720:	464b      	mov	r3, r9
 8001722:	0ddc      	lsrs	r4, r3, #23
 8001724:	9b04      	ldr	r3, [sp, #16]
 8001726:	0275      	lsls	r5, r6, #9
 8001728:	431d      	orrs	r5, r3
 800172a:	1e6a      	subs	r2, r5, #1
 800172c:	4195      	sbcs	r5, r2
 800172e:	464b      	mov	r3, r9
 8001730:	0df6      	lsrs	r6, r6, #23
 8001732:	027f      	lsls	r7, r7, #9
 8001734:	4335      	orrs	r5, r6
 8001736:	025a      	lsls	r2, r3, #9
 8001738:	433c      	orrs	r4, r7
 800173a:	4315      	orrs	r5, r2
 800173c:	01fb      	lsls	r3, r7, #7
 800173e:	d400      	bmi.n	8001742 <__aeabi_dmul+0x24a>
 8001740:	e11c      	b.n	800197c <__aeabi_dmul+0x484>
 8001742:	2101      	movs	r1, #1
 8001744:	086a      	lsrs	r2, r5, #1
 8001746:	400d      	ands	r5, r1
 8001748:	4315      	orrs	r5, r2
 800174a:	07e2      	lsls	r2, r4, #31
 800174c:	4315      	orrs	r5, r2
 800174e:	0864      	lsrs	r4, r4, #1
 8001750:	494f      	ldr	r1, [pc, #316]	; (8001890 <__aeabi_dmul+0x398>)
 8001752:	4461      	add	r1, ip
 8001754:	2900      	cmp	r1, #0
 8001756:	dc00      	bgt.n	800175a <__aeabi_dmul+0x262>
 8001758:	e0b0      	b.n	80018bc <__aeabi_dmul+0x3c4>
 800175a:	076b      	lsls	r3, r5, #29
 800175c:	d009      	beq.n	8001772 <__aeabi_dmul+0x27a>
 800175e:	220f      	movs	r2, #15
 8001760:	402a      	ands	r2, r5
 8001762:	2a04      	cmp	r2, #4
 8001764:	d005      	beq.n	8001772 <__aeabi_dmul+0x27a>
 8001766:	1d2a      	adds	r2, r5, #4
 8001768:	42aa      	cmp	r2, r5
 800176a:	41ad      	sbcs	r5, r5
 800176c:	426d      	negs	r5, r5
 800176e:	1964      	adds	r4, r4, r5
 8001770:	0015      	movs	r5, r2
 8001772:	01e3      	lsls	r3, r4, #7
 8001774:	d504      	bpl.n	8001780 <__aeabi_dmul+0x288>
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	4a46      	ldr	r2, [pc, #280]	; (8001894 <__aeabi_dmul+0x39c>)
 800177a:	00c9      	lsls	r1, r1, #3
 800177c:	4014      	ands	r4, r2
 800177e:	4461      	add	r1, ip
 8001780:	4a45      	ldr	r2, [pc, #276]	; (8001898 <__aeabi_dmul+0x3a0>)
 8001782:	4291      	cmp	r1, r2
 8001784:	dd00      	ble.n	8001788 <__aeabi_dmul+0x290>
 8001786:	e726      	b.n	80015d6 <__aeabi_dmul+0xde>
 8001788:	0762      	lsls	r2, r4, #29
 800178a:	08ed      	lsrs	r5, r5, #3
 800178c:	0264      	lsls	r4, r4, #9
 800178e:	0549      	lsls	r1, r1, #21
 8001790:	4315      	orrs	r5, r2
 8001792:	0b24      	lsrs	r4, r4, #12
 8001794:	0d4a      	lsrs	r2, r1, #21
 8001796:	e710      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001798:	4652      	mov	r2, sl
 800179a:	4332      	orrs	r2, r6
 800179c:	d100      	bne.n	80017a0 <__aeabi_dmul+0x2a8>
 800179e:	e07f      	b.n	80018a0 <__aeabi_dmul+0x3a8>
 80017a0:	2e00      	cmp	r6, #0
 80017a2:	d100      	bne.n	80017a6 <__aeabi_dmul+0x2ae>
 80017a4:	e0dc      	b.n	8001960 <__aeabi_dmul+0x468>
 80017a6:	0030      	movs	r0, r6
 80017a8:	f000 fd4e 	bl	8002248 <__clzsi2>
 80017ac:	0002      	movs	r2, r0
 80017ae:	3a0b      	subs	r2, #11
 80017b0:	231d      	movs	r3, #29
 80017b2:	0001      	movs	r1, r0
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	4652      	mov	r2, sl
 80017b8:	3908      	subs	r1, #8
 80017ba:	40da      	lsrs	r2, r3
 80017bc:	408e      	lsls	r6, r1
 80017be:	4316      	orrs	r6, r2
 80017c0:	4652      	mov	r2, sl
 80017c2:	408a      	lsls	r2, r1
 80017c4:	9b00      	ldr	r3, [sp, #0]
 80017c6:	4935      	ldr	r1, [pc, #212]	; (800189c <__aeabi_dmul+0x3a4>)
 80017c8:	1a18      	subs	r0, r3, r0
 80017ca:	0003      	movs	r3, r0
 80017cc:	468c      	mov	ip, r1
 80017ce:	4463      	add	r3, ip
 80017d0:	2000      	movs	r0, #0
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	e6d3      	b.n	800157e <__aeabi_dmul+0x86>
 80017d6:	0025      	movs	r5, r4
 80017d8:	4305      	orrs	r5, r0
 80017da:	d04a      	beq.n	8001872 <__aeabi_dmul+0x37a>
 80017dc:	2c00      	cmp	r4, #0
 80017de:	d100      	bne.n	80017e2 <__aeabi_dmul+0x2ea>
 80017e0:	e0b0      	b.n	8001944 <__aeabi_dmul+0x44c>
 80017e2:	0020      	movs	r0, r4
 80017e4:	f000 fd30 	bl	8002248 <__clzsi2>
 80017e8:	0001      	movs	r1, r0
 80017ea:	0002      	movs	r2, r0
 80017ec:	390b      	subs	r1, #11
 80017ee:	231d      	movs	r3, #29
 80017f0:	0010      	movs	r0, r2
 80017f2:	1a5b      	subs	r3, r3, r1
 80017f4:	0031      	movs	r1, r6
 80017f6:	0035      	movs	r5, r6
 80017f8:	3808      	subs	r0, #8
 80017fa:	4084      	lsls	r4, r0
 80017fc:	40d9      	lsrs	r1, r3
 80017fe:	4085      	lsls	r5, r0
 8001800:	430c      	orrs	r4, r1
 8001802:	4826      	ldr	r0, [pc, #152]	; (800189c <__aeabi_dmul+0x3a4>)
 8001804:	1a83      	subs	r3, r0, r2
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2300      	movs	r3, #0
 800180a:	4699      	mov	r9, r3
 800180c:	469b      	mov	fp, r3
 800180e:	e697      	b.n	8001540 <__aeabi_dmul+0x48>
 8001810:	0005      	movs	r5, r0
 8001812:	4325      	orrs	r5, r4
 8001814:	d126      	bne.n	8001864 <__aeabi_dmul+0x36c>
 8001816:	2208      	movs	r2, #8
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2302      	movs	r3, #2
 800181c:	2400      	movs	r4, #0
 800181e:	4691      	mov	r9, r2
 8001820:	469b      	mov	fp, r3
 8001822:	e68d      	b.n	8001540 <__aeabi_dmul+0x48>
 8001824:	4652      	mov	r2, sl
 8001826:	9b00      	ldr	r3, [sp, #0]
 8001828:	4332      	orrs	r2, r6
 800182a:	d110      	bne.n	800184e <__aeabi_dmul+0x356>
 800182c:	4915      	ldr	r1, [pc, #84]	; (8001884 <__aeabi_dmul+0x38c>)
 800182e:	2600      	movs	r6, #0
 8001830:	468c      	mov	ip, r1
 8001832:	4463      	add	r3, ip
 8001834:	4649      	mov	r1, r9
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2302      	movs	r3, #2
 800183a:	4319      	orrs	r1, r3
 800183c:	4689      	mov	r9, r1
 800183e:	2002      	movs	r0, #2
 8001840:	e69d      	b.n	800157e <__aeabi_dmul+0x86>
 8001842:	465b      	mov	r3, fp
 8001844:	9701      	str	r7, [sp, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d000      	beq.n	800184c <__aeabi_dmul+0x354>
 800184a:	e6ad      	b.n	80015a8 <__aeabi_dmul+0xb0>
 800184c:	e6c3      	b.n	80015d6 <__aeabi_dmul+0xde>
 800184e:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <__aeabi_dmul+0x38c>)
 8001850:	2003      	movs	r0, #3
 8001852:	4694      	mov	ip, r2
 8001854:	4463      	add	r3, ip
 8001856:	464a      	mov	r2, r9
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2303      	movs	r3, #3
 800185c:	431a      	orrs	r2, r3
 800185e:	4691      	mov	r9, r2
 8001860:	4652      	mov	r2, sl
 8001862:	e68c      	b.n	800157e <__aeabi_dmul+0x86>
 8001864:	220c      	movs	r2, #12
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2303      	movs	r3, #3
 800186a:	0005      	movs	r5, r0
 800186c:	4691      	mov	r9, r2
 800186e:	469b      	mov	fp, r3
 8001870:	e666      	b.n	8001540 <__aeabi_dmul+0x48>
 8001872:	2304      	movs	r3, #4
 8001874:	4699      	mov	r9, r3
 8001876:	2300      	movs	r3, #0
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	2400      	movs	r4, #0
 800187e:	469b      	mov	fp, r3
 8001880:	e65e      	b.n	8001540 <__aeabi_dmul+0x48>
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	000007ff 	.word	0x000007ff
 8001888:	fffffc01 	.word	0xfffffc01
 800188c:	0800a0e0 	.word	0x0800a0e0
 8001890:	000003ff 	.word	0x000003ff
 8001894:	feffffff 	.word	0xfeffffff
 8001898:	000007fe 	.word	0x000007fe
 800189c:	fffffc0d 	.word	0xfffffc0d
 80018a0:	4649      	mov	r1, r9
 80018a2:	2301      	movs	r3, #1
 80018a4:	4319      	orrs	r1, r3
 80018a6:	4689      	mov	r9, r1
 80018a8:	2600      	movs	r6, #0
 80018aa:	2001      	movs	r0, #1
 80018ac:	e667      	b.n	800157e <__aeabi_dmul+0x86>
 80018ae:	2300      	movs	r3, #0
 80018b0:	2480      	movs	r4, #128	; 0x80
 80018b2:	2500      	movs	r5, #0
 80018b4:	4a43      	ldr	r2, [pc, #268]	; (80019c4 <__aeabi_dmul+0x4cc>)
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	0324      	lsls	r4, r4, #12
 80018ba:	e67e      	b.n	80015ba <__aeabi_dmul+0xc2>
 80018bc:	2001      	movs	r0, #1
 80018be:	1a40      	subs	r0, r0, r1
 80018c0:	2838      	cmp	r0, #56	; 0x38
 80018c2:	dd00      	ble.n	80018c6 <__aeabi_dmul+0x3ce>
 80018c4:	e676      	b.n	80015b4 <__aeabi_dmul+0xbc>
 80018c6:	281f      	cmp	r0, #31
 80018c8:	dd5b      	ble.n	8001982 <__aeabi_dmul+0x48a>
 80018ca:	221f      	movs	r2, #31
 80018cc:	0023      	movs	r3, r4
 80018ce:	4252      	negs	r2, r2
 80018d0:	1a51      	subs	r1, r2, r1
 80018d2:	40cb      	lsrs	r3, r1
 80018d4:	0019      	movs	r1, r3
 80018d6:	2820      	cmp	r0, #32
 80018d8:	d003      	beq.n	80018e2 <__aeabi_dmul+0x3ea>
 80018da:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <__aeabi_dmul+0x4d0>)
 80018dc:	4462      	add	r2, ip
 80018de:	4094      	lsls	r4, r2
 80018e0:	4325      	orrs	r5, r4
 80018e2:	1e6a      	subs	r2, r5, #1
 80018e4:	4195      	sbcs	r5, r2
 80018e6:	002a      	movs	r2, r5
 80018e8:	430a      	orrs	r2, r1
 80018ea:	2107      	movs	r1, #7
 80018ec:	000d      	movs	r5, r1
 80018ee:	2400      	movs	r4, #0
 80018f0:	4015      	ands	r5, r2
 80018f2:	4211      	tst	r1, r2
 80018f4:	d05b      	beq.n	80019ae <__aeabi_dmul+0x4b6>
 80018f6:	210f      	movs	r1, #15
 80018f8:	2400      	movs	r4, #0
 80018fa:	4011      	ands	r1, r2
 80018fc:	2904      	cmp	r1, #4
 80018fe:	d053      	beq.n	80019a8 <__aeabi_dmul+0x4b0>
 8001900:	1d11      	adds	r1, r2, #4
 8001902:	4291      	cmp	r1, r2
 8001904:	4192      	sbcs	r2, r2
 8001906:	4252      	negs	r2, r2
 8001908:	18a4      	adds	r4, r4, r2
 800190a:	000a      	movs	r2, r1
 800190c:	0223      	lsls	r3, r4, #8
 800190e:	d54b      	bpl.n	80019a8 <__aeabi_dmul+0x4b0>
 8001910:	2201      	movs	r2, #1
 8001912:	2400      	movs	r4, #0
 8001914:	2500      	movs	r5, #0
 8001916:	e650      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	031b      	lsls	r3, r3, #12
 800191c:	421c      	tst	r4, r3
 800191e:	d009      	beq.n	8001934 <__aeabi_dmul+0x43c>
 8001920:	421e      	tst	r6, r3
 8001922:	d107      	bne.n	8001934 <__aeabi_dmul+0x43c>
 8001924:	4333      	orrs	r3, r6
 8001926:	031c      	lsls	r4, r3, #12
 8001928:	4643      	mov	r3, r8
 800192a:	0015      	movs	r5, r2
 800192c:	0b24      	lsrs	r4, r4, #12
 800192e:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <__aeabi_dmul+0x4cc>)
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	e642      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	0312      	lsls	r2, r2, #12
 8001938:	4314      	orrs	r4, r2
 800193a:	0324      	lsls	r4, r4, #12
 800193c:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <__aeabi_dmul+0x4cc>)
 800193e:	0b24      	lsrs	r4, r4, #12
 8001940:	9701      	str	r7, [sp, #4]
 8001942:	e63a      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001944:	f000 fc80 	bl	8002248 <__clzsi2>
 8001948:	0001      	movs	r1, r0
 800194a:	0002      	movs	r2, r0
 800194c:	3115      	adds	r1, #21
 800194e:	3220      	adds	r2, #32
 8001950:	291c      	cmp	r1, #28
 8001952:	dc00      	bgt.n	8001956 <__aeabi_dmul+0x45e>
 8001954:	e74b      	b.n	80017ee <__aeabi_dmul+0x2f6>
 8001956:	0034      	movs	r4, r6
 8001958:	3808      	subs	r0, #8
 800195a:	2500      	movs	r5, #0
 800195c:	4084      	lsls	r4, r0
 800195e:	e750      	b.n	8001802 <__aeabi_dmul+0x30a>
 8001960:	f000 fc72 	bl	8002248 <__clzsi2>
 8001964:	0003      	movs	r3, r0
 8001966:	001a      	movs	r2, r3
 8001968:	3215      	adds	r2, #21
 800196a:	3020      	adds	r0, #32
 800196c:	2a1c      	cmp	r2, #28
 800196e:	dc00      	bgt.n	8001972 <__aeabi_dmul+0x47a>
 8001970:	e71e      	b.n	80017b0 <__aeabi_dmul+0x2b8>
 8001972:	4656      	mov	r6, sl
 8001974:	3b08      	subs	r3, #8
 8001976:	2200      	movs	r2, #0
 8001978:	409e      	lsls	r6, r3
 800197a:	e723      	b.n	80017c4 <__aeabi_dmul+0x2cc>
 800197c:	9b00      	ldr	r3, [sp, #0]
 800197e:	469c      	mov	ip, r3
 8001980:	e6e6      	b.n	8001750 <__aeabi_dmul+0x258>
 8001982:	4912      	ldr	r1, [pc, #72]	; (80019cc <__aeabi_dmul+0x4d4>)
 8001984:	0022      	movs	r2, r4
 8001986:	4461      	add	r1, ip
 8001988:	002e      	movs	r6, r5
 800198a:	408d      	lsls	r5, r1
 800198c:	408a      	lsls	r2, r1
 800198e:	40c6      	lsrs	r6, r0
 8001990:	1e69      	subs	r1, r5, #1
 8001992:	418d      	sbcs	r5, r1
 8001994:	4332      	orrs	r2, r6
 8001996:	432a      	orrs	r2, r5
 8001998:	40c4      	lsrs	r4, r0
 800199a:	0753      	lsls	r3, r2, #29
 800199c:	d0b6      	beq.n	800190c <__aeabi_dmul+0x414>
 800199e:	210f      	movs	r1, #15
 80019a0:	4011      	ands	r1, r2
 80019a2:	2904      	cmp	r1, #4
 80019a4:	d1ac      	bne.n	8001900 <__aeabi_dmul+0x408>
 80019a6:	e7b1      	b.n	800190c <__aeabi_dmul+0x414>
 80019a8:	0765      	lsls	r5, r4, #29
 80019aa:	0264      	lsls	r4, r4, #9
 80019ac:	0b24      	lsrs	r4, r4, #12
 80019ae:	08d2      	lsrs	r2, r2, #3
 80019b0:	4315      	orrs	r5, r2
 80019b2:	2200      	movs	r2, #0
 80019b4:	e601      	b.n	80015ba <__aeabi_dmul+0xc2>
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	0312      	lsls	r2, r2, #12
 80019ba:	4314      	orrs	r4, r2
 80019bc:	0324      	lsls	r4, r4, #12
 80019be:	4a01      	ldr	r2, [pc, #4]	; (80019c4 <__aeabi_dmul+0x4cc>)
 80019c0:	0b24      	lsrs	r4, r4, #12
 80019c2:	e5fa      	b.n	80015ba <__aeabi_dmul+0xc2>
 80019c4:	000007ff 	.word	0x000007ff
 80019c8:	0000043e 	.word	0x0000043e
 80019cc:	0000041e 	.word	0x0000041e

080019d0 <__aeabi_dsub>:
 80019d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d2:	4657      	mov	r7, sl
 80019d4:	464e      	mov	r6, r9
 80019d6:	4645      	mov	r5, r8
 80019d8:	46de      	mov	lr, fp
 80019da:	b5e0      	push	{r5, r6, r7, lr}
 80019dc:	001e      	movs	r6, r3
 80019de:	0017      	movs	r7, r2
 80019e0:	004a      	lsls	r2, r1, #1
 80019e2:	030b      	lsls	r3, r1, #12
 80019e4:	0d52      	lsrs	r2, r2, #21
 80019e6:	0a5b      	lsrs	r3, r3, #9
 80019e8:	4690      	mov	r8, r2
 80019ea:	0f42      	lsrs	r2, r0, #29
 80019ec:	431a      	orrs	r2, r3
 80019ee:	0fcd      	lsrs	r5, r1, #31
 80019f0:	4ccd      	ldr	r4, [pc, #820]	; (8001d28 <__aeabi_dsub+0x358>)
 80019f2:	0331      	lsls	r1, r6, #12
 80019f4:	00c3      	lsls	r3, r0, #3
 80019f6:	4694      	mov	ip, r2
 80019f8:	0070      	lsls	r0, r6, #1
 80019fa:	0f7a      	lsrs	r2, r7, #29
 80019fc:	0a49      	lsrs	r1, r1, #9
 80019fe:	00ff      	lsls	r7, r7, #3
 8001a00:	469a      	mov	sl, r3
 8001a02:	46b9      	mov	r9, r7
 8001a04:	0d40      	lsrs	r0, r0, #21
 8001a06:	0ff6      	lsrs	r6, r6, #31
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	42a0      	cmp	r0, r4
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x40>
 8001a0e:	e0b1      	b.n	8001b74 <__aeabi_dsub+0x1a4>
 8001a10:	2201      	movs	r2, #1
 8001a12:	4056      	eors	r6, r2
 8001a14:	46b3      	mov	fp, r6
 8001a16:	42b5      	cmp	r5, r6
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dsub+0x4c>
 8001a1a:	e088      	b.n	8001b2e <__aeabi_dsub+0x15e>
 8001a1c:	4642      	mov	r2, r8
 8001a1e:	1a12      	subs	r2, r2, r0
 8001a20:	2a00      	cmp	r2, #0
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dsub+0x56>
 8001a24:	e0ae      	b.n	8001b84 <__aeabi_dsub+0x1b4>
 8001a26:	2800      	cmp	r0, #0
 8001a28:	d100      	bne.n	8001a2c <__aeabi_dsub+0x5c>
 8001a2a:	e0c1      	b.n	8001bb0 <__aeabi_dsub+0x1e0>
 8001a2c:	48be      	ldr	r0, [pc, #760]	; (8001d28 <__aeabi_dsub+0x358>)
 8001a2e:	4580      	cmp	r8, r0
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x64>
 8001a32:	e151      	b.n	8001cd8 <__aeabi_dsub+0x308>
 8001a34:	2080      	movs	r0, #128	; 0x80
 8001a36:	0400      	lsls	r0, r0, #16
 8001a38:	4301      	orrs	r1, r0
 8001a3a:	2a38      	cmp	r2, #56	; 0x38
 8001a3c:	dd00      	ble.n	8001a40 <__aeabi_dsub+0x70>
 8001a3e:	e17b      	b.n	8001d38 <__aeabi_dsub+0x368>
 8001a40:	2a1f      	cmp	r2, #31
 8001a42:	dd00      	ble.n	8001a46 <__aeabi_dsub+0x76>
 8001a44:	e1ee      	b.n	8001e24 <__aeabi_dsub+0x454>
 8001a46:	2020      	movs	r0, #32
 8001a48:	003e      	movs	r6, r7
 8001a4a:	1a80      	subs	r0, r0, r2
 8001a4c:	000c      	movs	r4, r1
 8001a4e:	40d6      	lsrs	r6, r2
 8001a50:	40d1      	lsrs	r1, r2
 8001a52:	4087      	lsls	r7, r0
 8001a54:	4662      	mov	r2, ip
 8001a56:	4084      	lsls	r4, r0
 8001a58:	1a52      	subs	r2, r2, r1
 8001a5a:	1e78      	subs	r0, r7, #1
 8001a5c:	4187      	sbcs	r7, r0
 8001a5e:	4694      	mov	ip, r2
 8001a60:	4334      	orrs	r4, r6
 8001a62:	4327      	orrs	r7, r4
 8001a64:	1bdc      	subs	r4, r3, r7
 8001a66:	42a3      	cmp	r3, r4
 8001a68:	419b      	sbcs	r3, r3
 8001a6a:	4662      	mov	r2, ip
 8001a6c:	425b      	negs	r3, r3
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	4699      	mov	r9, r3
 8001a72:	464b      	mov	r3, r9
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	d400      	bmi.n	8001a7a <__aeabi_dsub+0xaa>
 8001a78:	e118      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001a7a:	464b      	mov	r3, r9
 8001a7c:	0258      	lsls	r0, r3, #9
 8001a7e:	0a43      	lsrs	r3, r0, #9
 8001a80:	4699      	mov	r9, r3
 8001a82:	464b      	mov	r3, r9
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dsub+0xba>
 8001a88:	e137      	b.n	8001cfa <__aeabi_dsub+0x32a>
 8001a8a:	4648      	mov	r0, r9
 8001a8c:	f000 fbdc 	bl	8002248 <__clzsi2>
 8001a90:	0001      	movs	r1, r0
 8001a92:	3908      	subs	r1, #8
 8001a94:	2320      	movs	r3, #32
 8001a96:	0022      	movs	r2, r4
 8001a98:	4648      	mov	r0, r9
 8001a9a:	1a5b      	subs	r3, r3, r1
 8001a9c:	40da      	lsrs	r2, r3
 8001a9e:	4088      	lsls	r0, r1
 8001aa0:	408c      	lsls	r4, r1
 8001aa2:	4643      	mov	r3, r8
 8001aa4:	4310      	orrs	r0, r2
 8001aa6:	4588      	cmp	r8, r1
 8001aa8:	dd00      	ble.n	8001aac <__aeabi_dsub+0xdc>
 8001aaa:	e136      	b.n	8001d1a <__aeabi_dsub+0x34a>
 8001aac:	1ac9      	subs	r1, r1, r3
 8001aae:	1c4b      	adds	r3, r1, #1
 8001ab0:	2b1f      	cmp	r3, #31
 8001ab2:	dd00      	ble.n	8001ab6 <__aeabi_dsub+0xe6>
 8001ab4:	e0ea      	b.n	8001c8c <__aeabi_dsub+0x2bc>
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	0026      	movs	r6, r4
 8001aba:	1ad2      	subs	r2, r2, r3
 8001abc:	0001      	movs	r1, r0
 8001abe:	4094      	lsls	r4, r2
 8001ac0:	40de      	lsrs	r6, r3
 8001ac2:	40d8      	lsrs	r0, r3
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	4091      	lsls	r1, r2
 8001ac8:	1e62      	subs	r2, r4, #1
 8001aca:	4194      	sbcs	r4, r2
 8001acc:	4681      	mov	r9, r0
 8001ace:	4698      	mov	r8, r3
 8001ad0:	4331      	orrs	r1, r6
 8001ad2:	430c      	orrs	r4, r1
 8001ad4:	0763      	lsls	r3, r4, #29
 8001ad6:	d009      	beq.n	8001aec <__aeabi_dsub+0x11c>
 8001ad8:	230f      	movs	r3, #15
 8001ada:	4023      	ands	r3, r4
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d005      	beq.n	8001aec <__aeabi_dsub+0x11c>
 8001ae0:	1d23      	adds	r3, r4, #4
 8001ae2:	42a3      	cmp	r3, r4
 8001ae4:	41a4      	sbcs	r4, r4
 8001ae6:	4264      	negs	r4, r4
 8001ae8:	44a1      	add	r9, r4
 8001aea:	001c      	movs	r4, r3
 8001aec:	464b      	mov	r3, r9
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dsub+0x124>
 8001af2:	e0de      	b.n	8001cb2 <__aeabi_dsub+0x2e2>
 8001af4:	4641      	mov	r1, r8
 8001af6:	4b8c      	ldr	r3, [pc, #560]	; (8001d28 <__aeabi_dsub+0x358>)
 8001af8:	3101      	adds	r1, #1
 8001afa:	4299      	cmp	r1, r3
 8001afc:	d100      	bne.n	8001b00 <__aeabi_dsub+0x130>
 8001afe:	e0e7      	b.n	8001cd0 <__aeabi_dsub+0x300>
 8001b00:	464b      	mov	r3, r9
 8001b02:	488a      	ldr	r0, [pc, #552]	; (8001d2c <__aeabi_dsub+0x35c>)
 8001b04:	08e4      	lsrs	r4, r4, #3
 8001b06:	4003      	ands	r3, r0
 8001b08:	0018      	movs	r0, r3
 8001b0a:	0549      	lsls	r1, r1, #21
 8001b0c:	075b      	lsls	r3, r3, #29
 8001b0e:	0240      	lsls	r0, r0, #9
 8001b10:	4323      	orrs	r3, r4
 8001b12:	0d4a      	lsrs	r2, r1, #21
 8001b14:	0b04      	lsrs	r4, r0, #12
 8001b16:	0512      	lsls	r2, r2, #20
 8001b18:	07ed      	lsls	r5, r5, #31
 8001b1a:	4322      	orrs	r2, r4
 8001b1c:	432a      	orrs	r2, r5
 8001b1e:	0018      	movs	r0, r3
 8001b20:	0011      	movs	r1, r2
 8001b22:	bcf0      	pop	{r4, r5, r6, r7}
 8001b24:	46bb      	mov	fp, r7
 8001b26:	46b2      	mov	sl, r6
 8001b28:	46a9      	mov	r9, r5
 8001b2a:	46a0      	mov	r8, r4
 8001b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b2e:	4642      	mov	r2, r8
 8001b30:	1a12      	subs	r2, r2, r0
 8001b32:	2a00      	cmp	r2, #0
 8001b34:	dd52      	ble.n	8001bdc <__aeabi_dsub+0x20c>
 8001b36:	2800      	cmp	r0, #0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_dsub+0x16c>
 8001b3a:	e09c      	b.n	8001c76 <__aeabi_dsub+0x2a6>
 8001b3c:	45a0      	cmp	r8, r4
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x172>
 8001b40:	e0ca      	b.n	8001cd8 <__aeabi_dsub+0x308>
 8001b42:	2080      	movs	r0, #128	; 0x80
 8001b44:	0400      	lsls	r0, r0, #16
 8001b46:	4301      	orrs	r1, r0
 8001b48:	2a38      	cmp	r2, #56	; 0x38
 8001b4a:	dd00      	ble.n	8001b4e <__aeabi_dsub+0x17e>
 8001b4c:	e149      	b.n	8001de2 <__aeabi_dsub+0x412>
 8001b4e:	2a1f      	cmp	r2, #31
 8001b50:	dc00      	bgt.n	8001b54 <__aeabi_dsub+0x184>
 8001b52:	e197      	b.n	8001e84 <__aeabi_dsub+0x4b4>
 8001b54:	0010      	movs	r0, r2
 8001b56:	000e      	movs	r6, r1
 8001b58:	3820      	subs	r0, #32
 8001b5a:	40c6      	lsrs	r6, r0
 8001b5c:	2a20      	cmp	r2, #32
 8001b5e:	d004      	beq.n	8001b6a <__aeabi_dsub+0x19a>
 8001b60:	2040      	movs	r0, #64	; 0x40
 8001b62:	1a82      	subs	r2, r0, r2
 8001b64:	4091      	lsls	r1, r2
 8001b66:	430f      	orrs	r7, r1
 8001b68:	46b9      	mov	r9, r7
 8001b6a:	464c      	mov	r4, r9
 8001b6c:	1e62      	subs	r2, r4, #1
 8001b6e:	4194      	sbcs	r4, r2
 8001b70:	4334      	orrs	r4, r6
 8001b72:	e13a      	b.n	8001dea <__aeabi_dsub+0x41a>
 8001b74:	000a      	movs	r2, r1
 8001b76:	433a      	orrs	r2, r7
 8001b78:	d028      	beq.n	8001bcc <__aeabi_dsub+0x1fc>
 8001b7a:	46b3      	mov	fp, r6
 8001b7c:	42b5      	cmp	r5, r6
 8001b7e:	d02b      	beq.n	8001bd8 <__aeabi_dsub+0x208>
 8001b80:	4a6b      	ldr	r2, [pc, #428]	; (8001d30 <__aeabi_dsub+0x360>)
 8001b82:	4442      	add	r2, r8
 8001b84:	2a00      	cmp	r2, #0
 8001b86:	d05d      	beq.n	8001c44 <__aeabi_dsub+0x274>
 8001b88:	4642      	mov	r2, r8
 8001b8a:	4644      	mov	r4, r8
 8001b8c:	1a82      	subs	r2, r0, r2
 8001b8e:	2c00      	cmp	r4, #0
 8001b90:	d000      	beq.n	8001b94 <__aeabi_dsub+0x1c4>
 8001b92:	e0f5      	b.n	8001d80 <__aeabi_dsub+0x3b0>
 8001b94:	4665      	mov	r5, ip
 8001b96:	431d      	orrs	r5, r3
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x1cc>
 8001b9a:	e19c      	b.n	8001ed6 <__aeabi_dsub+0x506>
 8001b9c:	1e55      	subs	r5, r2, #1
 8001b9e:	2a01      	cmp	r2, #1
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x1d4>
 8001ba2:	e1fb      	b.n	8001f9c <__aeabi_dsub+0x5cc>
 8001ba4:	4c60      	ldr	r4, [pc, #384]	; (8001d28 <__aeabi_dsub+0x358>)
 8001ba6:	42a2      	cmp	r2, r4
 8001ba8:	d100      	bne.n	8001bac <__aeabi_dsub+0x1dc>
 8001baa:	e1bd      	b.n	8001f28 <__aeabi_dsub+0x558>
 8001bac:	002a      	movs	r2, r5
 8001bae:	e0f0      	b.n	8001d92 <__aeabi_dsub+0x3c2>
 8001bb0:	0008      	movs	r0, r1
 8001bb2:	4338      	orrs	r0, r7
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dsub+0x1e8>
 8001bb6:	e0c3      	b.n	8001d40 <__aeabi_dsub+0x370>
 8001bb8:	1e50      	subs	r0, r2, #1
 8001bba:	2a01      	cmp	r2, #1
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dsub+0x1f0>
 8001bbe:	e1a8      	b.n	8001f12 <__aeabi_dsub+0x542>
 8001bc0:	4c59      	ldr	r4, [pc, #356]	; (8001d28 <__aeabi_dsub+0x358>)
 8001bc2:	42a2      	cmp	r2, r4
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_dsub+0x1f8>
 8001bc6:	e087      	b.n	8001cd8 <__aeabi_dsub+0x308>
 8001bc8:	0002      	movs	r2, r0
 8001bca:	e736      	b.n	8001a3a <__aeabi_dsub+0x6a>
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4056      	eors	r6, r2
 8001bd0:	46b3      	mov	fp, r6
 8001bd2:	42b5      	cmp	r5, r6
 8001bd4:	d000      	beq.n	8001bd8 <__aeabi_dsub+0x208>
 8001bd6:	e721      	b.n	8001a1c <__aeabi_dsub+0x4c>
 8001bd8:	4a55      	ldr	r2, [pc, #340]	; (8001d30 <__aeabi_dsub+0x360>)
 8001bda:	4442      	add	r2, r8
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	d100      	bne.n	8001be2 <__aeabi_dsub+0x212>
 8001be0:	e0b5      	b.n	8001d4e <__aeabi_dsub+0x37e>
 8001be2:	4642      	mov	r2, r8
 8001be4:	4644      	mov	r4, r8
 8001be6:	1a82      	subs	r2, r0, r2
 8001be8:	2c00      	cmp	r4, #0
 8001bea:	d100      	bne.n	8001bee <__aeabi_dsub+0x21e>
 8001bec:	e138      	b.n	8001e60 <__aeabi_dsub+0x490>
 8001bee:	4e4e      	ldr	r6, [pc, #312]	; (8001d28 <__aeabi_dsub+0x358>)
 8001bf0:	42b0      	cmp	r0, r6
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x226>
 8001bf4:	e1de      	b.n	8001fb4 <__aeabi_dsub+0x5e4>
 8001bf6:	2680      	movs	r6, #128	; 0x80
 8001bf8:	4664      	mov	r4, ip
 8001bfa:	0436      	lsls	r6, r6, #16
 8001bfc:	4334      	orrs	r4, r6
 8001bfe:	46a4      	mov	ip, r4
 8001c00:	2a38      	cmp	r2, #56	; 0x38
 8001c02:	dd00      	ble.n	8001c06 <__aeabi_dsub+0x236>
 8001c04:	e196      	b.n	8001f34 <__aeabi_dsub+0x564>
 8001c06:	2a1f      	cmp	r2, #31
 8001c08:	dd00      	ble.n	8001c0c <__aeabi_dsub+0x23c>
 8001c0a:	e224      	b.n	8002056 <__aeabi_dsub+0x686>
 8001c0c:	2620      	movs	r6, #32
 8001c0e:	1ab4      	subs	r4, r6, r2
 8001c10:	46a2      	mov	sl, r4
 8001c12:	4664      	mov	r4, ip
 8001c14:	4656      	mov	r6, sl
 8001c16:	40b4      	lsls	r4, r6
 8001c18:	46a1      	mov	r9, r4
 8001c1a:	001c      	movs	r4, r3
 8001c1c:	464e      	mov	r6, r9
 8001c1e:	40d4      	lsrs	r4, r2
 8001c20:	4326      	orrs	r6, r4
 8001c22:	0034      	movs	r4, r6
 8001c24:	4656      	mov	r6, sl
 8001c26:	40b3      	lsls	r3, r6
 8001c28:	1e5e      	subs	r6, r3, #1
 8001c2a:	41b3      	sbcs	r3, r6
 8001c2c:	431c      	orrs	r4, r3
 8001c2e:	4663      	mov	r3, ip
 8001c30:	40d3      	lsrs	r3, r2
 8001c32:	18c9      	adds	r1, r1, r3
 8001c34:	19e4      	adds	r4, r4, r7
 8001c36:	42bc      	cmp	r4, r7
 8001c38:	41bf      	sbcs	r7, r7
 8001c3a:	427f      	negs	r7, r7
 8001c3c:	46b9      	mov	r9, r7
 8001c3e:	4680      	mov	r8, r0
 8001c40:	4489      	add	r9, r1
 8001c42:	e0d8      	b.n	8001df6 <__aeabi_dsub+0x426>
 8001c44:	4640      	mov	r0, r8
 8001c46:	4c3b      	ldr	r4, [pc, #236]	; (8001d34 <__aeabi_dsub+0x364>)
 8001c48:	3001      	adds	r0, #1
 8001c4a:	4220      	tst	r0, r4
 8001c4c:	d000      	beq.n	8001c50 <__aeabi_dsub+0x280>
 8001c4e:	e0b4      	b.n	8001dba <__aeabi_dsub+0x3ea>
 8001c50:	4640      	mov	r0, r8
 8001c52:	2800      	cmp	r0, #0
 8001c54:	d000      	beq.n	8001c58 <__aeabi_dsub+0x288>
 8001c56:	e144      	b.n	8001ee2 <__aeabi_dsub+0x512>
 8001c58:	4660      	mov	r0, ip
 8001c5a:	4318      	orrs	r0, r3
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x290>
 8001c5e:	e190      	b.n	8001f82 <__aeabi_dsub+0x5b2>
 8001c60:	0008      	movs	r0, r1
 8001c62:	4338      	orrs	r0, r7
 8001c64:	d000      	beq.n	8001c68 <__aeabi_dsub+0x298>
 8001c66:	e1aa      	b.n	8001fbe <__aeabi_dsub+0x5ee>
 8001c68:	4661      	mov	r1, ip
 8001c6a:	08db      	lsrs	r3, r3, #3
 8001c6c:	0749      	lsls	r1, r1, #29
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	4661      	mov	r1, ip
 8001c72:	08cc      	lsrs	r4, r1, #3
 8001c74:	e027      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001c76:	0008      	movs	r0, r1
 8001c78:	4338      	orrs	r0, r7
 8001c7a:	d061      	beq.n	8001d40 <__aeabi_dsub+0x370>
 8001c7c:	1e50      	subs	r0, r2, #1
 8001c7e:	2a01      	cmp	r2, #1
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x2b4>
 8001c82:	e139      	b.n	8001ef8 <__aeabi_dsub+0x528>
 8001c84:	42a2      	cmp	r2, r4
 8001c86:	d027      	beq.n	8001cd8 <__aeabi_dsub+0x308>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	e75d      	b.n	8001b48 <__aeabi_dsub+0x178>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	391f      	subs	r1, #31
 8001c90:	40ca      	lsrs	r2, r1
 8001c92:	0011      	movs	r1, r2
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	d003      	beq.n	8001ca0 <__aeabi_dsub+0x2d0>
 8001c98:	2240      	movs	r2, #64	; 0x40
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	4098      	lsls	r0, r3
 8001c9e:	4304      	orrs	r4, r0
 8001ca0:	1e63      	subs	r3, r4, #1
 8001ca2:	419c      	sbcs	r4, r3
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	4699      	mov	r9, r3
 8001ca8:	4698      	mov	r8, r3
 8001caa:	430c      	orrs	r4, r1
 8001cac:	0763      	lsls	r3, r4, #29
 8001cae:	d000      	beq.n	8001cb2 <__aeabi_dsub+0x2e2>
 8001cb0:	e712      	b.n	8001ad8 <__aeabi_dsub+0x108>
 8001cb2:	464b      	mov	r3, r9
 8001cb4:	464a      	mov	r2, r9
 8001cb6:	08e4      	lsrs	r4, r4, #3
 8001cb8:	075b      	lsls	r3, r3, #29
 8001cba:	4323      	orrs	r3, r4
 8001cbc:	08d4      	lsrs	r4, r2, #3
 8001cbe:	4642      	mov	r2, r8
 8001cc0:	4919      	ldr	r1, [pc, #100]	; (8001d28 <__aeabi_dsub+0x358>)
 8001cc2:	428a      	cmp	r2, r1
 8001cc4:	d00e      	beq.n	8001ce4 <__aeabi_dsub+0x314>
 8001cc6:	0324      	lsls	r4, r4, #12
 8001cc8:	0552      	lsls	r2, r2, #21
 8001cca:	0b24      	lsrs	r4, r4, #12
 8001ccc:	0d52      	lsrs	r2, r2, #21
 8001cce:	e722      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001cd0:	000a      	movs	r2, r1
 8001cd2:	2400      	movs	r4, #0
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e71e      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001cd8:	08db      	lsrs	r3, r3, #3
 8001cda:	4662      	mov	r2, ip
 8001cdc:	0752      	lsls	r2, r2, #29
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	4662      	mov	r2, ip
 8001ce2:	08d4      	lsrs	r4, r2, #3
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	4322      	orrs	r2, r4
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dsub+0x31c>
 8001cea:	e1fc      	b.n	80020e6 <__aeabi_dsub+0x716>
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	0312      	lsls	r2, r2, #12
 8001cf0:	4314      	orrs	r4, r2
 8001cf2:	0324      	lsls	r4, r4, #12
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <__aeabi_dsub+0x358>)
 8001cf6:	0b24      	lsrs	r4, r4, #12
 8001cf8:	e70d      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001cfa:	0020      	movs	r0, r4
 8001cfc:	f000 faa4 	bl	8002248 <__clzsi2>
 8001d00:	0001      	movs	r1, r0
 8001d02:	3118      	adds	r1, #24
 8001d04:	291f      	cmp	r1, #31
 8001d06:	dc00      	bgt.n	8001d0a <__aeabi_dsub+0x33a>
 8001d08:	e6c4      	b.n	8001a94 <__aeabi_dsub+0xc4>
 8001d0a:	3808      	subs	r0, #8
 8001d0c:	4084      	lsls	r4, r0
 8001d0e:	4643      	mov	r3, r8
 8001d10:	0020      	movs	r0, r4
 8001d12:	2400      	movs	r4, #0
 8001d14:	4588      	cmp	r8, r1
 8001d16:	dc00      	bgt.n	8001d1a <__aeabi_dsub+0x34a>
 8001d18:	e6c8      	b.n	8001aac <__aeabi_dsub+0xdc>
 8001d1a:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <__aeabi_dsub+0x35c>)
 8001d1c:	1a5b      	subs	r3, r3, r1
 8001d1e:	4010      	ands	r0, r2
 8001d20:	4698      	mov	r8, r3
 8001d22:	4681      	mov	r9, r0
 8001d24:	e6d6      	b.n	8001ad4 <__aeabi_dsub+0x104>
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	000007ff 	.word	0x000007ff
 8001d2c:	ff7fffff 	.word	0xff7fffff
 8001d30:	fffff801 	.word	0xfffff801
 8001d34:	000007fe 	.word	0x000007fe
 8001d38:	430f      	orrs	r7, r1
 8001d3a:	1e7a      	subs	r2, r7, #1
 8001d3c:	4197      	sbcs	r7, r2
 8001d3e:	e691      	b.n	8001a64 <__aeabi_dsub+0x94>
 8001d40:	4661      	mov	r1, ip
 8001d42:	08db      	lsrs	r3, r3, #3
 8001d44:	0749      	lsls	r1, r1, #29
 8001d46:	430b      	orrs	r3, r1
 8001d48:	4661      	mov	r1, ip
 8001d4a:	08cc      	lsrs	r4, r1, #3
 8001d4c:	e7b8      	b.n	8001cc0 <__aeabi_dsub+0x2f0>
 8001d4e:	4640      	mov	r0, r8
 8001d50:	4cd3      	ldr	r4, [pc, #844]	; (80020a0 <__aeabi_dsub+0x6d0>)
 8001d52:	3001      	adds	r0, #1
 8001d54:	4220      	tst	r0, r4
 8001d56:	d000      	beq.n	8001d5a <__aeabi_dsub+0x38a>
 8001d58:	e0a2      	b.n	8001ea0 <__aeabi_dsub+0x4d0>
 8001d5a:	4640      	mov	r0, r8
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	d000      	beq.n	8001d62 <__aeabi_dsub+0x392>
 8001d60:	e101      	b.n	8001f66 <__aeabi_dsub+0x596>
 8001d62:	4660      	mov	r0, ip
 8001d64:	4318      	orrs	r0, r3
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dsub+0x39a>
 8001d68:	e15e      	b.n	8002028 <__aeabi_dsub+0x658>
 8001d6a:	0008      	movs	r0, r1
 8001d6c:	4338      	orrs	r0, r7
 8001d6e:	d000      	beq.n	8001d72 <__aeabi_dsub+0x3a2>
 8001d70:	e15f      	b.n	8002032 <__aeabi_dsub+0x662>
 8001d72:	4661      	mov	r1, ip
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	0749      	lsls	r1, r1, #29
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	4661      	mov	r1, ip
 8001d7c:	08cc      	lsrs	r4, r1, #3
 8001d7e:	e7a2      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001d80:	4dc8      	ldr	r5, [pc, #800]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001d82:	42a8      	cmp	r0, r5
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dsub+0x3b8>
 8001d86:	e0cf      	b.n	8001f28 <__aeabi_dsub+0x558>
 8001d88:	2580      	movs	r5, #128	; 0x80
 8001d8a:	4664      	mov	r4, ip
 8001d8c:	042d      	lsls	r5, r5, #16
 8001d8e:	432c      	orrs	r4, r5
 8001d90:	46a4      	mov	ip, r4
 8001d92:	2a38      	cmp	r2, #56	; 0x38
 8001d94:	dc56      	bgt.n	8001e44 <__aeabi_dsub+0x474>
 8001d96:	2a1f      	cmp	r2, #31
 8001d98:	dd00      	ble.n	8001d9c <__aeabi_dsub+0x3cc>
 8001d9a:	e0d1      	b.n	8001f40 <__aeabi_dsub+0x570>
 8001d9c:	2520      	movs	r5, #32
 8001d9e:	001e      	movs	r6, r3
 8001da0:	1aad      	subs	r5, r5, r2
 8001da2:	4664      	mov	r4, ip
 8001da4:	40ab      	lsls	r3, r5
 8001da6:	40ac      	lsls	r4, r5
 8001da8:	40d6      	lsrs	r6, r2
 8001daa:	1e5d      	subs	r5, r3, #1
 8001dac:	41ab      	sbcs	r3, r5
 8001dae:	4334      	orrs	r4, r6
 8001db0:	4323      	orrs	r3, r4
 8001db2:	4664      	mov	r4, ip
 8001db4:	40d4      	lsrs	r4, r2
 8001db6:	1b09      	subs	r1, r1, r4
 8001db8:	e049      	b.n	8001e4e <__aeabi_dsub+0x47e>
 8001dba:	4660      	mov	r0, ip
 8001dbc:	1bdc      	subs	r4, r3, r7
 8001dbe:	1a46      	subs	r6, r0, r1
 8001dc0:	42a3      	cmp	r3, r4
 8001dc2:	4180      	sbcs	r0, r0
 8001dc4:	4240      	negs	r0, r0
 8001dc6:	4681      	mov	r9, r0
 8001dc8:	0030      	movs	r0, r6
 8001dca:	464e      	mov	r6, r9
 8001dcc:	1b80      	subs	r0, r0, r6
 8001dce:	4681      	mov	r9, r0
 8001dd0:	0200      	lsls	r0, r0, #8
 8001dd2:	d476      	bmi.n	8001ec2 <__aeabi_dsub+0x4f2>
 8001dd4:	464b      	mov	r3, r9
 8001dd6:	4323      	orrs	r3, r4
 8001dd8:	d000      	beq.n	8001ddc <__aeabi_dsub+0x40c>
 8001dda:	e652      	b.n	8001a82 <__aeabi_dsub+0xb2>
 8001ddc:	2400      	movs	r4, #0
 8001dde:	2500      	movs	r5, #0
 8001de0:	e771      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001de2:	4339      	orrs	r1, r7
 8001de4:	000c      	movs	r4, r1
 8001de6:	1e62      	subs	r2, r4, #1
 8001de8:	4194      	sbcs	r4, r2
 8001dea:	18e4      	adds	r4, r4, r3
 8001dec:	429c      	cmp	r4, r3
 8001dee:	419b      	sbcs	r3, r3
 8001df0:	425b      	negs	r3, r3
 8001df2:	4463      	add	r3, ip
 8001df4:	4699      	mov	r9, r3
 8001df6:	464b      	mov	r3, r9
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	d400      	bmi.n	8001dfe <__aeabi_dsub+0x42e>
 8001dfc:	e756      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	469c      	mov	ip, r3
 8001e02:	4ba8      	ldr	r3, [pc, #672]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001e04:	44e0      	add	r8, ip
 8001e06:	4598      	cmp	r8, r3
 8001e08:	d038      	beq.n	8001e7c <__aeabi_dsub+0x4ac>
 8001e0a:	464b      	mov	r3, r9
 8001e0c:	48a6      	ldr	r0, [pc, #664]	; (80020a8 <__aeabi_dsub+0x6d8>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4003      	ands	r3, r0
 8001e12:	0018      	movs	r0, r3
 8001e14:	0863      	lsrs	r3, r4, #1
 8001e16:	4014      	ands	r4, r2
 8001e18:	431c      	orrs	r4, r3
 8001e1a:	07c3      	lsls	r3, r0, #31
 8001e1c:	431c      	orrs	r4, r3
 8001e1e:	0843      	lsrs	r3, r0, #1
 8001e20:	4699      	mov	r9, r3
 8001e22:	e657      	b.n	8001ad4 <__aeabi_dsub+0x104>
 8001e24:	0010      	movs	r0, r2
 8001e26:	000e      	movs	r6, r1
 8001e28:	3820      	subs	r0, #32
 8001e2a:	40c6      	lsrs	r6, r0
 8001e2c:	2a20      	cmp	r2, #32
 8001e2e:	d004      	beq.n	8001e3a <__aeabi_dsub+0x46a>
 8001e30:	2040      	movs	r0, #64	; 0x40
 8001e32:	1a82      	subs	r2, r0, r2
 8001e34:	4091      	lsls	r1, r2
 8001e36:	430f      	orrs	r7, r1
 8001e38:	46b9      	mov	r9, r7
 8001e3a:	464f      	mov	r7, r9
 8001e3c:	1e7a      	subs	r2, r7, #1
 8001e3e:	4197      	sbcs	r7, r2
 8001e40:	4337      	orrs	r7, r6
 8001e42:	e60f      	b.n	8001a64 <__aeabi_dsub+0x94>
 8001e44:	4662      	mov	r2, ip
 8001e46:	431a      	orrs	r2, r3
 8001e48:	0013      	movs	r3, r2
 8001e4a:	1e5a      	subs	r2, r3, #1
 8001e4c:	4193      	sbcs	r3, r2
 8001e4e:	1afc      	subs	r4, r7, r3
 8001e50:	42a7      	cmp	r7, r4
 8001e52:	41bf      	sbcs	r7, r7
 8001e54:	427f      	negs	r7, r7
 8001e56:	1bcb      	subs	r3, r1, r7
 8001e58:	4699      	mov	r9, r3
 8001e5a:	465d      	mov	r5, fp
 8001e5c:	4680      	mov	r8, r0
 8001e5e:	e608      	b.n	8001a72 <__aeabi_dsub+0xa2>
 8001e60:	4666      	mov	r6, ip
 8001e62:	431e      	orrs	r6, r3
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x498>
 8001e66:	e0be      	b.n	8001fe6 <__aeabi_dsub+0x616>
 8001e68:	1e56      	subs	r6, r2, #1
 8001e6a:	2a01      	cmp	r2, #1
 8001e6c:	d100      	bne.n	8001e70 <__aeabi_dsub+0x4a0>
 8001e6e:	e109      	b.n	8002084 <__aeabi_dsub+0x6b4>
 8001e70:	4c8c      	ldr	r4, [pc, #560]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001e72:	42a2      	cmp	r2, r4
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x4a8>
 8001e76:	e119      	b.n	80020ac <__aeabi_dsub+0x6dc>
 8001e78:	0032      	movs	r2, r6
 8001e7a:	e6c1      	b.n	8001c00 <__aeabi_dsub+0x230>
 8001e7c:	4642      	mov	r2, r8
 8001e7e:	2400      	movs	r4, #0
 8001e80:	2300      	movs	r3, #0
 8001e82:	e648      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001e84:	2020      	movs	r0, #32
 8001e86:	000c      	movs	r4, r1
 8001e88:	1a80      	subs	r0, r0, r2
 8001e8a:	003e      	movs	r6, r7
 8001e8c:	4087      	lsls	r7, r0
 8001e8e:	4084      	lsls	r4, r0
 8001e90:	40d6      	lsrs	r6, r2
 8001e92:	1e78      	subs	r0, r7, #1
 8001e94:	4187      	sbcs	r7, r0
 8001e96:	40d1      	lsrs	r1, r2
 8001e98:	4334      	orrs	r4, r6
 8001e9a:	433c      	orrs	r4, r7
 8001e9c:	448c      	add	ip, r1
 8001e9e:	e7a4      	b.n	8001dea <__aeabi_dsub+0x41a>
 8001ea0:	4a80      	ldr	r2, [pc, #512]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001ea2:	4290      	cmp	r0, r2
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x4d8>
 8001ea6:	e0e9      	b.n	800207c <__aeabi_dsub+0x6ac>
 8001ea8:	19df      	adds	r7, r3, r7
 8001eaa:	429f      	cmp	r7, r3
 8001eac:	419b      	sbcs	r3, r3
 8001eae:	4461      	add	r1, ip
 8001eb0:	425b      	negs	r3, r3
 8001eb2:	18c9      	adds	r1, r1, r3
 8001eb4:	07cc      	lsls	r4, r1, #31
 8001eb6:	087f      	lsrs	r7, r7, #1
 8001eb8:	084b      	lsrs	r3, r1, #1
 8001eba:	4699      	mov	r9, r3
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	433c      	orrs	r4, r7
 8001ec0:	e6f4      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001ec2:	1afc      	subs	r4, r7, r3
 8001ec4:	42a7      	cmp	r7, r4
 8001ec6:	41bf      	sbcs	r7, r7
 8001ec8:	4663      	mov	r3, ip
 8001eca:	427f      	negs	r7, r7
 8001ecc:	1ac9      	subs	r1, r1, r3
 8001ece:	1bcb      	subs	r3, r1, r7
 8001ed0:	4699      	mov	r9, r3
 8001ed2:	465d      	mov	r5, fp
 8001ed4:	e5d5      	b.n	8001a82 <__aeabi_dsub+0xb2>
 8001ed6:	08ff      	lsrs	r7, r7, #3
 8001ed8:	074b      	lsls	r3, r1, #29
 8001eda:	465d      	mov	r5, fp
 8001edc:	433b      	orrs	r3, r7
 8001ede:	08cc      	lsrs	r4, r1, #3
 8001ee0:	e6ee      	b.n	8001cc0 <__aeabi_dsub+0x2f0>
 8001ee2:	4662      	mov	r2, ip
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	d000      	beq.n	8001eea <__aeabi_dsub+0x51a>
 8001ee8:	e082      	b.n	8001ff0 <__aeabi_dsub+0x620>
 8001eea:	000b      	movs	r3, r1
 8001eec:	433b      	orrs	r3, r7
 8001eee:	d11b      	bne.n	8001f28 <__aeabi_dsub+0x558>
 8001ef0:	2480      	movs	r4, #128	; 0x80
 8001ef2:	2500      	movs	r5, #0
 8001ef4:	0324      	lsls	r4, r4, #12
 8001ef6:	e6f9      	b.n	8001cec <__aeabi_dsub+0x31c>
 8001ef8:	19dc      	adds	r4, r3, r7
 8001efa:	429c      	cmp	r4, r3
 8001efc:	419b      	sbcs	r3, r3
 8001efe:	4461      	add	r1, ip
 8001f00:	4689      	mov	r9, r1
 8001f02:	425b      	negs	r3, r3
 8001f04:	4499      	add	r9, r3
 8001f06:	464b      	mov	r3, r9
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	d444      	bmi.n	8001f96 <__aeabi_dsub+0x5c6>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	4698      	mov	r8, r3
 8001f10:	e6cc      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001f12:	1bdc      	subs	r4, r3, r7
 8001f14:	4662      	mov	r2, ip
 8001f16:	42a3      	cmp	r3, r4
 8001f18:	419b      	sbcs	r3, r3
 8001f1a:	1a51      	subs	r1, r2, r1
 8001f1c:	425b      	negs	r3, r3
 8001f1e:	1acb      	subs	r3, r1, r3
 8001f20:	4699      	mov	r9, r3
 8001f22:	2301      	movs	r3, #1
 8001f24:	4698      	mov	r8, r3
 8001f26:	e5a4      	b.n	8001a72 <__aeabi_dsub+0xa2>
 8001f28:	08ff      	lsrs	r7, r7, #3
 8001f2a:	074b      	lsls	r3, r1, #29
 8001f2c:	465d      	mov	r5, fp
 8001f2e:	433b      	orrs	r3, r7
 8001f30:	08cc      	lsrs	r4, r1, #3
 8001f32:	e6d7      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8001f34:	4662      	mov	r2, ip
 8001f36:	431a      	orrs	r2, r3
 8001f38:	0014      	movs	r4, r2
 8001f3a:	1e63      	subs	r3, r4, #1
 8001f3c:	419c      	sbcs	r4, r3
 8001f3e:	e679      	b.n	8001c34 <__aeabi_dsub+0x264>
 8001f40:	0015      	movs	r5, r2
 8001f42:	4664      	mov	r4, ip
 8001f44:	3d20      	subs	r5, #32
 8001f46:	40ec      	lsrs	r4, r5
 8001f48:	46a0      	mov	r8, r4
 8001f4a:	2a20      	cmp	r2, #32
 8001f4c:	d005      	beq.n	8001f5a <__aeabi_dsub+0x58a>
 8001f4e:	2540      	movs	r5, #64	; 0x40
 8001f50:	4664      	mov	r4, ip
 8001f52:	1aaa      	subs	r2, r5, r2
 8001f54:	4094      	lsls	r4, r2
 8001f56:	4323      	orrs	r3, r4
 8001f58:	469a      	mov	sl, r3
 8001f5a:	4654      	mov	r4, sl
 8001f5c:	1e63      	subs	r3, r4, #1
 8001f5e:	419c      	sbcs	r4, r3
 8001f60:	4643      	mov	r3, r8
 8001f62:	4323      	orrs	r3, r4
 8001f64:	e773      	b.n	8001e4e <__aeabi_dsub+0x47e>
 8001f66:	4662      	mov	r2, ip
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	d023      	beq.n	8001fb4 <__aeabi_dsub+0x5e4>
 8001f6c:	000a      	movs	r2, r1
 8001f6e:	433a      	orrs	r2, r7
 8001f70:	d000      	beq.n	8001f74 <__aeabi_dsub+0x5a4>
 8001f72:	e0a0      	b.n	80020b6 <__aeabi_dsub+0x6e6>
 8001f74:	4662      	mov	r2, ip
 8001f76:	08db      	lsrs	r3, r3, #3
 8001f78:	0752      	lsls	r2, r2, #29
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	4662      	mov	r2, ip
 8001f7e:	08d4      	lsrs	r4, r2, #3
 8001f80:	e6b0      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8001f82:	000b      	movs	r3, r1
 8001f84:	433b      	orrs	r3, r7
 8001f86:	d100      	bne.n	8001f8a <__aeabi_dsub+0x5ba>
 8001f88:	e728      	b.n	8001ddc <__aeabi_dsub+0x40c>
 8001f8a:	08ff      	lsrs	r7, r7, #3
 8001f8c:	074b      	lsls	r3, r1, #29
 8001f8e:	465d      	mov	r5, fp
 8001f90:	433b      	orrs	r3, r7
 8001f92:	08cc      	lsrs	r4, r1, #3
 8001f94:	e697      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001f96:	2302      	movs	r3, #2
 8001f98:	4698      	mov	r8, r3
 8001f9a:	e736      	b.n	8001e0a <__aeabi_dsub+0x43a>
 8001f9c:	1afc      	subs	r4, r7, r3
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	4663      	mov	r3, ip
 8001fa4:	427f      	negs	r7, r7
 8001fa6:	1ac9      	subs	r1, r1, r3
 8001fa8:	1bcb      	subs	r3, r1, r7
 8001faa:	4699      	mov	r9, r3
 8001fac:	2301      	movs	r3, #1
 8001fae:	465d      	mov	r5, fp
 8001fb0:	4698      	mov	r8, r3
 8001fb2:	e55e      	b.n	8001a72 <__aeabi_dsub+0xa2>
 8001fb4:	074b      	lsls	r3, r1, #29
 8001fb6:	08ff      	lsrs	r7, r7, #3
 8001fb8:	433b      	orrs	r3, r7
 8001fba:	08cc      	lsrs	r4, r1, #3
 8001fbc:	e692      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8001fbe:	1bdc      	subs	r4, r3, r7
 8001fc0:	4660      	mov	r0, ip
 8001fc2:	42a3      	cmp	r3, r4
 8001fc4:	41b6      	sbcs	r6, r6
 8001fc6:	1a40      	subs	r0, r0, r1
 8001fc8:	4276      	negs	r6, r6
 8001fca:	1b80      	subs	r0, r0, r6
 8001fcc:	4681      	mov	r9, r0
 8001fce:	0200      	lsls	r0, r0, #8
 8001fd0:	d560      	bpl.n	8002094 <__aeabi_dsub+0x6c4>
 8001fd2:	1afc      	subs	r4, r7, r3
 8001fd4:	42a7      	cmp	r7, r4
 8001fd6:	41bf      	sbcs	r7, r7
 8001fd8:	4663      	mov	r3, ip
 8001fda:	427f      	negs	r7, r7
 8001fdc:	1ac9      	subs	r1, r1, r3
 8001fde:	1bcb      	subs	r3, r1, r7
 8001fe0:	4699      	mov	r9, r3
 8001fe2:	465d      	mov	r5, fp
 8001fe4:	e576      	b.n	8001ad4 <__aeabi_dsub+0x104>
 8001fe6:	08ff      	lsrs	r7, r7, #3
 8001fe8:	074b      	lsls	r3, r1, #29
 8001fea:	433b      	orrs	r3, r7
 8001fec:	08cc      	lsrs	r4, r1, #3
 8001fee:	e667      	b.n	8001cc0 <__aeabi_dsub+0x2f0>
 8001ff0:	000a      	movs	r2, r1
 8001ff2:	08db      	lsrs	r3, r3, #3
 8001ff4:	433a      	orrs	r2, r7
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dsub+0x62a>
 8001ff8:	e66f      	b.n	8001cda <__aeabi_dsub+0x30a>
 8001ffa:	4662      	mov	r2, ip
 8001ffc:	0752      	lsls	r2, r2, #29
 8001ffe:	4313      	orrs	r3, r2
 8002000:	4662      	mov	r2, ip
 8002002:	08d4      	lsrs	r4, r2, #3
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	0312      	lsls	r2, r2, #12
 8002008:	4214      	tst	r4, r2
 800200a:	d007      	beq.n	800201c <__aeabi_dsub+0x64c>
 800200c:	08c8      	lsrs	r0, r1, #3
 800200e:	4210      	tst	r0, r2
 8002010:	d104      	bne.n	800201c <__aeabi_dsub+0x64c>
 8002012:	465d      	mov	r5, fp
 8002014:	0004      	movs	r4, r0
 8002016:	08fb      	lsrs	r3, r7, #3
 8002018:	0749      	lsls	r1, r1, #29
 800201a:	430b      	orrs	r3, r1
 800201c:	0f5a      	lsrs	r2, r3, #29
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	0752      	lsls	r2, r2, #29
 8002024:	4313      	orrs	r3, r2
 8002026:	e65d      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8002028:	074b      	lsls	r3, r1, #29
 800202a:	08ff      	lsrs	r7, r7, #3
 800202c:	433b      	orrs	r3, r7
 800202e:	08cc      	lsrs	r4, r1, #3
 8002030:	e649      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8002032:	19dc      	adds	r4, r3, r7
 8002034:	429c      	cmp	r4, r3
 8002036:	419b      	sbcs	r3, r3
 8002038:	4461      	add	r1, ip
 800203a:	4689      	mov	r9, r1
 800203c:	425b      	negs	r3, r3
 800203e:	4499      	add	r9, r3
 8002040:	464b      	mov	r3, r9
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	d400      	bmi.n	8002048 <__aeabi_dsub+0x678>
 8002046:	e631      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8002048:	464a      	mov	r2, r9
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <__aeabi_dsub+0x6d8>)
 800204c:	401a      	ands	r2, r3
 800204e:	2301      	movs	r3, #1
 8002050:	4691      	mov	r9, r2
 8002052:	4698      	mov	r8, r3
 8002054:	e62a      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8002056:	0016      	movs	r6, r2
 8002058:	4664      	mov	r4, ip
 800205a:	3e20      	subs	r6, #32
 800205c:	40f4      	lsrs	r4, r6
 800205e:	46a0      	mov	r8, r4
 8002060:	2a20      	cmp	r2, #32
 8002062:	d005      	beq.n	8002070 <__aeabi_dsub+0x6a0>
 8002064:	2640      	movs	r6, #64	; 0x40
 8002066:	4664      	mov	r4, ip
 8002068:	1ab2      	subs	r2, r6, r2
 800206a:	4094      	lsls	r4, r2
 800206c:	4323      	orrs	r3, r4
 800206e:	469a      	mov	sl, r3
 8002070:	4654      	mov	r4, sl
 8002072:	1e63      	subs	r3, r4, #1
 8002074:	419c      	sbcs	r4, r3
 8002076:	4643      	mov	r3, r8
 8002078:	431c      	orrs	r4, r3
 800207a:	e5db      	b.n	8001c34 <__aeabi_dsub+0x264>
 800207c:	0002      	movs	r2, r0
 800207e:	2400      	movs	r4, #0
 8002080:	2300      	movs	r3, #0
 8002082:	e548      	b.n	8001b16 <__aeabi_dsub+0x146>
 8002084:	19dc      	adds	r4, r3, r7
 8002086:	42bc      	cmp	r4, r7
 8002088:	41bf      	sbcs	r7, r7
 800208a:	4461      	add	r1, ip
 800208c:	4689      	mov	r9, r1
 800208e:	427f      	negs	r7, r7
 8002090:	44b9      	add	r9, r7
 8002092:	e738      	b.n	8001f06 <__aeabi_dsub+0x536>
 8002094:	464b      	mov	r3, r9
 8002096:	4323      	orrs	r3, r4
 8002098:	d100      	bne.n	800209c <__aeabi_dsub+0x6cc>
 800209a:	e69f      	b.n	8001ddc <__aeabi_dsub+0x40c>
 800209c:	e606      	b.n	8001cac <__aeabi_dsub+0x2dc>
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	000007fe 	.word	0x000007fe
 80020a4:	000007ff 	.word	0x000007ff
 80020a8:	ff7fffff 	.word	0xff7fffff
 80020ac:	08ff      	lsrs	r7, r7, #3
 80020ae:	074b      	lsls	r3, r1, #29
 80020b0:	433b      	orrs	r3, r7
 80020b2:	08cc      	lsrs	r4, r1, #3
 80020b4:	e616      	b.n	8001ce4 <__aeabi_dsub+0x314>
 80020b6:	4662      	mov	r2, ip
 80020b8:	08db      	lsrs	r3, r3, #3
 80020ba:	0752      	lsls	r2, r2, #29
 80020bc:	4313      	orrs	r3, r2
 80020be:	4662      	mov	r2, ip
 80020c0:	08d4      	lsrs	r4, r2, #3
 80020c2:	2280      	movs	r2, #128	; 0x80
 80020c4:	0312      	lsls	r2, r2, #12
 80020c6:	4214      	tst	r4, r2
 80020c8:	d007      	beq.n	80020da <__aeabi_dsub+0x70a>
 80020ca:	08c8      	lsrs	r0, r1, #3
 80020cc:	4210      	tst	r0, r2
 80020ce:	d104      	bne.n	80020da <__aeabi_dsub+0x70a>
 80020d0:	465d      	mov	r5, fp
 80020d2:	0004      	movs	r4, r0
 80020d4:	08fb      	lsrs	r3, r7, #3
 80020d6:	0749      	lsls	r1, r1, #29
 80020d8:	430b      	orrs	r3, r1
 80020da:	0f5a      	lsrs	r2, r3, #29
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	0752      	lsls	r2, r2, #29
 80020e0:	08db      	lsrs	r3, r3, #3
 80020e2:	4313      	orrs	r3, r2
 80020e4:	e5fe      	b.n	8001ce4 <__aeabi_dsub+0x314>
 80020e6:	2300      	movs	r3, #0
 80020e8:	4a01      	ldr	r2, [pc, #4]	; (80020f0 <__aeabi_dsub+0x720>)
 80020ea:	001c      	movs	r4, r3
 80020ec:	e513      	b.n	8001b16 <__aeabi_dsub+0x146>
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	000007ff 	.word	0x000007ff

080020f4 <__aeabi_dcmpun>:
 80020f4:	b570      	push	{r4, r5, r6, lr}
 80020f6:	0005      	movs	r5, r0
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <__aeabi_dcmpun+0x38>)
 80020fa:	031c      	lsls	r4, r3, #12
 80020fc:	0016      	movs	r6, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	030a      	lsls	r2, r1, #12
 8002102:	0049      	lsls	r1, r1, #1
 8002104:	0b12      	lsrs	r2, r2, #12
 8002106:	0d49      	lsrs	r1, r1, #21
 8002108:	0b24      	lsrs	r4, r4, #12
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	4281      	cmp	r1, r0
 800210e:	d008      	beq.n	8002122 <__aeabi_dcmpun+0x2e>
 8002110:	4a06      	ldr	r2, [pc, #24]	; (800212c <__aeabi_dcmpun+0x38>)
 8002112:	2000      	movs	r0, #0
 8002114:	4293      	cmp	r3, r2
 8002116:	d103      	bne.n	8002120 <__aeabi_dcmpun+0x2c>
 8002118:	0020      	movs	r0, r4
 800211a:	4330      	orrs	r0, r6
 800211c:	1e43      	subs	r3, r0, #1
 800211e:	4198      	sbcs	r0, r3
 8002120:	bd70      	pop	{r4, r5, r6, pc}
 8002122:	2001      	movs	r0, #1
 8002124:	432a      	orrs	r2, r5
 8002126:	d1fb      	bne.n	8002120 <__aeabi_dcmpun+0x2c>
 8002128:	e7f2      	b.n	8002110 <__aeabi_dcmpun+0x1c>
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	000007ff 	.word	0x000007ff

08002130 <__aeabi_d2iz>:
 8002130:	000a      	movs	r2, r1
 8002132:	b530      	push	{r4, r5, lr}
 8002134:	4c13      	ldr	r4, [pc, #76]	; (8002184 <__aeabi_d2iz+0x54>)
 8002136:	0053      	lsls	r3, r2, #1
 8002138:	0309      	lsls	r1, r1, #12
 800213a:	0005      	movs	r5, r0
 800213c:	0b09      	lsrs	r1, r1, #12
 800213e:	2000      	movs	r0, #0
 8002140:	0d5b      	lsrs	r3, r3, #21
 8002142:	0fd2      	lsrs	r2, r2, #31
 8002144:	42a3      	cmp	r3, r4
 8002146:	dd04      	ble.n	8002152 <__aeabi_d2iz+0x22>
 8002148:	480f      	ldr	r0, [pc, #60]	; (8002188 <__aeabi_d2iz+0x58>)
 800214a:	4283      	cmp	r3, r0
 800214c:	dd02      	ble.n	8002154 <__aeabi_d2iz+0x24>
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <__aeabi_d2iz+0x5c>)
 8002150:	18d0      	adds	r0, r2, r3
 8002152:	bd30      	pop	{r4, r5, pc}
 8002154:	2080      	movs	r0, #128	; 0x80
 8002156:	0340      	lsls	r0, r0, #13
 8002158:	4301      	orrs	r1, r0
 800215a:	480d      	ldr	r0, [pc, #52]	; (8002190 <__aeabi_d2iz+0x60>)
 800215c:	1ac0      	subs	r0, r0, r3
 800215e:	281f      	cmp	r0, #31
 8002160:	dd08      	ble.n	8002174 <__aeabi_d2iz+0x44>
 8002162:	480c      	ldr	r0, [pc, #48]	; (8002194 <__aeabi_d2iz+0x64>)
 8002164:	1ac3      	subs	r3, r0, r3
 8002166:	40d9      	lsrs	r1, r3
 8002168:	000b      	movs	r3, r1
 800216a:	4258      	negs	r0, r3
 800216c:	2a00      	cmp	r2, #0
 800216e:	d1f0      	bne.n	8002152 <__aeabi_d2iz+0x22>
 8002170:	0018      	movs	r0, r3
 8002172:	e7ee      	b.n	8002152 <__aeabi_d2iz+0x22>
 8002174:	4c08      	ldr	r4, [pc, #32]	; (8002198 <__aeabi_d2iz+0x68>)
 8002176:	40c5      	lsrs	r5, r0
 8002178:	46a4      	mov	ip, r4
 800217a:	4463      	add	r3, ip
 800217c:	4099      	lsls	r1, r3
 800217e:	000b      	movs	r3, r1
 8002180:	432b      	orrs	r3, r5
 8002182:	e7f2      	b.n	800216a <__aeabi_d2iz+0x3a>
 8002184:	000003fe 	.word	0x000003fe
 8002188:	0000041d 	.word	0x0000041d
 800218c:	7fffffff 	.word	0x7fffffff
 8002190:	00000433 	.word	0x00000433
 8002194:	00000413 	.word	0x00000413
 8002198:	fffffbed 	.word	0xfffffbed

0800219c <__aeabi_i2d>:
 800219c:	b570      	push	{r4, r5, r6, lr}
 800219e:	2800      	cmp	r0, #0
 80021a0:	d016      	beq.n	80021d0 <__aeabi_i2d+0x34>
 80021a2:	17c3      	asrs	r3, r0, #31
 80021a4:	18c5      	adds	r5, r0, r3
 80021a6:	405d      	eors	r5, r3
 80021a8:	0fc4      	lsrs	r4, r0, #31
 80021aa:	0028      	movs	r0, r5
 80021ac:	f000 f84c 	bl	8002248 <__clzsi2>
 80021b0:	4a11      	ldr	r2, [pc, #68]	; (80021f8 <__aeabi_i2d+0x5c>)
 80021b2:	1a12      	subs	r2, r2, r0
 80021b4:	280a      	cmp	r0, #10
 80021b6:	dc16      	bgt.n	80021e6 <__aeabi_i2d+0x4a>
 80021b8:	0003      	movs	r3, r0
 80021ba:	002e      	movs	r6, r5
 80021bc:	3315      	adds	r3, #21
 80021be:	409e      	lsls	r6, r3
 80021c0:	230b      	movs	r3, #11
 80021c2:	1a18      	subs	r0, r3, r0
 80021c4:	40c5      	lsrs	r5, r0
 80021c6:	0552      	lsls	r2, r2, #21
 80021c8:	032d      	lsls	r5, r5, #12
 80021ca:	0b2d      	lsrs	r5, r5, #12
 80021cc:	0d53      	lsrs	r3, r2, #21
 80021ce:	e003      	b.n	80021d8 <__aeabi_i2d+0x3c>
 80021d0:	2400      	movs	r4, #0
 80021d2:	2300      	movs	r3, #0
 80021d4:	2500      	movs	r5, #0
 80021d6:	2600      	movs	r6, #0
 80021d8:	051b      	lsls	r3, r3, #20
 80021da:	432b      	orrs	r3, r5
 80021dc:	07e4      	lsls	r4, r4, #31
 80021de:	4323      	orrs	r3, r4
 80021e0:	0030      	movs	r0, r6
 80021e2:	0019      	movs	r1, r3
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	380b      	subs	r0, #11
 80021e8:	4085      	lsls	r5, r0
 80021ea:	0552      	lsls	r2, r2, #21
 80021ec:	032d      	lsls	r5, r5, #12
 80021ee:	2600      	movs	r6, #0
 80021f0:	0b2d      	lsrs	r5, r5, #12
 80021f2:	0d53      	lsrs	r3, r2, #21
 80021f4:	e7f0      	b.n	80021d8 <__aeabi_i2d+0x3c>
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	0000041e 	.word	0x0000041e

080021fc <__aeabi_ui2d>:
 80021fc:	b510      	push	{r4, lr}
 80021fe:	1e04      	subs	r4, r0, #0
 8002200:	d010      	beq.n	8002224 <__aeabi_ui2d+0x28>
 8002202:	f000 f821 	bl	8002248 <__clzsi2>
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <__aeabi_ui2d+0x48>)
 8002208:	1a1b      	subs	r3, r3, r0
 800220a:	280a      	cmp	r0, #10
 800220c:	dc11      	bgt.n	8002232 <__aeabi_ui2d+0x36>
 800220e:	220b      	movs	r2, #11
 8002210:	0021      	movs	r1, r4
 8002212:	1a12      	subs	r2, r2, r0
 8002214:	40d1      	lsrs	r1, r2
 8002216:	3015      	adds	r0, #21
 8002218:	030a      	lsls	r2, r1, #12
 800221a:	055b      	lsls	r3, r3, #21
 800221c:	4084      	lsls	r4, r0
 800221e:	0b12      	lsrs	r2, r2, #12
 8002220:	0d5b      	lsrs	r3, r3, #21
 8002222:	e001      	b.n	8002228 <__aeabi_ui2d+0x2c>
 8002224:	2300      	movs	r3, #0
 8002226:	2200      	movs	r2, #0
 8002228:	051b      	lsls	r3, r3, #20
 800222a:	4313      	orrs	r3, r2
 800222c:	0020      	movs	r0, r4
 800222e:	0019      	movs	r1, r3
 8002230:	bd10      	pop	{r4, pc}
 8002232:	0022      	movs	r2, r4
 8002234:	380b      	subs	r0, #11
 8002236:	4082      	lsls	r2, r0
 8002238:	055b      	lsls	r3, r3, #21
 800223a:	0312      	lsls	r2, r2, #12
 800223c:	2400      	movs	r4, #0
 800223e:	0b12      	lsrs	r2, r2, #12
 8002240:	0d5b      	lsrs	r3, r3, #21
 8002242:	e7f1      	b.n	8002228 <__aeabi_ui2d+0x2c>
 8002244:	0000041e 	.word	0x0000041e

08002248 <__clzsi2>:
 8002248:	211c      	movs	r1, #28
 800224a:	2301      	movs	r3, #1
 800224c:	041b      	lsls	r3, r3, #16
 800224e:	4298      	cmp	r0, r3
 8002250:	d301      	bcc.n	8002256 <__clzsi2+0xe>
 8002252:	0c00      	lsrs	r0, r0, #16
 8002254:	3910      	subs	r1, #16
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	4298      	cmp	r0, r3
 800225a:	d301      	bcc.n	8002260 <__clzsi2+0x18>
 800225c:	0a00      	lsrs	r0, r0, #8
 800225e:	3908      	subs	r1, #8
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	4298      	cmp	r0, r3
 8002264:	d301      	bcc.n	800226a <__clzsi2+0x22>
 8002266:	0900      	lsrs	r0, r0, #4
 8002268:	3904      	subs	r1, #4
 800226a:	a202      	add	r2, pc, #8	; (adr r2, 8002274 <__clzsi2+0x2c>)
 800226c:	5c10      	ldrb	r0, [r2, r0]
 800226e:	1840      	adds	r0, r0, r1
 8002270:	4770      	bx	lr
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	02020304 	.word	0x02020304
 8002278:	01010101 	.word	0x01010101
	...

08002284 <__clzdi2>:
 8002284:	b510      	push	{r4, lr}
 8002286:	2900      	cmp	r1, #0
 8002288:	d103      	bne.n	8002292 <__clzdi2+0xe>
 800228a:	f7ff ffdd 	bl	8002248 <__clzsi2>
 800228e:	3020      	adds	r0, #32
 8002290:	e002      	b.n	8002298 <__clzdi2+0x14>
 8002292:	0008      	movs	r0, r1
 8002294:	f7ff ffd8 	bl	8002248 <__clzsi2>
 8002298:	bd10      	pop	{r4, pc}
 800229a:	46c0      	nop			; (mov r8, r8)

0800229c <UART_SET_Interruption>:
}

*/

void UART_SET_Interruption(UART_HandleTypeDef * istance) // inicializa la interrupcion
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&huart2,UART_IT_IDLE);
 80022a4:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <UART_SET_Interruption+0x4c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <UART_SET_Interruption+0x4c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2110      	movs	r1, #16
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]
  __HAL_UART_FLUSH_DRREGISTER(&huart2);
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <UART_SET_Interruption+0x4c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699a      	ldr	r2, [r3, #24]
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <UART_SET_Interruption+0x4c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2108      	movs	r1, #8
 80022c0:	430a      	orrs	r2, r1
 80022c2:	619a      	str	r2, [r3, #24]
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <UART_SET_Interruption+0x4c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699a      	ldr	r2, [r3, #24]
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <UART_SET_Interruption+0x4c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2110      	movs	r1, #16
 80022d0:	430a      	orrs	r2, r1
 80022d2:	619a      	str	r2, [r3, #24]
  //DMAEnable = true;
 HAL_UART_Receive_DMA(&huart2, (uint8_t *) rx_buff, sizeof(rx_buff));
 80022d4:	4905      	ldr	r1, [pc, #20]	; (80022ec <UART_SET_Interruption+0x50>)
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <UART_SET_Interruption+0x4c>)
 80022d8:	2232      	movs	r2, #50	; 0x32
 80022da:	0018      	movs	r0, r3
 80022dc:	f002 fc7e 	bl	8004bdc <HAL_UART_Receive_DMA>
}
 80022e0:	46c0      	nop			; (mov r8, r8)
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b002      	add	sp, #8
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000250 	.word	0x20000250
 80022ec:	200003a8 	.word	0x200003a8

080022f0 <UART_ASCII_IRQHandler>:

void UART_ASCII_IRQHandler(UART_HandleTypeDef * istance)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if(RESET != __HAL_UART_GET_FLAG(&huart2,UART_FLAG_IDLE))
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <UART_ASCII_IRQHandler+0x2c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	2210      	movs	r2, #16
 8002300:	4013      	ands	r3, r2
 8002302:	2b10      	cmp	r3, #16
 8002304:	d105      	bne.n	8002312 <UART_ASCII_IRQHandler+0x22>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart2); // limpia la bandera
 8002306:	4b05      	ldr	r3, [pc, #20]	; (800231c <UART_ASCII_IRQHandler+0x2c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2210      	movs	r2, #16
 800230c:	621a      	str	r2, [r3, #32]
	  UART_ASCII_receive_callback(); // interrupcion
 800230e:	f000 f807 	bl	8002320 <UART_ASCII_receive_callback>
  }
}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	b002      	add	sp, #8
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	20000250 	.word	0x20000250

08002320 <UART_ASCII_receive_callback>:

void UART_ASCII_receive_callback(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	HAL_UART_DMAStop(&huart2);
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <UART_ASCII_receive_callback+0x30>)
 8002326:	0018      	movs	r0, r3
 8002328:	f002 fcbe 	bl	8004ca8 <HAL_UART_DMAStop>
    HAL_UART_Receive_DMA(&huart2,(uint8_t*) rx_buff, sizeof(rx_buff));
 800232c:	4909      	ldr	r1, [pc, #36]	; (8002354 <UART_ASCII_receive_callback+0x34>)
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <UART_ASCII_receive_callback+0x30>)
 8002330:	2232      	movs	r2, #50	; 0x32
 8002332:	0018      	movs	r0, r3
 8002334:	f002 fc52 	bl	8004bdc <HAL_UART_Receive_DMA>
    //get_command(rx_buff);
    dato_recivido = true;
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <UART_ASCII_receive_callback+0x38>)
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
    memset(rx_buff,'\0',sizeof(rx_buff));
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <UART_ASCII_receive_callback+0x34>)
 8002340:	2232      	movs	r2, #50	; 0x32
 8002342:	2100      	movs	r1, #0
 8002344:	0018      	movs	r0, r3
 8002346:	f004 fd25 	bl	8006d94 <memset>
}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000250 	.word	0x20000250
 8002354:	200003a8 	.word	0x200003a8
 8002358:	200003a4 	.word	0x200003a4

0800235c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800235c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235e:	b08f      	sub	sp, #60	; 0x3c
 8002360:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002362:	f000 fc51 	bl	8002c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002366:	f000 f87f 	bl	8002468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800236a:	f000 f939 	bl	80025e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800236e:	f000 f911 	bl	8002594 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002372:	f000 f8c1 	bl	80024f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UART_SET_Interruption(&huart2);
 8002376:	4b32      	ldr	r3, [pc, #200]	; (8002440 <main+0xe4>)
 8002378:	0018      	movs	r0, r3
 800237a:	f7ff ff8f 	bl	800229c <UART_SET_Interruption>
  HAL_UART_Receive_DMA(&huart2,rx_buff, sizeof(rx_buff));
 800237e:	4931      	ldr	r1, [pc, #196]	; (8002444 <main+0xe8>)
 8002380:	4b2f      	ldr	r3, [pc, #188]	; (8002440 <main+0xe4>)
 8002382:	2232      	movs	r2, #50	; 0x32
 8002384:	0018      	movs	r0, r3
 8002386:	f002 fc29 	bl	8004bdc <HAL_UART_Receive_DMA>
  RetargetInit(&huart2);
 800238a:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <main+0xe4>)
 800238c:	0018      	movs	r0, r3
 800238e:	f000 f9e3 	bl	8002758 <RetargetInit>

  printf("\r LCD project \r\n");
 8002392:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <main+0xec>)
 8002394:	0018      	movs	r0, r3
 8002396:	f005 f9ff 	bl	8007798 <puts>
  char m[] = {"Buenos dias Ismael"};
 800239a:	241c      	movs	r4, #28
 800239c:	193b      	adds	r3, r7, r4
 800239e:	4a2b      	ldr	r2, [pc, #172]	; (800244c <main+0xf0>)
 80023a0:	ca23      	ldmia	r2!, {r0, r1, r5}
 80023a2:	c323      	stmia	r3!, {r0, r1, r5}
 80023a4:	6811      	ldr	r1, [r2, #0]
 80023a6:	6019      	str	r1, [r3, #0]
 80023a8:	8891      	ldrh	r1, [r2, #4]
 80023aa:	8099      	strh	r1, [r3, #4]
 80023ac:	7992      	ldrb	r2, [r2, #6]
 80023ae:	719a      	strb	r2, [r3, #6]
  char m2[] = {"Como estas?"};
 80023b0:	2510      	movs	r5, #16
 80023b2:	197b      	adds	r3, r7, r5
 80023b4:	4a26      	ldr	r2, [pc, #152]	; (8002450 <main+0xf4>)
 80023b6:	ca43      	ldmia	r2!, {r0, r1, r6}
 80023b8:	c343      	stmia	r3!, {r0, r1, r6}
  char measure[10];

  lcd_init(&my_lcd);
 80023ba:	4b26      	ldr	r3, [pc, #152]	; (8002454 <main+0xf8>)
 80023bc:	0018      	movs	r0, r3
 80023be:	f004 f937 	bl	8006630 <lcd_init>
  place(&my_lcd,1,3);
 80023c2:	4b24      	ldr	r3, [pc, #144]	; (8002454 <main+0xf8>)
 80023c4:	2203      	movs	r2, #3
 80023c6:	2101      	movs	r1, #1
 80023c8:	0018      	movs	r0, r3
 80023ca:	f004 f9af 	bl	800672c <place>
  message(&my_lcd,m,sizeof(m));
 80023ce:	1939      	adds	r1, r7, r4
 80023d0:	4b20      	ldr	r3, [pc, #128]	; (8002454 <main+0xf8>)
 80023d2:	2213      	movs	r2, #19
 80023d4:	0018      	movs	r0, r3
 80023d6:	f004 f973 	bl	80066c0 <message>
  place(&my_lcd,2,3);
 80023da:	4b1e      	ldr	r3, [pc, #120]	; (8002454 <main+0xf8>)
 80023dc:	2203      	movs	r2, #3
 80023de:	2102      	movs	r1, #2
 80023e0:	0018      	movs	r0, r3
 80023e2:	f004 f9a3 	bl	800672c <place>
  message(&my_lcd,m2,sizeof(m2));
 80023e6:	1979      	adds	r1, r7, r5
 80023e8:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <main+0xf8>)
 80023ea:	220c      	movs	r2, #12
 80023ec:	0018      	movs	r0, r3
 80023ee:	f004 f967 	bl	80066c0 <message>
  HAL_Delay(2000);
 80023f2:	23fa      	movs	r3, #250	; 0xfa
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	0018      	movs	r0, r3
 80023f8:	f000 fc8c 	bl	8002d14 <HAL_Delay>

  clear(&my_lcd);
 80023fc:	4b15      	ldr	r3, [pc, #84]	; (8002454 <main+0xf8>)
 80023fe:	0018      	movs	r0, r3
 8002400:	f004 f944 	bl	800668c <clear>

  place(&my_lcd,1,0);
 8002404:	4b13      	ldr	r3, [pc, #76]	; (8002454 <main+0xf8>)
 8002406:	2200      	movs	r2, #0
 8002408:	2101      	movs	r1, #1
 800240a:	0018      	movs	r0, r3
 800240c:	f004 f98e 	bl	800672c <place>
  get_number(measure,sizeof(measure), "%.3f", 4.331);
 8002410:	4911      	ldr	r1, [pc, #68]	; (8002458 <main+0xfc>)
 8002412:	1d38      	adds	r0, r7, #4
 8002414:	4a11      	ldr	r2, [pc, #68]	; (800245c <main+0x100>)
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <main+0x104>)
 8002418:	9200      	str	r2, [sp, #0]
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	000a      	movs	r2, r1
 800241e:	210a      	movs	r1, #10
 8002420:	f004 f96d 	bl	80066fe <get_number>
  message(&my_lcd,"measure: ",9);
 8002424:	490f      	ldr	r1, [pc, #60]	; (8002464 <main+0x108>)
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <main+0xf8>)
 8002428:	2209      	movs	r2, #9
 800242a:	0018      	movs	r0, r3
 800242c:	f004 f948 	bl	80066c0 <message>
  message(&my_lcd,measure,6);
 8002430:	1d39      	adds	r1, r7, #4
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <main+0xf8>)
 8002434:	2206      	movs	r2, #6
 8002436:	0018      	movs	r0, r3
 8002438:	f004 f942 	bl	80066c0 <message>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800243c:	e7fe      	b.n	800243c <main+0xe0>
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	20000250 	.word	0x20000250
 8002444:	200003a8 	.word	0x200003a8
 8002448:	0800a000 	.word	0x0800a000
 800244c:	0800a024 	.word	0x0800a024
 8002450:	0800a038 	.word	0x0800a038
 8002454:	20000000 	.word	0x20000000
 8002458:	0800a010 	.word	0x0800a010
 800245c:	a9fbe76d 	.word	0xa9fbe76d
 8002460:	401152f1 	.word	0x401152f1
 8002464:	0800a018 	.word	0x0800a018

08002468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b095      	sub	sp, #84	; 0x54
 800246c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800246e:	2414      	movs	r4, #20
 8002470:	193b      	adds	r3, r7, r4
 8002472:	0018      	movs	r0, r3
 8002474:	233c      	movs	r3, #60	; 0x3c
 8002476:	001a      	movs	r2, r3
 8002478:	2100      	movs	r1, #0
 800247a:	f004 fc8b 	bl	8006d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	0018      	movs	r0, r3
 8002482:	2310      	movs	r3, #16
 8002484:	001a      	movs	r2, r3
 8002486:	2100      	movs	r1, #0
 8002488:	f004 fc84 	bl	8006d94 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	0018      	movs	r0, r3
 8002492:	f001 fa3d 	bl	8003910 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002496:	193b      	adds	r3, r7, r4
 8002498:	2202      	movs	r2, #2
 800249a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800249c:	193b      	adds	r3, r7, r4
 800249e:	2280      	movs	r2, #128	; 0x80
 80024a0:	0052      	lsls	r2, r2, #1
 80024a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80024a4:	193b      	adds	r3, r7, r4
 80024a6:	2200      	movs	r2, #0
 80024a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024aa:	193b      	adds	r3, r7, r4
 80024ac:	2240      	movs	r2, #64	; 0x40
 80024ae:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80024b0:	193b      	adds	r3, r7, r4
 80024b2:	2200      	movs	r2, #0
 80024b4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b6:	193b      	adds	r3, r7, r4
 80024b8:	0018      	movs	r0, r3
 80024ba:	f001 fa75 	bl	80039a8 <HAL_RCC_OscConfig>
 80024be:	1e03      	subs	r3, r0, #0
 80024c0:	d001      	beq.n	80024c6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80024c2:	f000 f943 	bl	800274c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	2207      	movs	r2, #7
 80024ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	2200      	movs	r2, #0
 80024d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	2100      	movs	r1, #0
 80024e2:	0018      	movs	r0, r3
 80024e4:	f001 fdc0 	bl	8004068 <HAL_RCC_ClockConfig>
 80024e8:	1e03      	subs	r3, r0, #0
 80024ea:	d001      	beq.n	80024f0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80024ec:	f000 f92e 	bl	800274c <Error_Handler>
  }
}
 80024f0:	46c0      	nop			; (mov r8, r8)
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b015      	add	sp, #84	; 0x54
 80024f6:	bd90      	pop	{r4, r7, pc}

080024f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024fc:	4b23      	ldr	r3, [pc, #140]	; (800258c <MX_USART2_UART_Init+0x94>)
 80024fe:	4a24      	ldr	r2, [pc, #144]	; (8002590 <MX_USART2_UART_Init+0x98>)
 8002500:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8002502:	4b22      	ldr	r3, [pc, #136]	; (800258c <MX_USART2_UART_Init+0x94>)
 8002504:	22e1      	movs	r2, #225	; 0xe1
 8002506:	0212      	lsls	r2, r2, #8
 8002508:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800250a:	4b20      	ldr	r3, [pc, #128]	; (800258c <MX_USART2_UART_Init+0x94>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002510:	4b1e      	ldr	r3, [pc, #120]	; (800258c <MX_USART2_UART_Init+0x94>)
 8002512:	2200      	movs	r2, #0
 8002514:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <MX_USART2_UART_Init+0x94>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800251c:	4b1b      	ldr	r3, [pc, #108]	; (800258c <MX_USART2_UART_Init+0x94>)
 800251e:	220c      	movs	r2, #12
 8002520:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002522:	4b1a      	ldr	r3, [pc, #104]	; (800258c <MX_USART2_UART_Init+0x94>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002528:	4b18      	ldr	r3, [pc, #96]	; (800258c <MX_USART2_UART_Init+0x94>)
 800252a:	2200      	movs	r2, #0
 800252c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800252e:	4b17      	ldr	r3, [pc, #92]	; (800258c <MX_USART2_UART_Init+0x94>)
 8002530:	2200      	movs	r2, #0
 8002532:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002534:	4b15      	ldr	r3, [pc, #84]	; (800258c <MX_USART2_UART_Init+0x94>)
 8002536:	2200      	movs	r2, #0
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800253a:	4b14      	ldr	r3, [pc, #80]	; (800258c <MX_USART2_UART_Init+0x94>)
 800253c:	2200      	movs	r2, #0
 800253e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <MX_USART2_UART_Init+0x94>)
 8002542:	0018      	movs	r0, r3
 8002544:	f002 f976 	bl	8004834 <HAL_UART_Init>
 8002548:	1e03      	subs	r3, r0, #0
 800254a:	d001      	beq.n	8002550 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800254c:	f000 f8fe 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <MX_USART2_UART_Init+0x94>)
 8002552:	2100      	movs	r1, #0
 8002554:	0018      	movs	r0, r3
 8002556:	f003 ff8b 	bl	8006470 <HAL_UARTEx_SetTxFifoThreshold>
 800255a:	1e03      	subs	r3, r0, #0
 800255c:	d001      	beq.n	8002562 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800255e:	f000 f8f5 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <MX_USART2_UART_Init+0x94>)
 8002564:	2100      	movs	r1, #0
 8002566:	0018      	movs	r0, r3
 8002568:	f003 ffc2 	bl	80064f0 <HAL_UARTEx_SetRxFifoThreshold>
 800256c:	1e03      	subs	r3, r0, #0
 800256e:	d001      	beq.n	8002574 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002570:	f000 f8ec 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <MX_USART2_UART_Init+0x94>)
 8002576:	0018      	movs	r0, r3
 8002578:	f003 ff40 	bl	80063fc <HAL_UARTEx_DisableFifoMode>
 800257c:	1e03      	subs	r3, r0, #0
 800257e:	d001      	beq.n	8002584 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002580:	f000 f8e4 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002584:	46c0      	nop			; (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	20000250 	.word	0x20000250
 8002590:	40004400 	.word	0x40004400

08002594 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <MX_DMA_Init+0x48>)
 800259c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <MX_DMA_Init+0x48>)
 80025a0:	2101      	movs	r1, #1
 80025a2:	430a      	orrs	r2, r1
 80025a4:	639a      	str	r2, [r3, #56]	; 0x38
 80025a6:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <MX_DMA_Init+0x48>)
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	2201      	movs	r2, #1
 80025ac:	4013      	ands	r3, r2
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	2009      	movs	r0, #9
 80025b8:	f000 fc7c 	bl	8002eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025bc:	2009      	movs	r0, #9
 80025be:	f000 fc8e 	bl	8002ede <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2100      	movs	r1, #0
 80025c6:	200a      	movs	r0, #10
 80025c8:	f000 fc74 	bl	8002eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80025cc:	200a      	movs	r0, #10
 80025ce:	f000 fc86 	bl	8002ede <HAL_NVIC_EnableIRQ>

}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b002      	add	sp, #8
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	40021000 	.word	0x40021000

080025e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b08b      	sub	sp, #44	; 0x2c
 80025e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e6:	2414      	movs	r4, #20
 80025e8:	193b      	adds	r3, r7, r4
 80025ea:	0018      	movs	r0, r3
 80025ec:	2314      	movs	r3, #20
 80025ee:	001a      	movs	r2, r3
 80025f0:	2100      	movs	r1, #0
 80025f2:	f004 fbcf 	bl	8006d94 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f6:	4b52      	ldr	r3, [pc, #328]	; (8002740 <MX_GPIO_Init+0x160>)
 80025f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025fa:	4b51      	ldr	r3, [pc, #324]	; (8002740 <MX_GPIO_Init+0x160>)
 80025fc:	2104      	movs	r1, #4
 80025fe:	430a      	orrs	r2, r1
 8002600:	635a      	str	r2, [r3, #52]	; 0x34
 8002602:	4b4f      	ldr	r3, [pc, #316]	; (8002740 <MX_GPIO_Init+0x160>)
 8002604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002606:	2204      	movs	r2, #4
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800260e:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <MX_GPIO_Init+0x160>)
 8002610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002612:	4b4b      	ldr	r3, [pc, #300]	; (8002740 <MX_GPIO_Init+0x160>)
 8002614:	2120      	movs	r1, #32
 8002616:	430a      	orrs	r2, r1
 8002618:	635a      	str	r2, [r3, #52]	; 0x34
 800261a:	4b49      	ldr	r3, [pc, #292]	; (8002740 <MX_GPIO_Init+0x160>)
 800261c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261e:	2220      	movs	r2, #32
 8002620:	4013      	ands	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002626:	4b46      	ldr	r3, [pc, #280]	; (8002740 <MX_GPIO_Init+0x160>)
 8002628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800262a:	4b45      	ldr	r3, [pc, #276]	; (8002740 <MX_GPIO_Init+0x160>)
 800262c:	2101      	movs	r1, #1
 800262e:	430a      	orrs	r2, r1
 8002630:	635a      	str	r2, [r3, #52]	; 0x34
 8002632:	4b43      	ldr	r3, [pc, #268]	; (8002740 <MX_GPIO_Init+0x160>)
 8002634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002636:	2201      	movs	r2, #1
 8002638:	4013      	ands	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800263e:	4b40      	ldr	r3, [pc, #256]	; (8002740 <MX_GPIO_Init+0x160>)
 8002640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002642:	4b3f      	ldr	r3, [pc, #252]	; (8002740 <MX_GPIO_Init+0x160>)
 8002644:	2102      	movs	r1, #2
 8002646:	430a      	orrs	r2, r1
 8002648:	635a      	str	r2, [r3, #52]	; 0x34
 800264a:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <MX_GPIO_Init+0x160>)
 800264c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264e:	2202      	movs	r2, #2
 8002650:	4013      	ands	r3, r2
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|ENABLE_Pin, GPIO_PIN_RESET);
 8002656:	2384      	movs	r3, #132	; 0x84
 8002658:	00d9      	lsls	r1, r3, #3
 800265a:	23a0      	movs	r3, #160	; 0xa0
 800265c:	05db      	lsls	r3, r3, #23
 800265e:	2200      	movs	r2, #0
 8002660:	0018      	movs	r0, r3
 8002662:	f001 f937 	bl	80038d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RW_Pin|RS_Pin, GPIO_PIN_RESET);
 8002666:	4b37      	ldr	r3, [pc, #220]	; (8002744 <MX_GPIO_Init+0x164>)
 8002668:	2200      	movs	r2, #0
 800266a:	2130      	movs	r1, #48	; 0x30
 800266c:	0018      	movs	r0, r3
 800266e:	f001 f931 	bl	80038d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DATA_0_Pin|DATA_1_Pin|DATA_2_Pin|DATA_3_Pin
 8002672:	4b35      	ldr	r3, [pc, #212]	; (8002748 <MX_GPIO_Init+0x168>)
 8002674:	2200      	movs	r2, #0
 8002676:	21ff      	movs	r1, #255	; 0xff
 8002678:	0018      	movs	r0, r3
 800267a:	f001 f92b 	bl	80038d4 <HAL_GPIO_WritePin>
                          |DATA_4_Pin|DATA_5_Pin|DATA_6_Pin|DATA_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800267e:	193b      	adds	r3, r7, r4
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	0192      	lsls	r2, r2, #6
 8002684:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002686:	193b      	adds	r3, r7, r4
 8002688:	2200      	movs	r2, #0
 800268a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	193b      	adds	r3, r7, r4
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002692:	193b      	adds	r3, r7, r4
 8002694:	4a2b      	ldr	r2, [pc, #172]	; (8002744 <MX_GPIO_Init+0x164>)
 8002696:	0019      	movs	r1, r3
 8002698:	0010      	movs	r0, r2
 800269a:	f000 ffaf 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800269e:	193b      	adds	r3, r7, r4
 80026a0:	2220      	movs	r2, #32
 80026a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a4:	193b      	adds	r3, r7, r4
 80026a6:	2201      	movs	r2, #1
 80026a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	193b      	adds	r3, r7, r4
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026b0:	193b      	adds	r3, r7, r4
 80026b2:	2202      	movs	r2, #2
 80026b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80026b6:	193a      	adds	r2, r7, r4
 80026b8:	23a0      	movs	r3, #160	; 0xa0
 80026ba:	05db      	lsls	r3, r3, #23
 80026bc:	0011      	movs	r1, r2
 80026be:	0018      	movs	r0, r3
 80026c0:	f000 ff9c 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RW_Pin RS_Pin */
  GPIO_InitStruct.Pin = RW_Pin|RS_Pin;
 80026c4:	193b      	adds	r3, r7, r4
 80026c6:	2230      	movs	r2, #48	; 0x30
 80026c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ca:	193b      	adds	r3, r7, r4
 80026cc:	2201      	movs	r2, #1
 80026ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	193b      	adds	r3, r7, r4
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d6:	193b      	adds	r3, r7, r4
 80026d8:	2200      	movs	r2, #0
 80026da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026dc:	193b      	adds	r3, r7, r4
 80026de:	4a19      	ldr	r2, [pc, #100]	; (8002744 <MX_GPIO_Init+0x164>)
 80026e0:	0019      	movs	r1, r3
 80026e2:	0010      	movs	r0, r2
 80026e4:	f000 ff8a 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DATA_0_Pin DATA_1_Pin DATA_2_Pin DATA_3_Pin
                           DATA_4_Pin DATA_5_Pin DATA_6_Pin DATA_7_Pin */
  GPIO_InitStruct.Pin = DATA_0_Pin|DATA_1_Pin|DATA_2_Pin|DATA_3_Pin
 80026e8:	193b      	adds	r3, r7, r4
 80026ea:	22ff      	movs	r2, #255	; 0xff
 80026ec:	601a      	str	r2, [r3, #0]
                          |DATA_4_Pin|DATA_5_Pin|DATA_6_Pin|DATA_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ee:	193b      	adds	r3, r7, r4
 80026f0:	2201      	movs	r2, #1
 80026f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	193b      	adds	r3, r7, r4
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	193b      	adds	r3, r7, r4
 80026fc:	2200      	movs	r2, #0
 80026fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002700:	193b      	adds	r3, r7, r4
 8002702:	4a11      	ldr	r2, [pc, #68]	; (8002748 <MX_GPIO_Init+0x168>)
 8002704:	0019      	movs	r1, r3
 8002706:	0010      	movs	r0, r2
 8002708:	f000 ff78 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800270c:	0021      	movs	r1, r4
 800270e:	187b      	adds	r3, r7, r1
 8002710:	2280      	movs	r2, #128	; 0x80
 8002712:	00d2      	lsls	r2, r2, #3
 8002714:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002716:	187b      	adds	r3, r7, r1
 8002718:	2201      	movs	r2, #1
 800271a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	187b      	adds	r3, r7, r1
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002722:	187b      	adds	r3, r7, r1
 8002724:	2200      	movs	r2, #0
 8002726:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002728:	187a      	adds	r2, r7, r1
 800272a:	23a0      	movs	r3, #160	; 0xa0
 800272c:	05db      	lsls	r3, r3, #23
 800272e:	0011      	movs	r1, r2
 8002730:	0018      	movs	r0, r3
 8002732:	f000 ff63 	bl	80035fc <HAL_GPIO_Init>

}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	46bd      	mov	sp, r7
 800273a:	b00b      	add	sp, #44	; 0x2c
 800273c:	bd90      	pop	{r4, r7, pc}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	40021000 	.word	0x40021000
 8002744:	50000800 	.word	0x50000800
 8002748:	50000400 	.word	0x50000400

0800274c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002750:	b672      	cpsid	i
}
 8002752:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002754:	e7fe      	b.n	8002754 <Error_Handler+0x8>
	...

08002758 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <RetargetInit+0x28>)
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002766:	4b07      	ldr	r3, [pc, #28]	; (8002784 <RetargetInit+0x2c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6898      	ldr	r0, [r3, #8]
 800276c:	2300      	movs	r3, #0
 800276e:	2202      	movs	r2, #2
 8002770:	2100      	movs	r1, #0
 8002772:	f005 f81b 	bl	80077ac <setvbuf>
}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	b002      	add	sp, #8
 800277c:	bd80      	pop	{r7, pc}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	200003dc 	.word	0x200003dc
 8002784:	20000064 	.word	0x20000064

08002788 <_isatty>:

int _isatty(int fd) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	db04      	blt.n	80027a0 <_isatty+0x18>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b02      	cmp	r3, #2
 800279a:	dc01      	bgt.n	80027a0 <_isatty+0x18>
    return 1;
 800279c:	2301      	movs	r3, #1
 800279e:	e005      	b.n	80027ac <_isatty+0x24>

  errno = EBADF;
 80027a0:	f004 face 	bl	8006d40 <__errno>
 80027a4:	0003      	movs	r3, r0
 80027a6:	2209      	movs	r2, #9
 80027a8:	601a      	str	r2, [r3, #0]
  return 0;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	0018      	movs	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b002      	add	sp, #8
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <_write>:

int _write(int fd, char* ptr, int len) {
 80027b4:	b5b0      	push	{r4, r5, r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d002      	beq.n	80027cc <_write+0x18>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d114      	bne.n	80027f6 <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80027cc:	4b0f      	ldr	r3, [pc, #60]	; (800280c <_write+0x58>)
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	2517      	movs	r5, #23
 80027d6:	197c      	adds	r4, r7, r5
 80027d8:	2301      	movs	r3, #1
 80027da:	425b      	negs	r3, r3
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	f002 f87f 	bl	80048e0 <HAL_UART_Transmit>
 80027e2:	0003      	movs	r3, r0
 80027e4:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 80027e6:	197b      	adds	r3, r7, r5
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <_write+0x3e>
      return len;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	e008      	b.n	8002804 <_write+0x50>
    else
      return EIO;
 80027f2:	2305      	movs	r3, #5
 80027f4:	e006      	b.n	8002804 <_write+0x50>
  }
  errno = EBADF;
 80027f6:	f004 faa3 	bl	8006d40 <__errno>
 80027fa:	0003      	movs	r3, r0
 80027fc:	2209      	movs	r2, #9
 80027fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002800:	2301      	movs	r3, #1
 8002802:	425b      	negs	r3, r3
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	b006      	add	sp, #24
 800280a:	bdb0      	pop	{r4, r5, r7, pc}
 800280c:	200003dc 	.word	0x200003dc

08002810 <_close>:

int _close(int fd) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	db04      	blt.n	8002828 <_close+0x18>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b02      	cmp	r3, #2
 8002822:	dc01      	bgt.n	8002828 <_close+0x18>
    return 0;
 8002824:	2300      	movs	r3, #0
 8002826:	e006      	b.n	8002836 <_close+0x26>

  errno = EBADF;
 8002828:	f004 fa8a 	bl	8006d40 <__errno>
 800282c:	0003      	movs	r3, r0
 800282e:	2209      	movs	r2, #9
 8002830:	601a      	str	r2, [r3, #0]
  return -1;
 8002832:	2301      	movs	r3, #1
 8002834:	425b      	negs	r3, r3
}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	b002      	add	sp, #8
 800283c:	bd80      	pop	{r7, pc}

0800283e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800284a:	f004 fa79 	bl	8006d40 <__errno>
 800284e:	0003      	movs	r3, r0
 8002850:	2209      	movs	r2, #9
 8002852:	601a      	str	r2, [r3, #0]
  return -1;
 8002854:	2301      	movs	r3, #1
 8002856:	425b      	negs	r3, r3
}
 8002858:	0018      	movs	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	b004      	add	sp, #16
 800285e:	bd80      	pop	{r7, pc}

08002860 <_read>:

int _read(int fd, char* ptr, int len) {
 8002860:	b5b0      	push	{r4, r5, r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d113      	bne.n	800289a <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002872:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <_read+0x50>)
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	2517      	movs	r5, #23
 8002878:	197c      	adds	r4, r7, r5
 800287a:	2301      	movs	r3, #1
 800287c:	425b      	negs	r3, r3
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	2201      	movs	r2, #1
 8002882:	f002 f8c9 	bl	8004a18 <HAL_UART_Receive>
 8002886:	0003      	movs	r3, r0
 8002888:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 800288a:	197b      	adds	r3, r7, r5
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <_read+0x36>
      return 1;
 8002892:	2301      	movs	r3, #1
 8002894:	e008      	b.n	80028a8 <_read+0x48>
    else
      return EIO;
 8002896:	2305      	movs	r3, #5
 8002898:	e006      	b.n	80028a8 <_read+0x48>
  }
  errno = EBADF;
 800289a:	f004 fa51 	bl	8006d40 <__errno>
 800289e:	0003      	movs	r3, r0
 80028a0:	2209      	movs	r2, #9
 80028a2:	601a      	str	r2, [r3, #0]
  return -1;
 80028a4:	2301      	movs	r3, #1
 80028a6:	425b      	negs	r3, r3
}
 80028a8:	0018      	movs	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b006      	add	sp, #24
 80028ae:	bdb0      	pop	{r4, r5, r7, pc}
 80028b0:	200003dc 	.word	0x200003dc

080028b4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	db08      	blt.n	80028d6 <_fstat+0x22>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	dc05      	bgt.n	80028d6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2280      	movs	r2, #128	; 0x80
 80028ce:	0192      	lsls	r2, r2, #6
 80028d0:	605a      	str	r2, [r3, #4]
    return 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e005      	b.n	80028e2 <_fstat+0x2e>
  }

  errno = EBADF;
 80028d6:	f004 fa33 	bl	8006d40 <__errno>
 80028da:	0003      	movs	r3, r0
 80028dc:	2209      	movs	r2, #9
 80028de:	601a      	str	r2, [r3, #0]
  return 0;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	0018      	movs	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b002      	add	sp, #8
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f2:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <HAL_MspInit+0x44>)
 80028f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <HAL_MspInit+0x44>)
 80028f8:	2101      	movs	r1, #1
 80028fa:	430a      	orrs	r2, r1
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
 80028fe:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <HAL_MspInit+0x44>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	2201      	movs	r2, #1
 8002904:	4013      	ands	r3, r2
 8002906:	607b      	str	r3, [r7, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_MspInit+0x44>)
 800290c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <HAL_MspInit+0x44>)
 8002910:	2180      	movs	r1, #128	; 0x80
 8002912:	0549      	lsls	r1, r1, #21
 8002914:	430a      	orrs	r2, r1
 8002916:	63da      	str	r2, [r3, #60]	; 0x3c
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_MspInit+0x44>)
 800291a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	055b      	lsls	r3, r3, #21
 8002920:	4013      	ands	r3, r2
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	46bd      	mov	sp, r7
 800292a:	b002      	add	sp, #8
 800292c:	bd80      	pop	{r7, pc}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	40021000 	.word	0x40021000

08002934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b09d      	sub	sp, #116	; 0x74
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	235c      	movs	r3, #92	; 0x5c
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	0018      	movs	r0, r3
 8002942:	2314      	movs	r3, #20
 8002944:	001a      	movs	r2, r3
 8002946:	2100      	movs	r1, #0
 8002948:	f004 fa24 	bl	8006d94 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800294c:	2410      	movs	r4, #16
 800294e:	193b      	adds	r3, r7, r4
 8002950:	0018      	movs	r0, r3
 8002952:	234c      	movs	r3, #76	; 0x4c
 8002954:	001a      	movs	r2, r3
 8002956:	2100      	movs	r1, #0
 8002958:	f004 fa1c 	bl	8006d94 <memset>
  if(huart->Instance==USART2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a50      	ldr	r2, [pc, #320]	; (8002aa4 <HAL_UART_MspInit+0x170>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d000      	beq.n	8002968 <HAL_UART_MspInit+0x34>
 8002966:	e099      	b.n	8002a9c <HAL_UART_MspInit+0x168>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002968:	193b      	adds	r3, r7, r4
 800296a:	2202      	movs	r2, #2
 800296c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800296e:	193b      	adds	r3, r7, r4
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002974:	193b      	adds	r3, r7, r4
 8002976:	0018      	movs	r0, r3
 8002978:	f001 fd20 	bl	80043bc <HAL_RCCEx_PeriphCLKConfig>
 800297c:	1e03      	subs	r3, r0, #0
 800297e:	d001      	beq.n	8002984 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002980:	f7ff fee4 	bl	800274c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002984:	4b48      	ldr	r3, [pc, #288]	; (8002aa8 <HAL_UART_MspInit+0x174>)
 8002986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002988:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_UART_MspInit+0x174>)
 800298a:	2180      	movs	r1, #128	; 0x80
 800298c:	0289      	lsls	r1, r1, #10
 800298e:	430a      	orrs	r2, r1
 8002990:	63da      	str	r2, [r3, #60]	; 0x3c
 8002992:	4b45      	ldr	r3, [pc, #276]	; (8002aa8 <HAL_UART_MspInit+0x174>)
 8002994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	029b      	lsls	r3, r3, #10
 800299a:	4013      	ands	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a0:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_UART_MspInit+0x174>)
 80029a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029a4:	4b40      	ldr	r3, [pc, #256]	; (8002aa8 <HAL_UART_MspInit+0x174>)
 80029a6:	2101      	movs	r1, #1
 80029a8:	430a      	orrs	r2, r1
 80029aa:	635a      	str	r2, [r3, #52]	; 0x34
 80029ac:	4b3e      	ldr	r3, [pc, #248]	; (8002aa8 <HAL_UART_MspInit+0x174>)
 80029ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b0:	2201      	movs	r2, #1
 80029b2:	4013      	ands	r3, r2
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80029b8:	215c      	movs	r1, #92	; 0x5c
 80029ba:	187b      	adds	r3, r7, r1
 80029bc:	220c      	movs	r2, #12
 80029be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	187b      	adds	r3, r7, r1
 80029c2:	2202      	movs	r2, #2
 80029c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	187b      	adds	r3, r7, r1
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029cc:	187b      	adds	r3, r7, r1
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80029d2:	187b      	adds	r3, r7, r1
 80029d4:	2201      	movs	r2, #1
 80029d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d8:	187a      	adds	r2, r7, r1
 80029da:	23a0      	movs	r3, #160	; 0xa0
 80029dc:	05db      	lsls	r3, r3, #23
 80029de:	0011      	movs	r1, r2
 80029e0:	0018      	movs	r0, r3
 80029e2:	f000 fe0b 	bl	80035fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80029e6:	4b31      	ldr	r3, [pc, #196]	; (8002aac <HAL_UART_MspInit+0x178>)
 80029e8:	4a31      	ldr	r2, [pc, #196]	; (8002ab0 <HAL_UART_MspInit+0x17c>)
 80029ea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80029ec:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <HAL_UART_MspInit+0x178>)
 80029ee:	2234      	movs	r2, #52	; 0x34
 80029f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029f2:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <HAL_UART_MspInit+0x178>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029f8:	4b2c      	ldr	r3, [pc, #176]	; (8002aac <HAL_UART_MspInit+0x178>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029fe:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <HAL_UART_MspInit+0x178>)
 8002a00:	2280      	movs	r2, #128	; 0x80
 8002a02:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a04:	4b29      	ldr	r3, [pc, #164]	; (8002aac <HAL_UART_MspInit+0x178>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a0a:	4b28      	ldr	r3, [pc, #160]	; (8002aac <HAL_UART_MspInit+0x178>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002a10:	4b26      	ldr	r3, [pc, #152]	; (8002aac <HAL_UART_MspInit+0x178>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a16:	4b25      	ldr	r3, [pc, #148]	; (8002aac <HAL_UART_MspInit+0x178>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a1c:	4b23      	ldr	r3, [pc, #140]	; (8002aac <HAL_UART_MspInit+0x178>)
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f000 fa7a 	bl	8002f18 <HAL_DMA_Init>
 8002a24:	1e03      	subs	r3, r0, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8002a28:	f7ff fe90 	bl	800274c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2180      	movs	r1, #128	; 0x80
 8002a30:	4a1e      	ldr	r2, [pc, #120]	; (8002aac <HAL_UART_MspInit+0x178>)
 8002a32:	505a      	str	r2, [r3, r1]
 8002a34:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <HAL_UART_MspInit+0x178>)
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <HAL_UART_MspInit+0x180>)
 8002a3c:	4a1e      	ldr	r2, [pc, #120]	; (8002ab8 <HAL_UART_MspInit+0x184>)
 8002a3e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002a40:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <HAL_UART_MspInit+0x180>)
 8002a42:	2235      	movs	r2, #53	; 0x35
 8002a44:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a46:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <HAL_UART_MspInit+0x180>)
 8002a48:	2210      	movs	r2, #16
 8002a4a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a4c:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_UART_MspInit+0x180>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a52:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <HAL_UART_MspInit+0x180>)
 8002a54:	2280      	movs	r2, #128	; 0x80
 8002a56:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a58:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <HAL_UART_MspInit+0x180>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a5e:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <HAL_UART_MspInit+0x180>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002a64:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <HAL_UART_MspInit+0x180>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_UART_MspInit+0x180>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a70:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <HAL_UART_MspInit+0x180>)
 8002a72:	0018      	movs	r0, r3
 8002a74:	f000 fa50 	bl	8002f18 <HAL_DMA_Init>
 8002a78:	1e03      	subs	r3, r0, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_UART_MspInit+0x14c>
    {
      Error_Handler();
 8002a7c:	f7ff fe66 	bl	800274c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a0c      	ldr	r2, [pc, #48]	; (8002ab4 <HAL_UART_MspInit+0x180>)
 8002a84:	67da      	str	r2, [r3, #124]	; 0x7c
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_UART_MspInit+0x180>)
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2100      	movs	r1, #0
 8002a90:	201c      	movs	r0, #28
 8002a92:	f000 fa0f 	bl	8002eb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8002a96:	201c      	movs	r0, #28
 8002a98:	f000 fa21 	bl	8002ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b01d      	add	sp, #116	; 0x74
 8002aa2:	bd90      	pop	{r4, r7, pc}
 8002aa4:	40004400 	.word	0x40004400
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	200002e4 	.word	0x200002e4
 8002ab0:	40020008 	.word	0x40020008
 8002ab4:	20000344 	.word	0x20000344
 8002ab8:	4002001c 	.word	0x4002001c

08002abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <NMI_Handler+0x4>

08002ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ac6:	e7fe      	b.n	8002ac6 <HardFault_Handler+0x4>

08002ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002acc:	46c0      	nop			; (mov r8, r8)
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae0:	f000 f8fc 	bl	8002cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <DMA1_Channel1_IRQHandler+0x14>)
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 fc0a 	bl	800330c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002af8:	46c0      	nop			; (mov r8, r8)
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	200002e4 	.word	0x200002e4

08002b04 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 fbfe 	bl	800330c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002b10:	46c0      	nop			; (mov r8, r8)
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	20000344 	.word	0x20000344

08002b1c <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <USART2_LPUART2_IRQHandler+0x1c>)
 8002b22:	0018      	movs	r0, r3
 8002b24:	f002 f954 	bl	8004dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */
  UART_ASCII_IRQHandler(&huart2);
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <USART2_LPUART2_IRQHandler+0x1c>)
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f7ff fbe0 	bl	80022f0 <UART_ASCII_IRQHandler>
  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	20000250 	.word	0x20000250

08002b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b44:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <_sbrk+0x5c>)
 8002b46:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <_sbrk+0x60>)
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <_sbrk+0x64>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b58:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <_sbrk+0x64>)
 8002b5a:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <_sbrk+0x68>)
 8002b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b5e:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <_sbrk+0x64>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	18d3      	adds	r3, r2, r3
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d207      	bcs.n	8002b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b6c:	f004 f8e8 	bl	8006d40 <__errno>
 8002b70:	0003      	movs	r3, r0
 8002b72:	220c      	movs	r2, #12
 8002b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	425b      	negs	r3, r3
 8002b7a:	e009      	b.n	8002b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b7c:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <_sbrk+0x64>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b82:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <_sbrk+0x64>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	18d2      	adds	r2, r2, r3
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <_sbrk+0x64>)
 8002b8c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
}
 8002b90:	0018      	movs	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b006      	add	sp, #24
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20024000 	.word	0x20024000
 8002b9c:	00000400 	.word	0x00000400
 8002ba0:	200003e0 	.word	0x200003e0
 8002ba4:	200003f8 	.word	0x200003f8

08002ba8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bb4:	480d      	ldr	r0, [pc, #52]	; (8002bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bb6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002bb8:	f7ff fff6 	bl	8002ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bbc:	480c      	ldr	r0, [pc, #48]	; (8002bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bbe:	490d      	ldr	r1, [pc, #52]	; (8002bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bc0:	4a0d      	ldr	r2, [pc, #52]	; (8002bf8 <LoopForever+0xe>)
  movs r3, #0
 8002bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc4:	e002      	b.n	8002bcc <LoopCopyDataInit>

08002bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bca:	3304      	adds	r3, #4

08002bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd0:	d3f9      	bcc.n	8002bc6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bd4:	4c0a      	ldr	r4, [pc, #40]	; (8002c00 <LoopForever+0x16>)
  movs r3, #0
 8002bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd8:	e001      	b.n	8002bde <LoopFillZerobss>

08002bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bdc:	3204      	adds	r2, #4

08002bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be0:	d3fb      	bcc.n	8002bda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002be2:	f004 f8b3 	bl	8006d4c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002be6:	f7ff fbb9 	bl	800235c <main>

08002bea <LoopForever>:

LoopForever:
  b LoopForever
 8002bea:	e7fe      	b.n	8002bea <LoopForever>
  ldr   r0, =_estack
 8002bec:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf4:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8002bf8:	0800a594 	.word	0x0800a594
  ldr r2, =_sbss
 8002bfc:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8002c00:	200003f8 	.word	0x200003f8

08002c04 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c04:	e7fe      	b.n	8002c04 <ADC1_COMP_IRQHandler>
	...

08002c08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c0e:	1dfb      	adds	r3, r7, #7
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_Init+0x3c>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <HAL_Init+0x3c>)
 8002c1a:	2180      	movs	r1, #128	; 0x80
 8002c1c:	0049      	lsls	r1, r1, #1
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c22:	2000      	movs	r0, #0
 8002c24:	f000 f810 	bl	8002c48 <HAL_InitTick>
 8002c28:	1e03      	subs	r3, r0, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002c2c:	1dfb      	adds	r3, r7, #7
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	e001      	b.n	8002c38 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002c34:	f7ff fe5a 	bl	80028ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c38:	1dfb      	adds	r3, r7, #7
 8002c3a:	781b      	ldrb	r3, [r3, #0]
}
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b002      	add	sp, #8
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40022000 	.word	0x40022000

08002c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c50:	230f      	movs	r3, #15
 8002c52:	18fb      	adds	r3, r7, r3
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002c58:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <HAL_InitTick+0x88>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d02b      	beq.n	8002cb8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002c60:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <HAL_InitTick+0x8c>)
 8002c62:	681c      	ldr	r4, [r3, #0]
 8002c64:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <HAL_InitTick+0x88>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	0019      	movs	r1, r3
 8002c6a:	23fa      	movs	r3, #250	; 0xfa
 8002c6c:	0098      	lsls	r0, r3, #2
 8002c6e:	f7fd fa65 	bl	800013c <__udivsi3>
 8002c72:	0003      	movs	r3, r0
 8002c74:	0019      	movs	r1, r3
 8002c76:	0020      	movs	r0, r4
 8002c78:	f7fd fa60 	bl	800013c <__udivsi3>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f000 f93d 	bl	8002efe <HAL_SYSTICK_Config>
 8002c84:	1e03      	subs	r3, r0, #0
 8002c86:	d112      	bne.n	8002cae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d80a      	bhi.n	8002ca4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	2301      	movs	r3, #1
 8002c92:	425b      	negs	r3, r3
 8002c94:	2200      	movs	r2, #0
 8002c96:	0018      	movs	r0, r3
 8002c98:	f000 f90c 	bl	8002eb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c9c:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <HAL_InitTick+0x90>)
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e00d      	b.n	8002cc0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002ca4:	230f      	movs	r3, #15
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
 8002cac:	e008      	b.n	8002cc0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cae:	230f      	movs	r3, #15
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	e003      	b.n	8002cc0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cb8:	230f      	movs	r3, #15
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002cc0:	230f      	movs	r3, #15
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	781b      	ldrb	r3, [r3, #0]
}
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b005      	add	sp, #20
 8002ccc:	bd90      	pop	{r4, r7, pc}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	20000060 	.word	0x20000060
 8002cd4:	20000058 	.word	0x20000058
 8002cd8:	2000005c 	.word	0x2000005c

08002cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_IncTick+0x1c>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	001a      	movs	r2, r3
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_IncTick+0x20>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	18d2      	adds	r2, r2, r3
 8002cec:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <HAL_IncTick+0x20>)
 8002cee:	601a      	str	r2, [r3, #0]
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	20000060 	.word	0x20000060
 8002cfc:	200003e4 	.word	0x200003e4

08002d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  return uwTick;
 8002d04:	4b02      	ldr	r3, [pc, #8]	; (8002d10 <HAL_GetTick+0x10>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	200003e4 	.word	0x200003e4

08002d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d1c:	f7ff fff0 	bl	8002d00 <HAL_GetTick>
 8002d20:	0003      	movs	r3, r0
 8002d22:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	d005      	beq.n	8002d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <HAL_Delay+0x44>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	001a      	movs	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	189b      	adds	r3, r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	f7ff ffe0 	bl	8002d00 <HAL_GetTick>
 8002d40:	0002      	movs	r2, r0
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d8f7      	bhi.n	8002d3c <HAL_Delay+0x28>
  {
  }
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b004      	add	sp, #16
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	20000060 	.word	0x20000060

08002d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	0002      	movs	r2, r0
 8002d64:	1dfb      	adds	r3, r7, #7
 8002d66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d68:	1dfb      	adds	r3, r7, #7
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d6e:	d809      	bhi.n	8002d84 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d70:	1dfb      	adds	r3, r7, #7
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	001a      	movs	r2, r3
 8002d76:	231f      	movs	r3, #31
 8002d78:	401a      	ands	r2, r3
 8002d7a:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <__NVIC_EnableIRQ+0x30>)
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4091      	lsls	r1, r2
 8002d80:	000a      	movs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b002      	add	sp, #8
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	e000e100 	.word	0xe000e100

08002d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	0002      	movs	r2, r0
 8002d98:	6039      	str	r1, [r7, #0]
 8002d9a:	1dfb      	adds	r3, r7, #7
 8002d9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d9e:	1dfb      	adds	r3, r7, #7
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b7f      	cmp	r3, #127	; 0x7f
 8002da4:	d828      	bhi.n	8002df8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002da6:	4a2f      	ldr	r2, [pc, #188]	; (8002e64 <__NVIC_SetPriority+0xd4>)
 8002da8:	1dfb      	adds	r3, r7, #7
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	b25b      	sxtb	r3, r3
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	33c0      	adds	r3, #192	; 0xc0
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	589b      	ldr	r3, [r3, r2]
 8002db6:	1dfa      	adds	r2, r7, #7
 8002db8:	7812      	ldrb	r2, [r2, #0]
 8002dba:	0011      	movs	r1, r2
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	400a      	ands	r2, r1
 8002dc0:	00d2      	lsls	r2, r2, #3
 8002dc2:	21ff      	movs	r1, #255	; 0xff
 8002dc4:	4091      	lsls	r1, r2
 8002dc6:	000a      	movs	r2, r1
 8002dc8:	43d2      	mvns	r2, r2
 8002dca:	401a      	ands	r2, r3
 8002dcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	019b      	lsls	r3, r3, #6
 8002dd2:	22ff      	movs	r2, #255	; 0xff
 8002dd4:	401a      	ands	r2, r3
 8002dd6:	1dfb      	adds	r3, r7, #7
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	0018      	movs	r0, r3
 8002ddc:	2303      	movs	r3, #3
 8002dde:	4003      	ands	r3, r0
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002de4:	481f      	ldr	r0, [pc, #124]	; (8002e64 <__NVIC_SetPriority+0xd4>)
 8002de6:	1dfb      	adds	r3, r7, #7
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b25b      	sxtb	r3, r3
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	430a      	orrs	r2, r1
 8002df0:	33c0      	adds	r3, #192	; 0xc0
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002df6:	e031      	b.n	8002e5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002df8:	4a1b      	ldr	r2, [pc, #108]	; (8002e68 <__NVIC_SetPriority+0xd8>)
 8002dfa:	1dfb      	adds	r3, r7, #7
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	0019      	movs	r1, r3
 8002e00:	230f      	movs	r3, #15
 8002e02:	400b      	ands	r3, r1
 8002e04:	3b08      	subs	r3, #8
 8002e06:	089b      	lsrs	r3, r3, #2
 8002e08:	3306      	adds	r3, #6
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	18d3      	adds	r3, r2, r3
 8002e0e:	3304      	adds	r3, #4
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	1dfa      	adds	r2, r7, #7
 8002e14:	7812      	ldrb	r2, [r2, #0]
 8002e16:	0011      	movs	r1, r2
 8002e18:	2203      	movs	r2, #3
 8002e1a:	400a      	ands	r2, r1
 8002e1c:	00d2      	lsls	r2, r2, #3
 8002e1e:	21ff      	movs	r1, #255	; 0xff
 8002e20:	4091      	lsls	r1, r2
 8002e22:	000a      	movs	r2, r1
 8002e24:	43d2      	mvns	r2, r2
 8002e26:	401a      	ands	r2, r3
 8002e28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	019b      	lsls	r3, r3, #6
 8002e2e:	22ff      	movs	r2, #255	; 0xff
 8002e30:	401a      	ands	r2, r3
 8002e32:	1dfb      	adds	r3, r7, #7
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	0018      	movs	r0, r3
 8002e38:	2303      	movs	r3, #3
 8002e3a:	4003      	ands	r3, r0
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e40:	4809      	ldr	r0, [pc, #36]	; (8002e68 <__NVIC_SetPriority+0xd8>)
 8002e42:	1dfb      	adds	r3, r7, #7
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	001c      	movs	r4, r3
 8002e48:	230f      	movs	r3, #15
 8002e4a:	4023      	ands	r3, r4
 8002e4c:	3b08      	subs	r3, #8
 8002e4e:	089b      	lsrs	r3, r3, #2
 8002e50:	430a      	orrs	r2, r1
 8002e52:	3306      	adds	r3, #6
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	18c3      	adds	r3, r0, r3
 8002e58:	3304      	adds	r3, #4
 8002e5a:	601a      	str	r2, [r3, #0]
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b003      	add	sp, #12
 8002e62:	bd90      	pop	{r4, r7, pc}
 8002e64:	e000e100 	.word	0xe000e100
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	1e5a      	subs	r2, r3, #1
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	045b      	lsls	r3, r3, #17
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d301      	bcc.n	8002e84 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e80:	2301      	movs	r3, #1
 8002e82:	e010      	b.n	8002ea6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e84:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <SysTick_Config+0x44>)
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	3a01      	subs	r2, #1
 8002e8a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	425b      	negs	r3, r3
 8002e90:	2103      	movs	r1, #3
 8002e92:	0018      	movs	r0, r3
 8002e94:	f7ff ff7c 	bl	8002d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <SysTick_Config+0x44>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e9e:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <SysTick_Config+0x44>)
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b002      	add	sp, #8
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	e000e010 	.word	0xe000e010

08002eb4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	210f      	movs	r1, #15
 8002ec0:	187b      	adds	r3, r7, r1
 8002ec2:	1c02      	adds	r2, r0, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	187b      	adds	r3, r7, r1
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	b25b      	sxtb	r3, r3
 8002ece:	0011      	movs	r1, r2
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f7ff ff5d 	bl	8002d90 <__NVIC_SetPriority>
}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b004      	add	sp, #16
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	1dfb      	adds	r3, r7, #7
 8002ee8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eea:	1dfb      	adds	r3, r7, #7
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	b25b      	sxtb	r3, r3
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f7ff ff33 	bl	8002d5c <__NVIC_EnableIRQ>
}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b002      	add	sp, #8
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f7ff ffaf 	bl	8002e6c <SysTick_Config>
 8002f0e:	0003      	movs	r3, r0
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b002      	add	sp, #8
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e091      	b.n	800304e <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	001a      	movs	r2, r3
 8002f30:	4b49      	ldr	r3, [pc, #292]	; (8003058 <HAL_DMA_Init+0x140>)
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d810      	bhi.n	8002f58 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a48      	ldr	r2, [pc, #288]	; (800305c <HAL_DMA_Init+0x144>)
 8002f3c:	4694      	mov	ip, r2
 8002f3e:	4463      	add	r3, ip
 8002f40:	2114      	movs	r1, #20
 8002f42:	0018      	movs	r0, r3
 8002f44:	f7fd f8fa 	bl	800013c <__udivsi3>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	009a      	lsls	r2, r3, #2
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a43      	ldr	r2, [pc, #268]	; (8003060 <HAL_DMA_Init+0x148>)
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
 8002f56:	e00f      	b.n	8002f78 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a41      	ldr	r2, [pc, #260]	; (8003064 <HAL_DMA_Init+0x14c>)
 8002f5e:	4694      	mov	ip, r2
 8002f60:	4463      	add	r3, ip
 8002f62:	2114      	movs	r1, #20
 8002f64:	0018      	movs	r0, r3
 8002f66:	f7fd f8e9 	bl	800013c <__udivsi3>
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	009a      	lsls	r2, r3, #2
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a3c      	ldr	r2, [pc, #240]	; (8003068 <HAL_DMA_Init+0x150>)
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2225      	movs	r2, #37	; 0x25
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4938      	ldr	r1, [pc, #224]	; (800306c <HAL_DMA_Init+0x154>)
 8002f8c:	400a      	ands	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6819      	ldr	r1, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f000 faa9 	bl	8003520 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	01db      	lsls	r3, r3, #7
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d102      	bne.n	8002fe0 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe8:	217f      	movs	r1, #127	; 0x7f
 8002fea:	400a      	ands	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ff6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d011      	beq.n	8003024 <HAL_DMA_Init+0x10c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b04      	cmp	r3, #4
 8003006:	d80d      	bhi.n	8003024 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	0018      	movs	r0, r3
 800300c:	f000 fad2 	bl	80035b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	e008      	b.n	8003036 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2225      	movs	r2, #37	; 0x25
 8003040:	2101      	movs	r1, #1
 8003042:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2224      	movs	r2, #36	; 0x24
 8003048:	2100      	movs	r1, #0
 800304a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	0018      	movs	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	b002      	add	sp, #8
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	40020407 	.word	0x40020407
 800305c:	bffdfff8 	.word	0xbffdfff8
 8003060:	40020000 	.word	0x40020000
 8003064:	bffdfbf8 	.word	0xbffdfbf8
 8003068:	40020400 	.word	0x40020400
 800306c:	ffff800f 	.word	0xffff800f

08003070 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307e:	2317      	movs	r3, #23
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	2200      	movs	r2, #0
 8003084:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2224      	movs	r2, #36	; 0x24
 800308a:	5c9b      	ldrb	r3, [r3, r2]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_DMA_Start_IT+0x24>
 8003090:	2302      	movs	r3, #2
 8003092:	e06f      	b.n	8003174 <HAL_DMA_Start_IT+0x104>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2224      	movs	r2, #36	; 0x24
 8003098:	2101      	movs	r1, #1
 800309a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2225      	movs	r2, #37	; 0x25
 80030a0:	5c9b      	ldrb	r3, [r3, r2]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d157      	bne.n	8003158 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2225      	movs	r2, #37	; 0x25
 80030ac:	2102      	movs	r1, #2
 80030ae:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2101      	movs	r1, #1
 80030c2:	438a      	bics	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 f9eb 	bl	80034a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d008      	beq.n	80030ec <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	210e      	movs	r1, #14
 80030e6:	430a      	orrs	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	e00f      	b.n	800310c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2104      	movs	r1, #4
 80030f8:	438a      	bics	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	210a      	movs	r1, #10
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	025b      	lsls	r3, r3, #9
 8003116:	4013      	ands	r3, r2
 8003118:	d008      	beq.n	800312c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003124:	2180      	movs	r1, #128	; 0x80
 8003126:	0049      	lsls	r1, r1, #1
 8003128:	430a      	orrs	r2, r1
 800312a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	2180      	movs	r1, #128	; 0x80
 8003140:	0049      	lsls	r1, r1, #1
 8003142:	430a      	orrs	r2, r1
 8003144:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2101      	movs	r1, #1
 8003152:	430a      	orrs	r2, r1
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	e00a      	b.n	800316e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2280      	movs	r2, #128	; 0x80
 800315c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2224      	movs	r2, #36	; 0x24
 8003162:	2100      	movs	r1, #0
 8003164:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003166:	2317      	movs	r3, #23
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	2201      	movs	r2, #1
 800316c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800316e:	2317      	movs	r3, #23
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	781b      	ldrb	r3, [r3, #0]
}
 8003174:	0018      	movs	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	b006      	add	sp, #24
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e04f      	b.n	800322e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2225      	movs	r2, #37	; 0x25
 8003192:	5c9b      	ldrb	r3, [r3, r2]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d008      	beq.n	80031ac <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2204      	movs	r2, #4
 800319e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2224      	movs	r2, #36	; 0x24
 80031a4:	2100      	movs	r1, #0
 80031a6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e040      	b.n	800322e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	210e      	movs	r1, #14
 80031b8:	438a      	bics	r2, r1
 80031ba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c6:	491c      	ldr	r1, [pc, #112]	; (8003238 <HAL_DMA_Abort+0xbc>)
 80031c8:	400a      	ands	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2101      	movs	r1, #1
 80031d8:	438a      	bics	r2, r1
 80031da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e0:	221c      	movs	r2, #28
 80031e2:	401a      	ands	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	2101      	movs	r1, #1
 80031ea:	4091      	lsls	r1, r2
 80031ec:	000a      	movs	r2, r1
 80031ee:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00c      	beq.n	800321c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	490a      	ldr	r1, [pc, #40]	; (8003238 <HAL_DMA_Abort+0xbc>)
 800320e:	400a      	ands	r2, r1
 8003210:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800321a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2225      	movs	r2, #37	; 0x25
 8003220:	2101      	movs	r1, #1
 8003222:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2224      	movs	r2, #36	; 0x24
 8003228:	2100      	movs	r1, #0
 800322a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	0018      	movs	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	b002      	add	sp, #8
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	fffffeff 	.word	0xfffffeff

0800323c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003244:	210f      	movs	r1, #15
 8003246:	187b      	adds	r3, r7, r1
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2225      	movs	r2, #37	; 0x25
 8003250:	5c9b      	ldrb	r3, [r3, r2]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d006      	beq.n	8003266 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2204      	movs	r2, #4
 800325c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800325e:	187b      	adds	r3, r7, r1
 8003260:	2201      	movs	r2, #1
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	e048      	b.n	80032f8 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	210e      	movs	r1, #14
 8003272:	438a      	bics	r2, r1
 8003274:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2101      	movs	r1, #1
 8003282:	438a      	bics	r2, r1
 8003284:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003290:	491d      	ldr	r1, [pc, #116]	; (8003308 <HAL_DMA_Abort_IT+0xcc>)
 8003292:	400a      	ands	r2, r1
 8003294:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	221c      	movs	r2, #28
 800329c:	401a      	ands	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2101      	movs	r1, #1
 80032a4:	4091      	lsls	r1, r2
 80032a6:	000a      	movs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032b2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00c      	beq.n	80032d6 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c6:	4910      	ldr	r1, [pc, #64]	; (8003308 <HAL_DMA_Abort_IT+0xcc>)
 80032c8:	400a      	ands	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032d4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2225      	movs	r2, #37	; 0x25
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2224      	movs	r2, #36	; 0x24
 80032e2:	2100      	movs	r1, #0
 80032e4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d004      	beq.n	80032f8 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	0010      	movs	r0, r2
 80032f6:	4798      	blx	r3
    }
  }
  return status;
 80032f8:	230f      	movs	r3, #15
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	781b      	ldrb	r3, [r3, #0]
}
 80032fe:	0018      	movs	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	b004      	add	sp, #16
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	fffffeff 	.word	0xfffffeff

0800330c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	221c      	movs	r2, #28
 800332a:	4013      	ands	r3, r2
 800332c:	2204      	movs	r2, #4
 800332e:	409a      	lsls	r2, r3
 8003330:	0013      	movs	r3, r2
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4013      	ands	r3, r2
 8003336:	d026      	beq.n	8003386 <HAL_DMA_IRQHandler+0x7a>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2204      	movs	r2, #4
 800333c:	4013      	ands	r3, r2
 800333e:	d022      	beq.n	8003386 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2220      	movs	r2, #32
 8003348:	4013      	ands	r3, r2
 800334a:	d107      	bne.n	800335c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2104      	movs	r1, #4
 8003358:	438a      	bics	r2, r1
 800335a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003360:	221c      	movs	r2, #28
 8003362:	401a      	ands	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	2104      	movs	r1, #4
 800336a:	4091      	lsls	r1, r2
 800336c:	000a      	movs	r2, r1
 800336e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	2b00      	cmp	r3, #0
 8003376:	d100      	bne.n	800337a <HAL_DMA_IRQHandler+0x6e>
 8003378:	e080      	b.n	800347c <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	0010      	movs	r0, r2
 8003382:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003384:	e07a      	b.n	800347c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	221c      	movs	r2, #28
 800338c:	4013      	ands	r3, r2
 800338e:	2202      	movs	r2, #2
 8003390:	409a      	lsls	r2, r3
 8003392:	0013      	movs	r3, r2
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4013      	ands	r3, r2
 8003398:	d03c      	beq.n	8003414 <HAL_DMA_IRQHandler+0x108>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2202      	movs	r2, #2
 800339e:	4013      	ands	r3, r2
 80033a0:	d038      	beq.n	8003414 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2220      	movs	r2, #32
 80033aa:	4013      	ands	r3, r2
 80033ac:	d10b      	bne.n	80033c6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	210a      	movs	r1, #10
 80033ba:	438a      	bics	r2, r1
 80033bc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2225      	movs	r2, #37	; 0x25
 80033c2:	2101      	movs	r1, #1
 80033c4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	001a      	movs	r2, r3
 80033cc:	4b2e      	ldr	r3, [pc, #184]	; (8003488 <HAL_DMA_IRQHandler+0x17c>)
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d909      	bls.n	80033e6 <HAL_DMA_IRQHandler+0xda>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	221c      	movs	r2, #28
 80033d8:	401a      	ands	r2, r3
 80033da:	4b2c      	ldr	r3, [pc, #176]	; (800348c <HAL_DMA_IRQHandler+0x180>)
 80033dc:	2102      	movs	r1, #2
 80033de:	4091      	lsls	r1, r2
 80033e0:	000a      	movs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
 80033e4:	e008      	b.n	80033f8 <HAL_DMA_IRQHandler+0xec>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	221c      	movs	r2, #28
 80033ec:	401a      	ands	r2, r3
 80033ee:	4b28      	ldr	r3, [pc, #160]	; (8003490 <HAL_DMA_IRQHandler+0x184>)
 80033f0:	2102      	movs	r1, #2
 80033f2:	4091      	lsls	r1, r2
 80033f4:	000a      	movs	r2, r1
 80033f6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2224      	movs	r2, #36	; 0x24
 80033fc:	2100      	movs	r1, #0
 80033fe:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d039      	beq.n	800347c <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	0010      	movs	r0, r2
 8003410:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003412:	e033      	b.n	800347c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	221c      	movs	r2, #28
 800341a:	4013      	ands	r3, r2
 800341c:	2208      	movs	r2, #8
 800341e:	409a      	lsls	r2, r3
 8003420:	0013      	movs	r3, r2
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4013      	ands	r3, r2
 8003426:	d02a      	beq.n	800347e <HAL_DMA_IRQHandler+0x172>
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2208      	movs	r2, #8
 800342c:	4013      	ands	r3, r2
 800342e:	d026      	beq.n	800347e <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	210e      	movs	r1, #14
 800343c:	438a      	bics	r2, r1
 800343e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	221c      	movs	r2, #28
 8003446:	401a      	ands	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	2101      	movs	r1, #1
 800344e:	4091      	lsls	r1, r2
 8003450:	000a      	movs	r2, r1
 8003452:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2225      	movs	r2, #37	; 0x25
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2224      	movs	r2, #36	; 0x24
 8003466:	2100      	movs	r1, #0
 8003468:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	0010      	movs	r0, r2
 800347a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46c0      	nop			; (mov r8, r8)
}
 8003480:	46bd      	mov	sp, r7
 8003482:	b004      	add	sp, #16
 8003484:	bd80      	pop	{r7, pc}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	40020080 	.word	0x40020080
 800348c:	40020400 	.word	0x40020400
 8003490:	40020000 	.word	0x40020000

08003494 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80034a0:	0018      	movs	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b002      	add	sp, #8
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d004      	beq.n	80034d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80034d0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	221c      	movs	r2, #28
 80034d8:	401a      	ands	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	2101      	movs	r1, #1
 80034e0:	4091      	lsls	r1, r2
 80034e2:	000a      	movs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b10      	cmp	r3, #16
 80034f4:	d108      	bne.n	8003508 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003506:	e007      	b.n	8003518 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	60da      	str	r2, [r3, #12]
}
 8003518:	46c0      	nop			; (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b004      	add	sp, #16
 800351e:	bd80      	pop	{r7, pc}

08003520 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	001a      	movs	r2, r3
 800352e:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003530:	429a      	cmp	r2, r3
 8003532:	d814      	bhi.n	800355e <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4a1a      	ldr	r2, [pc, #104]	; (80035a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800353e:	189a      	adds	r2, r3, r2
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	001a      	movs	r2, r3
 800354a:	23ff      	movs	r3, #255	; 0xff
 800354c:	4013      	ands	r3, r2
 800354e:	3b08      	subs	r3, #8
 8003550:	2114      	movs	r1, #20
 8003552:	0018      	movs	r0, r3
 8003554:	f7fc fdf2 	bl	800013c <__udivsi3>
 8003558:	0003      	movs	r3, r0
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	e014      	b.n	8003588 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	089b      	lsrs	r3, r3, #2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4a11      	ldr	r2, [pc, #68]	; (80035ac <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003568:	189a      	adds	r2, r3, r2
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	001a      	movs	r2, r3
 8003574:	23ff      	movs	r3, #255	; 0xff
 8003576:	4013      	ands	r3, r2
 8003578:	3b08      	subs	r3, #8
 800357a:	2114      	movs	r1, #20
 800357c:	0018      	movs	r0, r3
 800357e:	f7fc fddd 	bl	800013c <__udivsi3>
 8003582:	0003      	movs	r3, r0
 8003584:	3307      	adds	r3, #7
 8003586:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a09      	ldr	r2, [pc, #36]	; (80035b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 800358c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	221f      	movs	r2, #31
 8003592:	4013      	ands	r3, r2
 8003594:	2201      	movs	r2, #1
 8003596:	409a      	lsls	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b004      	add	sp, #16
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40020407 	.word	0x40020407
 80035a8:	40020800 	.word	0x40020800
 80035ac:	4002081c 	.word	0x4002081c
 80035b0:	40020880 	.word	0x40020880

080035b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	227f      	movs	r2, #127	; 0x7f
 80035c2:	4013      	ands	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80035ca:	4694      	mov	ip, r2
 80035cc:	4463      	add	r3, ip
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	001a      	movs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a07      	ldr	r2, [pc, #28]	; (80035f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80035da:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3b01      	subs	r3, #1
 80035e0:	2203      	movs	r2, #3
 80035e2:	4013      	ands	r3, r2
 80035e4:	2201      	movs	r2, #1
 80035e6:	409a      	lsls	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b004      	add	sp, #16
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	1000823f 	.word	0x1000823f
 80035f8:	40020940 	.word	0x40020940

080035fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800360a:	e14d      	b.n	80038a8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2101      	movs	r1, #1
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4091      	lsls	r1, r2
 8003616:	000a      	movs	r2, r1
 8003618:	4013      	ands	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d100      	bne.n	8003624 <HAL_GPIO_Init+0x28>
 8003622:	e13e      	b.n	80038a2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2203      	movs	r2, #3
 800362a:	4013      	ands	r3, r2
 800362c:	2b01      	cmp	r3, #1
 800362e:	d005      	beq.n	800363c <HAL_GPIO_Init+0x40>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2203      	movs	r2, #3
 8003636:	4013      	ands	r3, r2
 8003638:	2b02      	cmp	r3, #2
 800363a:	d130      	bne.n	800369e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	2203      	movs	r2, #3
 8003648:	409a      	lsls	r2, r3
 800364a:	0013      	movs	r3, r2
 800364c:	43da      	mvns	r2, r3
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4013      	ands	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	409a      	lsls	r2, r3
 800365e:	0013      	movs	r3, r2
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003672:	2201      	movs	r2, #1
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	409a      	lsls	r2, r3
 8003678:	0013      	movs	r3, r2
 800367a:	43da      	mvns	r2, r3
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	2201      	movs	r2, #1
 800368a:	401a      	ands	r2, r3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	409a      	lsls	r2, r3
 8003690:	0013      	movs	r3, r2
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2203      	movs	r2, #3
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d017      	beq.n	80036da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	2203      	movs	r2, #3
 80036b6:	409a      	lsls	r2, r3
 80036b8:	0013      	movs	r3, r2
 80036ba:	43da      	mvns	r2, r3
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4013      	ands	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	409a      	lsls	r2, r3
 80036cc:	0013      	movs	r3, r2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2203      	movs	r2, #3
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d123      	bne.n	800372e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	08da      	lsrs	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3208      	adds	r2, #8
 80036ee:	0092      	lsls	r2, r2, #2
 80036f0:	58d3      	ldr	r3, [r2, r3]
 80036f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2207      	movs	r2, #7
 80036f8:	4013      	ands	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	220f      	movs	r2, #15
 80036fe:	409a      	lsls	r2, r3
 8003700:	0013      	movs	r3, r2
 8003702:	43da      	mvns	r2, r3
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2107      	movs	r1, #7
 8003712:	400b      	ands	r3, r1
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	409a      	lsls	r2, r3
 8003718:	0013      	movs	r3, r2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	08da      	lsrs	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3208      	adds	r2, #8
 8003728:	0092      	lsls	r2, r2, #2
 800372a:	6939      	ldr	r1, [r7, #16]
 800372c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	2203      	movs	r2, #3
 800373a:	409a      	lsls	r2, r3
 800373c:	0013      	movs	r3, r2
 800373e:	43da      	mvns	r2, r3
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4013      	ands	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2203      	movs	r2, #3
 800374c:	401a      	ands	r2, r3
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	409a      	lsls	r2, r3
 8003754:	0013      	movs	r3, r2
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	23c0      	movs	r3, #192	; 0xc0
 8003768:	029b      	lsls	r3, r3, #10
 800376a:	4013      	ands	r3, r2
 800376c:	d100      	bne.n	8003770 <HAL_GPIO_Init+0x174>
 800376e:	e098      	b.n	80038a2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003770:	4a53      	ldr	r2, [pc, #332]	; (80038c0 <HAL_GPIO_Init+0x2c4>)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	089b      	lsrs	r3, r3, #2
 8003776:	3318      	adds	r3, #24
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	589b      	ldr	r3, [r3, r2]
 800377c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2203      	movs	r2, #3
 8003782:	4013      	ands	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	220f      	movs	r2, #15
 8003788:	409a      	lsls	r2, r3
 800378a:	0013      	movs	r3, r2
 800378c:	43da      	mvns	r2, r3
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	23a0      	movs	r3, #160	; 0xa0
 8003798:	05db      	lsls	r3, r3, #23
 800379a:	429a      	cmp	r2, r3
 800379c:	d019      	beq.n	80037d2 <HAL_GPIO_Init+0x1d6>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a48      	ldr	r2, [pc, #288]	; (80038c4 <HAL_GPIO_Init+0x2c8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d013      	beq.n	80037ce <HAL_GPIO_Init+0x1d2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a47      	ldr	r2, [pc, #284]	; (80038c8 <HAL_GPIO_Init+0x2cc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00d      	beq.n	80037ca <HAL_GPIO_Init+0x1ce>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a46      	ldr	r2, [pc, #280]	; (80038cc <HAL_GPIO_Init+0x2d0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d007      	beq.n	80037c6 <HAL_GPIO_Init+0x1ca>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a45      	ldr	r2, [pc, #276]	; (80038d0 <HAL_GPIO_Init+0x2d4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d101      	bne.n	80037c2 <HAL_GPIO_Init+0x1c6>
 80037be:	2304      	movs	r3, #4
 80037c0:	e008      	b.n	80037d4 <HAL_GPIO_Init+0x1d8>
 80037c2:	2305      	movs	r3, #5
 80037c4:	e006      	b.n	80037d4 <HAL_GPIO_Init+0x1d8>
 80037c6:	2303      	movs	r3, #3
 80037c8:	e004      	b.n	80037d4 <HAL_GPIO_Init+0x1d8>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e002      	b.n	80037d4 <HAL_GPIO_Init+0x1d8>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <HAL_GPIO_Init+0x1d8>
 80037d2:	2300      	movs	r3, #0
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	2103      	movs	r1, #3
 80037d8:	400a      	ands	r2, r1
 80037da:	00d2      	lsls	r2, r2, #3
 80037dc:	4093      	lsls	r3, r2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80037e4:	4936      	ldr	r1, [pc, #216]	; (80038c0 <HAL_GPIO_Init+0x2c4>)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	089b      	lsrs	r3, r3, #2
 80037ea:	3318      	adds	r3, #24
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037f2:	4b33      	ldr	r3, [pc, #204]	; (80038c0 <HAL_GPIO_Init+0x2c4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	43da      	mvns	r2, r3
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	2380      	movs	r3, #128	; 0x80
 8003808:	035b      	lsls	r3, r3, #13
 800380a:	4013      	ands	r3, r2
 800380c:	d003      	beq.n	8003816 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003816:	4b2a      	ldr	r3, [pc, #168]	; (80038c0 <HAL_GPIO_Init+0x2c4>)
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800381c:	4b28      	ldr	r3, [pc, #160]	; (80038c0 <HAL_GPIO_Init+0x2c4>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	43da      	mvns	r2, r3
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	039b      	lsls	r3, r3, #14
 8003834:	4013      	ands	r3, r2
 8003836:	d003      	beq.n	8003840 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003840:	4b1f      	ldr	r3, [pc, #124]	; (80038c0 <HAL_GPIO_Init+0x2c4>)
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003846:	4a1e      	ldr	r2, [pc, #120]	; (80038c0 <HAL_GPIO_Init+0x2c4>)
 8003848:	2384      	movs	r3, #132	; 0x84
 800384a:	58d3      	ldr	r3, [r2, r3]
 800384c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	43da      	mvns	r2, r3
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4013      	ands	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	029b      	lsls	r3, r3, #10
 8003860:	4013      	ands	r3, r2
 8003862:	d003      	beq.n	800386c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800386c:	4914      	ldr	r1, [pc, #80]	; (80038c0 <HAL_GPIO_Init+0x2c4>)
 800386e:	2284      	movs	r2, #132	; 0x84
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003874:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <HAL_GPIO_Init+0x2c4>)
 8003876:	2380      	movs	r3, #128	; 0x80
 8003878:	58d3      	ldr	r3, [r2, r3]
 800387a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	43da      	mvns	r2, r3
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	2380      	movs	r3, #128	; 0x80
 800388c:	025b      	lsls	r3, r3, #9
 800388e:	4013      	ands	r3, r2
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800389a:	4909      	ldr	r1, [pc, #36]	; (80038c0 <HAL_GPIO_Init+0x2c4>)
 800389c:	2280      	movs	r2, #128	; 0x80
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	3301      	adds	r3, #1
 80038a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	40da      	lsrs	r2, r3
 80038b0:	1e13      	subs	r3, r2, #0
 80038b2:	d000      	beq.n	80038b6 <HAL_GPIO_Init+0x2ba>
 80038b4:	e6aa      	b.n	800360c <HAL_GPIO_Init+0x10>
  }
}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	46c0      	nop			; (mov r8, r8)
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b006      	add	sp, #24
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40021800 	.word	0x40021800
 80038c4:	50000400 	.word	0x50000400
 80038c8:	50000800 	.word	0x50000800
 80038cc:	50000c00 	.word	0x50000c00
 80038d0:	50001000 	.word	0x50001000

080038d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	0008      	movs	r0, r1
 80038de:	0011      	movs	r1, r2
 80038e0:	1cbb      	adds	r3, r7, #2
 80038e2:	1c02      	adds	r2, r0, #0
 80038e4:	801a      	strh	r2, [r3, #0]
 80038e6:	1c7b      	adds	r3, r7, #1
 80038e8:	1c0a      	adds	r2, r1, #0
 80038ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038ec:	1c7b      	adds	r3, r7, #1
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d004      	beq.n	80038fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038f4:	1cbb      	adds	r3, r7, #2
 80038f6:	881a      	ldrh	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038fc:	e003      	b.n	8003906 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038fe:	1cbb      	adds	r3, r7, #2
 8003900:	881a      	ldrh	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	46bd      	mov	sp, r7
 800390a:	b002      	add	sp, #8
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a19      	ldr	r2, [pc, #100]	; (8003984 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800391e:	4013      	ands	r3, r2
 8003920:	0019      	movs	r1, r3
 8003922:	4b17      	ldr	r3, [pc, #92]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	430a      	orrs	r2, r1
 8003928:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	429a      	cmp	r2, r3
 8003932:	d11f      	bne.n	8003974 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003934:	4b14      	ldr	r3, [pc, #80]	; (8003988 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	0013      	movs	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	189b      	adds	r3, r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	4912      	ldr	r1, [pc, #72]	; (800398c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003942:	0018      	movs	r0, r3
 8003944:	f7fc fbfa 	bl	800013c <__udivsi3>
 8003948:	0003      	movs	r3, r0
 800394a:	3301      	adds	r3, #1
 800394c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800394e:	e008      	b.n	8003962 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3b01      	subs	r3, #1
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	e001      	b.n	8003962 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e009      	b.n	8003976 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003962:	4b07      	ldr	r3, [pc, #28]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	401a      	ands	r2, r3
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	429a      	cmp	r2, r3
 8003972:	d0ed      	beq.n	8003950 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	0018      	movs	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	b004      	add	sp, #16
 800397c:	bd80      	pop	{r7, pc}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	40007000 	.word	0x40007000
 8003984:	fffff9ff 	.word	0xfffff9ff
 8003988:	20000058 	.word	0x20000058
 800398c:	000f4240 	.word	0x000f4240

08003990 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003994:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	23e0      	movs	r3, #224	; 0xe0
 800399a:	01db      	lsls	r3, r3, #7
 800399c:	4013      	ands	r3, r2
}
 800399e:	0018      	movs	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40021000 	.word	0x40021000

080039a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d102      	bne.n	80039bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	f000 fb50 	bl	800405c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2201      	movs	r2, #1
 80039c2:	4013      	ands	r3, r2
 80039c4:	d100      	bne.n	80039c8 <HAL_RCC_OscConfig+0x20>
 80039c6:	e07c      	b.n	8003ac2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039c8:	4bc3      	ldr	r3, [pc, #780]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2238      	movs	r2, #56	; 0x38
 80039ce:	4013      	ands	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039d2:	4bc1      	ldr	r3, [pc, #772]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2203      	movs	r2, #3
 80039d8:	4013      	ands	r3, r2
 80039da:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b10      	cmp	r3, #16
 80039e0:	d102      	bne.n	80039e8 <HAL_RCC_OscConfig+0x40>
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d002      	beq.n	80039ee <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d10b      	bne.n	8003a06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ee:	4bba      	ldr	r3, [pc, #744]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	029b      	lsls	r3, r3, #10
 80039f6:	4013      	ands	r3, r2
 80039f8:	d062      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x118>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d15e      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e32a      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	2380      	movs	r3, #128	; 0x80
 8003a0c:	025b      	lsls	r3, r3, #9
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d107      	bne.n	8003a22 <HAL_RCC_OscConfig+0x7a>
 8003a12:	4bb1      	ldr	r3, [pc, #708]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4bb0      	ldr	r3, [pc, #704]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003a18:	2180      	movs	r1, #128	; 0x80
 8003a1a:	0249      	lsls	r1, r1, #9
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	e020      	b.n	8003a64 <HAL_RCC_OscConfig+0xbc>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	23a0      	movs	r3, #160	; 0xa0
 8003a28:	02db      	lsls	r3, r3, #11
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d10e      	bne.n	8003a4c <HAL_RCC_OscConfig+0xa4>
 8003a2e:	4baa      	ldr	r3, [pc, #680]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4ba9      	ldr	r3, [pc, #676]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003a34:	2180      	movs	r1, #128	; 0x80
 8003a36:	02c9      	lsls	r1, r1, #11
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	4ba6      	ldr	r3, [pc, #664]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4ba5      	ldr	r3, [pc, #660]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003a42:	2180      	movs	r1, #128	; 0x80
 8003a44:	0249      	lsls	r1, r1, #9
 8003a46:	430a      	orrs	r2, r1
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	e00b      	b.n	8003a64 <HAL_RCC_OscConfig+0xbc>
 8003a4c:	4ba2      	ldr	r3, [pc, #648]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4ba1      	ldr	r3, [pc, #644]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003a52:	49a2      	ldr	r1, [pc, #648]	; (8003cdc <HAL_RCC_OscConfig+0x334>)
 8003a54:	400a      	ands	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	4b9f      	ldr	r3, [pc, #636]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4b9e      	ldr	r3, [pc, #632]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003a5e:	49a0      	ldr	r1, [pc, #640]	; (8003ce0 <HAL_RCC_OscConfig+0x338>)
 8003a60:	400a      	ands	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d014      	beq.n	8003a96 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7ff f948 	bl	8002d00 <HAL_GetTick>
 8003a70:	0003      	movs	r3, r0
 8003a72:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a76:	f7ff f943 	bl	8002d00 <HAL_GetTick>
 8003a7a:	0002      	movs	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b64      	cmp	r3, #100	; 0x64
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e2e9      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a88:	4b93      	ldr	r3, [pc, #588]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	2380      	movs	r3, #128	; 0x80
 8003a8e:	029b      	lsls	r3, r3, #10
 8003a90:	4013      	ands	r3, r2
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0xce>
 8003a94:	e015      	b.n	8003ac2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a96:	f7ff f933 	bl	8002d00 <HAL_GetTick>
 8003a9a:	0003      	movs	r3, r0
 8003a9c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7ff f92e 	bl	8002d00 <HAL_GetTick>
 8003aa4:	0002      	movs	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	; 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e2d4      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ab2:	4b89      	ldr	r3, [pc, #548]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	2380      	movs	r3, #128	; 0x80
 8003ab8:	029b      	lsls	r3, r3, #10
 8003aba:	4013      	ands	r3, r2
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0xf8>
 8003abe:	e000      	b.n	8003ac2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d100      	bne.n	8003ace <HAL_RCC_OscConfig+0x126>
 8003acc:	e099      	b.n	8003c02 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ace:	4b82      	ldr	r3, [pc, #520]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2238      	movs	r2, #56	; 0x38
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ad8:	4b7f      	ldr	r3, [pc, #508]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2203      	movs	r2, #3
 8003ade:	4013      	ands	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d102      	bne.n	8003aee <HAL_RCC_OscConfig+0x146>
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d002      	beq.n	8003af4 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d135      	bne.n	8003b60 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af4:	4b78      	ldr	r3, [pc, #480]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	2380      	movs	r3, #128	; 0x80
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4013      	ands	r3, r2
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_OscConfig+0x164>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e2a7      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0c:	4b72      	ldr	r3, [pc, #456]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4a74      	ldr	r2, [pc, #464]	; (8003ce4 <HAL_RCC_OscConfig+0x33c>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	0019      	movs	r1, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	021a      	lsls	r2, r3, #8
 8003b1c:	4b6e      	ldr	r3, [pc, #440]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d112      	bne.n	8003b4e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b28:	4b6b      	ldr	r3, [pc, #428]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a6e      	ldr	r2, [pc, #440]	; (8003ce8 <HAL_RCC_OscConfig+0x340>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	0019      	movs	r1, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	4b68      	ldr	r3, [pc, #416]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003b3c:	4b66      	ldr	r3, [pc, #408]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	0adb      	lsrs	r3, r3, #11
 8003b42:	2207      	movs	r2, #7
 8003b44:	4013      	ands	r3, r2
 8003b46:	4a69      	ldr	r2, [pc, #420]	; (8003cec <HAL_RCC_OscConfig+0x344>)
 8003b48:	40da      	lsrs	r2, r3
 8003b4a:	4b69      	ldr	r3, [pc, #420]	; (8003cf0 <HAL_RCC_OscConfig+0x348>)
 8003b4c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b4e:	4b69      	ldr	r3, [pc, #420]	; (8003cf4 <HAL_RCC_OscConfig+0x34c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	0018      	movs	r0, r3
 8003b54:	f7ff f878 	bl	8002c48 <HAL_InitTick>
 8003b58:	1e03      	subs	r3, r0, #0
 8003b5a:	d051      	beq.n	8003c00 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e27d      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d030      	beq.n	8003bca <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b68:	4b5b      	ldr	r3, [pc, #364]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a5e      	ldr	r2, [pc, #376]	; (8003ce8 <HAL_RCC_OscConfig+0x340>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	0019      	movs	r1, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	4b58      	ldr	r3, [pc, #352]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003b7c:	4b56      	ldr	r3, [pc, #344]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b55      	ldr	r3, [pc, #340]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003b82:	2180      	movs	r1, #128	; 0x80
 8003b84:	0049      	lsls	r1, r1, #1
 8003b86:	430a      	orrs	r2, r1
 8003b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8a:	f7ff f8b9 	bl	8002d00 <HAL_GetTick>
 8003b8e:	0003      	movs	r3, r0
 8003b90:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b94:	f7ff f8b4 	bl	8002d00 <HAL_GetTick>
 8003b98:	0002      	movs	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e25a      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ba6:	4b4c      	ldr	r3, [pc, #304]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	2380      	movs	r3, #128	; 0x80
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4013      	ands	r3, r2
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb2:	4b49      	ldr	r3, [pc, #292]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4a4b      	ldr	r2, [pc, #300]	; (8003ce4 <HAL_RCC_OscConfig+0x33c>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	0019      	movs	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	021a      	lsls	r2, r3, #8
 8003bc2:	4b45      	ldr	r3, [pc, #276]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	605a      	str	r2, [r3, #4]
 8003bc8:	e01b      	b.n	8003c02 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003bca:	4b43      	ldr	r3, [pc, #268]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	4b42      	ldr	r3, [pc, #264]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003bd0:	4949      	ldr	r1, [pc, #292]	; (8003cf8 <HAL_RCC_OscConfig+0x350>)
 8003bd2:	400a      	ands	r2, r1
 8003bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd6:	f7ff f893 	bl	8002d00 <HAL_GetTick>
 8003bda:	0003      	movs	r3, r0
 8003bdc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be0:	f7ff f88e 	bl	8002d00 <HAL_GetTick>
 8003be4:	0002      	movs	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e234      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bf2:	4b39      	ldr	r3, [pc, #228]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	2380      	movs	r3, #128	; 0x80
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x238>
 8003bfe:	e000      	b.n	8003c02 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c00:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2208      	movs	r2, #8
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d047      	beq.n	8003c9c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c0c:	4b32      	ldr	r3, [pc, #200]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2238      	movs	r2, #56	; 0x38
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b18      	cmp	r3, #24
 8003c16:	d10a      	bne.n	8003c2e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003c18:	4b2f      	ldr	r3, [pc, #188]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d03c      	beq.n	8003c9c <HAL_RCC_OscConfig+0x2f4>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d138      	bne.n	8003c9c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e216      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d019      	beq.n	8003c6a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003c36:	4b28      	ldr	r3, [pc, #160]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003c38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c3a:	4b27      	ldr	r3, [pc, #156]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c42:	f7ff f85d 	bl	8002d00 <HAL_GetTick>
 8003c46:	0003      	movs	r3, r0
 8003c48:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c4c:	f7ff f858 	bl	8002d00 <HAL_GetTick>
 8003c50:	0002      	movs	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e1fe      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c62:	2202      	movs	r2, #2
 8003c64:	4013      	ands	r3, r2
 8003c66:	d0f1      	beq.n	8003c4c <HAL_RCC_OscConfig+0x2a4>
 8003c68:	e018      	b.n	8003c9c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003c6a:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003c6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c6e:	4b1a      	ldr	r3, [pc, #104]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003c70:	2101      	movs	r1, #1
 8003c72:	438a      	bics	r2, r1
 8003c74:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c76:	f7ff f843 	bl	8002d00 <HAL_GetTick>
 8003c7a:	0003      	movs	r3, r0
 8003c7c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c80:	f7ff f83e 	bl	8002d00 <HAL_GetTick>
 8003c84:	0002      	movs	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e1e4      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c92:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c96:	2202      	movs	r2, #2
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d1f1      	bne.n	8003c80 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d100      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x300>
 8003ca6:	e0c7      	b.n	8003e38 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca8:	231f      	movs	r3, #31
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003cb0:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2238      	movs	r2, #56	; 0x38
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d11f      	bne.n	8003cfc <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_RCC_OscConfig+0x330>)
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	d100      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x320>
 8003cc6:	e0b7      	b.n	8003e38 <HAL_RCC_OscConfig+0x490>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d000      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x32a>
 8003cd0:	e0b2      	b.n	8003e38 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e1c2      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	fffeffff 	.word	0xfffeffff
 8003ce0:	fffbffff 	.word	0xfffbffff
 8003ce4:	ffff80ff 	.word	0xffff80ff
 8003ce8:	ffffc7ff 	.word	0xffffc7ff
 8003cec:	00f42400 	.word	0x00f42400
 8003cf0:	20000058 	.word	0x20000058
 8003cf4:	2000005c 	.word	0x2000005c
 8003cf8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cfc:	4bb5      	ldr	r3, [pc, #724]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d00:	2380      	movs	r3, #128	; 0x80
 8003d02:	055b      	lsls	r3, r3, #21
 8003d04:	4013      	ands	r3, r2
 8003d06:	d101      	bne.n	8003d0c <HAL_RCC_OscConfig+0x364>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <HAL_RCC_OscConfig+0x366>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d011      	beq.n	8003d36 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003d12:	4bb0      	ldr	r3, [pc, #704]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003d14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d16:	4baf      	ldr	r3, [pc, #700]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003d18:	2180      	movs	r1, #128	; 0x80
 8003d1a:	0549      	lsls	r1, r1, #21
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d20:	4bac      	ldr	r3, [pc, #688]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d24:	2380      	movs	r3, #128	; 0x80
 8003d26:	055b      	lsls	r3, r3, #21
 8003d28:	4013      	ands	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003d2e:	231f      	movs	r3, #31
 8003d30:	18fb      	adds	r3, r7, r3
 8003d32:	2201      	movs	r2, #1
 8003d34:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d36:	4ba8      	ldr	r3, [pc, #672]	; (8003fd8 <HAL_RCC_OscConfig+0x630>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d11a      	bne.n	8003d78 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d42:	4ba5      	ldr	r3, [pc, #660]	; (8003fd8 <HAL_RCC_OscConfig+0x630>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4ba4      	ldr	r3, [pc, #656]	; (8003fd8 <HAL_RCC_OscConfig+0x630>)
 8003d48:	2180      	movs	r1, #128	; 0x80
 8003d4a:	0049      	lsls	r1, r1, #1
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003d50:	f7fe ffd6 	bl	8002d00 <HAL_GetTick>
 8003d54:	0003      	movs	r3, r0
 8003d56:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d5a:	f7fe ffd1 	bl	8002d00 <HAL_GetTick>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e177      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d6c:	4b9a      	ldr	r3, [pc, #616]	; (8003fd8 <HAL_RCC_OscConfig+0x630>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4013      	ands	r3, r2
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCC_OscConfig+0x3e6>
 8003d80:	4b94      	ldr	r3, [pc, #592]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003d82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d84:	4b93      	ldr	r3, [pc, #588]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003d86:	2101      	movs	r1, #1
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d8c:	e01c      	b.n	8003dc8 <HAL_RCC_OscConfig+0x420>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b05      	cmp	r3, #5
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x408>
 8003d96:	4b8f      	ldr	r3, [pc, #572]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003d98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d9a:	4b8e      	ldr	r3, [pc, #568]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003d9c:	2104      	movs	r1, #4
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003da2:	4b8c      	ldr	r3, [pc, #560]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003da4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003da6:	4b8b      	ldr	r3, [pc, #556]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003da8:	2101      	movs	r1, #1
 8003daa:	430a      	orrs	r2, r1
 8003dac:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCC_OscConfig+0x420>
 8003db0:	4b88      	ldr	r3, [pc, #544]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003db2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003db4:	4b87      	ldr	r3, [pc, #540]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003db6:	2101      	movs	r1, #1
 8003db8:	438a      	bics	r2, r1
 8003dba:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dbc:	4b85      	ldr	r3, [pc, #532]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003dbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dc0:	4b84      	ldr	r3, [pc, #528]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003dc2:	2104      	movs	r1, #4
 8003dc4:	438a      	bics	r2, r1
 8003dc6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d014      	beq.n	8003dfa <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd0:	f7fe ff96 	bl	8002d00 <HAL_GetTick>
 8003dd4:	0003      	movs	r3, r0
 8003dd6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd8:	e009      	b.n	8003dee <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dda:	f7fe ff91 	bl	8002d00 <HAL_GetTick>
 8003dde:	0002      	movs	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	4a7d      	ldr	r2, [pc, #500]	; (8003fdc <HAL_RCC_OscConfig+0x634>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e136      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dee:	4b79      	ldr	r3, [pc, #484]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	2202      	movs	r2, #2
 8003df4:	4013      	ands	r3, r2
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x432>
 8003df8:	e013      	b.n	8003e22 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfa:	f7fe ff81 	bl	8002d00 <HAL_GetTick>
 8003dfe:	0003      	movs	r3, r0
 8003e00:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e02:	e009      	b.n	8003e18 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e04:	f7fe ff7c 	bl	8002d00 <HAL_GetTick>
 8003e08:	0002      	movs	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	4a73      	ldr	r2, [pc, #460]	; (8003fdc <HAL_RCC_OscConfig+0x634>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e121      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e18:	4b6e      	ldr	r3, [pc, #440]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003e22:	231f      	movs	r3, #31
 8003e24:	18fb      	adds	r3, r7, r3
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d105      	bne.n	8003e38 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003e2c:	4b69      	ldr	r3, [pc, #420]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e30:	4b68      	ldr	r3, [pc, #416]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003e32:	496b      	ldr	r1, [pc, #428]	; (8003fe0 <HAL_RCC_OscConfig+0x638>)
 8003e34:	400a      	ands	r2, r1
 8003e36:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d039      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01b      	beq.n	8003e82 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e4a:	4b62      	ldr	r3, [pc, #392]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	4b61      	ldr	r3, [pc, #388]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003e50:	2180      	movs	r1, #128	; 0x80
 8003e52:	03c9      	lsls	r1, r1, #15
 8003e54:	430a      	orrs	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e58:	f7fe ff52 	bl	8002d00 <HAL_GetTick>
 8003e5c:	0003      	movs	r3, r0
 8003e5e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e62:	f7fe ff4d 	bl	8002d00 <HAL_GetTick>
 8003e66:	0002      	movs	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e0f3      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003e74:	4b57      	ldr	r3, [pc, #348]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	041b      	lsls	r3, r3, #16
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	d0f0      	beq.n	8003e62 <HAL_RCC_OscConfig+0x4ba>
 8003e80:	e019      	b.n	8003eb6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e82:	4b54      	ldr	r3, [pc, #336]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4b53      	ldr	r3, [pc, #332]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003e88:	4956      	ldr	r1, [pc, #344]	; (8003fe4 <HAL_RCC_OscConfig+0x63c>)
 8003e8a:	400a      	ands	r2, r1
 8003e8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8e:	f7fe ff37 	bl	8002d00 <HAL_GetTick>
 8003e92:	0003      	movs	r3, r0
 8003e94:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e98:	f7fe ff32 	bl	8002d00 <HAL_GetTick>
 8003e9c:	0002      	movs	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e0d8      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003eaa:	4b4a      	ldr	r3, [pc, #296]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	041b      	lsls	r3, r3, #16
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d100      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x518>
 8003ebe:	e0cc      	b.n	800405a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ec0:	4b44      	ldr	r3, [pc, #272]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2238      	movs	r2, #56	; 0x38
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d100      	bne.n	8003ece <HAL_RCC_OscConfig+0x526>
 8003ecc:	e07b      	b.n	8003fc6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d156      	bne.n	8003f84 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed6:	4b3f      	ldr	r3, [pc, #252]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b3e      	ldr	r3, [pc, #248]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003edc:	4942      	ldr	r1, [pc, #264]	; (8003fe8 <HAL_RCC_OscConfig+0x640>)
 8003ede:	400a      	ands	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee2:	f7fe ff0d 	bl	8002d00 <HAL_GetTick>
 8003ee6:	0003      	movs	r3, r0
 8003ee8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eec:	f7fe ff08 	bl	8002d00 <HAL_GetTick>
 8003ef0:	0002      	movs	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e0ae      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003efe:	4b35      	ldr	r3, [pc, #212]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	2380      	movs	r3, #128	; 0x80
 8003f04:	049b      	lsls	r3, r3, #18
 8003f06:	4013      	ands	r3, r2
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f0a:	4b32      	ldr	r3, [pc, #200]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4a37      	ldr	r2, [pc, #220]	; (8003fec <HAL_RCC_OscConfig+0x644>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	0019      	movs	r1, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	431a      	orrs	r2, r3
 8003f38:	4b26      	ldr	r3, [pc, #152]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f3e:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b24      	ldr	r3, [pc, #144]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003f44:	2180      	movs	r1, #128	; 0x80
 8003f46:	0449      	lsls	r1, r1, #17
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003f4c:	4b21      	ldr	r3, [pc, #132]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003f52:	2180      	movs	r1, #128	; 0x80
 8003f54:	0549      	lsls	r1, r1, #21
 8003f56:	430a      	orrs	r2, r1
 8003f58:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5a:	f7fe fed1 	bl	8002d00 <HAL_GetTick>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fe fecc 	bl	8002d00 <HAL_GetTick>
 8003f68:	0002      	movs	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e072      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f76:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	2380      	movs	r3, #128	; 0x80
 8003f7c:	049b      	lsls	r3, r3, #18
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x5bc>
 8003f82:	e06a      	b.n	800405a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f84:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4b12      	ldr	r3, [pc, #72]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003f8a:	4917      	ldr	r1, [pc, #92]	; (8003fe8 <HAL_RCC_OscConfig+0x640>)
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fe feb6 	bl	8002d00 <HAL_GetTick>
 8003f94:	0003      	movs	r3, r0
 8003f96:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9a:	f7fe feb1 	bl	8002d00 <HAL_GetTick>
 8003f9e:	0002      	movs	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e057      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fac:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	049b      	lsls	r3, r3, #18
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d1f0      	bne.n	8003f9a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003fb8:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <HAL_RCC_OscConfig+0x62c>)
 8003fbe:	490c      	ldr	r1, [pc, #48]	; (8003ff0 <HAL_RCC_OscConfig+0x648>)
 8003fc0:	400a      	ands	r2, r1
 8003fc2:	60da      	str	r2, [r3, #12]
 8003fc4:	e049      	b.n	800405a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d112      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e044      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40007000 	.word	0x40007000
 8003fdc:	00001388 	.word	0x00001388
 8003fe0:	efffffff 	.word	0xefffffff
 8003fe4:	ffbfffff 	.word	0xffbfffff
 8003fe8:	feffffff 	.word	0xfeffffff
 8003fec:	11c1808c 	.word	0x11c1808c
 8003ff0:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003ff4:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <HAL_RCC_OscConfig+0x6bc>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2203      	movs	r2, #3
 8003ffe:	401a      	ands	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	429a      	cmp	r2, r3
 8004006:	d126      	bne.n	8004056 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2270      	movs	r2, #112	; 0x70
 800400c:	401a      	ands	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d11f      	bne.n	8004056 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	23fe      	movs	r3, #254	; 0xfe
 800401a:	01db      	lsls	r3, r3, #7
 800401c:	401a      	ands	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d116      	bne.n	8004056 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	23f8      	movs	r3, #248	; 0xf8
 800402c:	039b      	lsls	r3, r3, #14
 800402e:	401a      	ands	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d10e      	bne.n	8004056 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	23e0      	movs	r3, #224	; 0xe0
 800403c:	051b      	lsls	r3, r3, #20
 800403e:	401a      	ands	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d106      	bne.n	8004056 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	0f5b      	lsrs	r3, r3, #29
 800404c:	075a      	lsls	r2, r3, #29
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004052:	429a      	cmp	r2, r3
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	0018      	movs	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	b008      	add	sp, #32
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40021000 	.word	0x40021000

08004068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0e9      	b.n	8004250 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800407c:	4b76      	ldr	r3, [pc, #472]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2207      	movs	r2, #7
 8004082:	4013      	ands	r3, r2
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d91e      	bls.n	80040c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b73      	ldr	r3, [pc, #460]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2207      	movs	r2, #7
 8004090:	4393      	bics	r3, r2
 8004092:	0019      	movs	r1, r3
 8004094:	4b70      	ldr	r3, [pc, #448]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800409c:	f7fe fe30 	bl	8002d00 <HAL_GetTick>
 80040a0:	0003      	movs	r3, r0
 80040a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040a4:	e009      	b.n	80040ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a6:	f7fe fe2b 	bl	8002d00 <HAL_GetTick>
 80040aa:	0002      	movs	r2, r0
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	4a6a      	ldr	r2, [pc, #424]	; (800425c <HAL_RCC_ClockConfig+0x1f4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e0ca      	b.n	8004250 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040ba:	4b67      	ldr	r3, [pc, #412]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2207      	movs	r2, #7
 80040c0:	4013      	ands	r3, r2
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d1ee      	bne.n	80040a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2202      	movs	r2, #2
 80040ce:	4013      	ands	r3, r2
 80040d0:	d015      	beq.n	80040fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2204      	movs	r2, #4
 80040d8:	4013      	ands	r3, r2
 80040da:	d006      	beq.n	80040ea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80040dc:	4b60      	ldr	r3, [pc, #384]	; (8004260 <HAL_RCC_ClockConfig+0x1f8>)
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	4b5f      	ldr	r3, [pc, #380]	; (8004260 <HAL_RCC_ClockConfig+0x1f8>)
 80040e2:	21e0      	movs	r1, #224	; 0xe0
 80040e4:	01c9      	lsls	r1, r1, #7
 80040e6:	430a      	orrs	r2, r1
 80040e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ea:	4b5d      	ldr	r3, [pc, #372]	; (8004260 <HAL_RCC_ClockConfig+0x1f8>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	4a5d      	ldr	r2, [pc, #372]	; (8004264 <HAL_RCC_ClockConfig+0x1fc>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	0019      	movs	r1, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	4b59      	ldr	r3, [pc, #356]	; (8004260 <HAL_RCC_ClockConfig+0x1f8>)
 80040fa:	430a      	orrs	r2, r1
 80040fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2201      	movs	r2, #1
 8004104:	4013      	ands	r3, r2
 8004106:	d057      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d107      	bne.n	8004120 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004110:	4b53      	ldr	r3, [pc, #332]	; (8004260 <HAL_RCC_ClockConfig+0x1f8>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	029b      	lsls	r3, r3, #10
 8004118:	4013      	ands	r3, r2
 800411a:	d12b      	bne.n	8004174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e097      	b.n	8004250 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d107      	bne.n	8004138 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004128:	4b4d      	ldr	r3, [pc, #308]	; (8004260 <HAL_RCC_ClockConfig+0x1f8>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	049b      	lsls	r3, r3, #18
 8004130:	4013      	ands	r3, r2
 8004132:	d11f      	bne.n	8004174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e08b      	b.n	8004250 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d107      	bne.n	8004150 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004140:	4b47      	ldr	r3, [pc, #284]	; (8004260 <HAL_RCC_ClockConfig+0x1f8>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	4013      	ands	r3, r2
 800414a:	d113      	bne.n	8004174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e07f      	b.n	8004250 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b03      	cmp	r3, #3
 8004156:	d106      	bne.n	8004166 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004158:	4b41      	ldr	r3, [pc, #260]	; (8004260 <HAL_RCC_ClockConfig+0x1f8>)
 800415a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800415c:	2202      	movs	r2, #2
 800415e:	4013      	ands	r3, r2
 8004160:	d108      	bne.n	8004174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e074      	b.n	8004250 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004166:	4b3e      	ldr	r3, [pc, #248]	; (8004260 <HAL_RCC_ClockConfig+0x1f8>)
 8004168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416a:	2202      	movs	r2, #2
 800416c:	4013      	ands	r3, r2
 800416e:	d101      	bne.n	8004174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e06d      	b.n	8004250 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004174:	4b3a      	ldr	r3, [pc, #232]	; (8004260 <HAL_RCC_ClockConfig+0x1f8>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2207      	movs	r2, #7
 800417a:	4393      	bics	r3, r2
 800417c:	0019      	movs	r1, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	4b37      	ldr	r3, [pc, #220]	; (8004260 <HAL_RCC_ClockConfig+0x1f8>)
 8004184:	430a      	orrs	r2, r1
 8004186:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004188:	f7fe fdba 	bl	8002d00 <HAL_GetTick>
 800418c:	0003      	movs	r3, r0
 800418e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004190:	e009      	b.n	80041a6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004192:	f7fe fdb5 	bl	8002d00 <HAL_GetTick>
 8004196:	0002      	movs	r2, r0
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	4a2f      	ldr	r2, [pc, #188]	; (800425c <HAL_RCC_ClockConfig+0x1f4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e054      	b.n	8004250 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a6:	4b2e      	ldr	r3, [pc, #184]	; (8004260 <HAL_RCC_ClockConfig+0x1f8>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2238      	movs	r2, #56	; 0x38
 80041ac:	401a      	ands	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d1ec      	bne.n	8004192 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041b8:	4b27      	ldr	r3, [pc, #156]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2207      	movs	r2, #7
 80041be:	4013      	ands	r3, r2
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d21e      	bcs.n	8004204 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2207      	movs	r2, #7
 80041cc:	4393      	bics	r3, r2
 80041ce:	0019      	movs	r1, r3
 80041d0:	4b21      	ldr	r3, [pc, #132]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041d8:	f7fe fd92 	bl	8002d00 <HAL_GetTick>
 80041dc:	0003      	movs	r3, r0
 80041de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041e0:	e009      	b.n	80041f6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e2:	f7fe fd8d 	bl	8002d00 <HAL_GetTick>
 80041e6:	0002      	movs	r2, r0
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	4a1b      	ldr	r2, [pc, #108]	; (800425c <HAL_RCC_ClockConfig+0x1f4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e02c      	b.n	8004250 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041f6:	4b18      	ldr	r3, [pc, #96]	; (8004258 <HAL_RCC_ClockConfig+0x1f0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2207      	movs	r2, #7
 80041fc:	4013      	ands	r3, r2
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d1ee      	bne.n	80041e2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2204      	movs	r2, #4
 800420a:	4013      	ands	r3, r2
 800420c:	d009      	beq.n	8004222 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800420e:	4b14      	ldr	r3, [pc, #80]	; (8004260 <HAL_RCC_ClockConfig+0x1f8>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	4a15      	ldr	r2, [pc, #84]	; (8004268 <HAL_RCC_ClockConfig+0x200>)
 8004214:	4013      	ands	r3, r2
 8004216:	0019      	movs	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68da      	ldr	r2, [r3, #12]
 800421c:	4b10      	ldr	r3, [pc, #64]	; (8004260 <HAL_RCC_ClockConfig+0x1f8>)
 800421e:	430a      	orrs	r2, r1
 8004220:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004222:	f000 f829 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 8004226:	0001      	movs	r1, r0
 8004228:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <HAL_RCC_ClockConfig+0x1f8>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	0a1b      	lsrs	r3, r3, #8
 800422e:	220f      	movs	r2, #15
 8004230:	401a      	ands	r2, r3
 8004232:	4b0e      	ldr	r3, [pc, #56]	; (800426c <HAL_RCC_ClockConfig+0x204>)
 8004234:	0092      	lsls	r2, r2, #2
 8004236:	58d3      	ldr	r3, [r2, r3]
 8004238:	221f      	movs	r2, #31
 800423a:	4013      	ands	r3, r2
 800423c:	000a      	movs	r2, r1
 800423e:	40da      	lsrs	r2, r3
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <HAL_RCC_ClockConfig+0x208>)
 8004242:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_RCC_ClockConfig+0x20c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	0018      	movs	r0, r3
 800424a:	f7fe fcfd 	bl	8002c48 <HAL_InitTick>
 800424e:	0003      	movs	r3, r0
}
 8004250:	0018      	movs	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	b004      	add	sp, #16
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40022000 	.word	0x40022000
 800425c:	00001388 	.word	0x00001388
 8004260:	40021000 	.word	0x40021000
 8004264:	fffff0ff 	.word	0xfffff0ff
 8004268:	ffff8fff 	.word	0xffff8fff
 800426c:	0800a120 	.word	0x0800a120
 8004270:	20000058 	.word	0x20000058
 8004274:	2000005c 	.word	0x2000005c

08004278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800427e:	4b3c      	ldr	r3, [pc, #240]	; (8004370 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2238      	movs	r2, #56	; 0x38
 8004284:	4013      	ands	r3, r2
 8004286:	d10f      	bne.n	80042a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004288:	4b39      	ldr	r3, [pc, #228]	; (8004370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	0adb      	lsrs	r3, r3, #11
 800428e:	2207      	movs	r2, #7
 8004290:	4013      	ands	r3, r2
 8004292:	2201      	movs	r2, #1
 8004294:	409a      	lsls	r2, r3
 8004296:	0013      	movs	r3, r2
 8004298:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800429a:	6839      	ldr	r1, [r7, #0]
 800429c:	4835      	ldr	r0, [pc, #212]	; (8004374 <HAL_RCC_GetSysClockFreq+0xfc>)
 800429e:	f7fb ff4d 	bl	800013c <__udivsi3>
 80042a2:	0003      	movs	r3, r0
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	e05d      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042a8:	4b31      	ldr	r3, [pc, #196]	; (8004370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2238      	movs	r2, #56	; 0x38
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d102      	bne.n	80042ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042b4:	4b30      	ldr	r3, [pc, #192]	; (8004378 <HAL_RCC_GetSysClockFreq+0x100>)
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	e054      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042ba:	4b2d      	ldr	r3, [pc, #180]	; (8004370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2238      	movs	r2, #56	; 0x38
 80042c0:	4013      	ands	r3, r2
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d138      	bne.n	8004338 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80042c6:	4b2a      	ldr	r3, [pc, #168]	; (8004370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	2203      	movs	r2, #3
 80042cc:	4013      	ands	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042d0:	4b27      	ldr	r3, [pc, #156]	; (8004370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	2207      	movs	r2, #7
 80042d8:	4013      	ands	r3, r2
 80042da:	3301      	adds	r3, #1
 80042dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d10d      	bne.n	8004300 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042e4:	68b9      	ldr	r1, [r7, #8]
 80042e6:	4824      	ldr	r0, [pc, #144]	; (8004378 <HAL_RCC_GetSysClockFreq+0x100>)
 80042e8:	f7fb ff28 	bl	800013c <__udivsi3>
 80042ec:	0003      	movs	r3, r0
 80042ee:	0019      	movs	r1, r3
 80042f0:	4b1f      	ldr	r3, [pc, #124]	; (8004370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	0a1b      	lsrs	r3, r3, #8
 80042f6:	227f      	movs	r2, #127	; 0x7f
 80042f8:	4013      	ands	r3, r2
 80042fa:	434b      	muls	r3, r1
 80042fc:	617b      	str	r3, [r7, #20]
        break;
 80042fe:	e00d      	b.n	800431c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	481c      	ldr	r0, [pc, #112]	; (8004374 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004304:	f7fb ff1a 	bl	800013c <__udivsi3>
 8004308:	0003      	movs	r3, r0
 800430a:	0019      	movs	r1, r3
 800430c:	4b18      	ldr	r3, [pc, #96]	; (8004370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	0a1b      	lsrs	r3, r3, #8
 8004312:	227f      	movs	r2, #127	; 0x7f
 8004314:	4013      	ands	r3, r2
 8004316:	434b      	muls	r3, r1
 8004318:	617b      	str	r3, [r7, #20]
        break;
 800431a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800431c:	4b14      	ldr	r3, [pc, #80]	; (8004370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	0f5b      	lsrs	r3, r3, #29
 8004322:	2207      	movs	r2, #7
 8004324:	4013      	ands	r3, r2
 8004326:	3301      	adds	r3, #1
 8004328:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	6978      	ldr	r0, [r7, #20]
 800432e:	f7fb ff05 	bl	800013c <__udivsi3>
 8004332:	0003      	movs	r3, r0
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	e015      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004338:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2238      	movs	r2, #56	; 0x38
 800433e:	4013      	ands	r3, r2
 8004340:	2b20      	cmp	r3, #32
 8004342:	d103      	bne.n	800434c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	e00b      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800434c:	4b08      	ldr	r3, [pc, #32]	; (8004370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2238      	movs	r2, #56	; 0x38
 8004352:	4013      	ands	r3, r2
 8004354:	2b18      	cmp	r3, #24
 8004356:	d103      	bne.n	8004360 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004358:	23fa      	movs	r3, #250	; 0xfa
 800435a:	01db      	lsls	r3, r3, #7
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	e001      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004364:	693b      	ldr	r3, [r7, #16]
}
 8004366:	0018      	movs	r0, r3
 8004368:	46bd      	mov	sp, r7
 800436a:	b006      	add	sp, #24
 800436c:	bd80      	pop	{r7, pc}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	40021000 	.word	0x40021000
 8004374:	00f42400 	.word	0x00f42400
 8004378:	007a1200 	.word	0x007a1200

0800437c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004380:	4b02      	ldr	r3, [pc, #8]	; (800438c <HAL_RCC_GetHCLKFreq+0x10>)
 8004382:	681b      	ldr	r3, [r3, #0]
}
 8004384:	0018      	movs	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	20000058 	.word	0x20000058

08004390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004390:	b5b0      	push	{r4, r5, r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004394:	f7ff fff2 	bl	800437c <HAL_RCC_GetHCLKFreq>
 8004398:	0004      	movs	r4, r0
 800439a:	f7ff faf9 	bl	8003990 <LL_RCC_GetAPB1Prescaler>
 800439e:	0003      	movs	r3, r0
 80043a0:	0b1a      	lsrs	r2, r3, #12
 80043a2:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043a4:	0092      	lsls	r2, r2, #2
 80043a6:	58d3      	ldr	r3, [r2, r3]
 80043a8:	221f      	movs	r2, #31
 80043aa:	4013      	ands	r3, r2
 80043ac:	40dc      	lsrs	r4, r3
 80043ae:	0023      	movs	r3, r4
}
 80043b0:	0018      	movs	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bdb0      	pop	{r4, r5, r7, pc}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	0800a160 	.word	0x0800a160

080043bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80043c4:	2313      	movs	r3, #19
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043cc:	2312      	movs	r3, #18
 80043ce:	18fb      	adds	r3, r7, r3
 80043d0:	2200      	movs	r2, #0
 80043d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	2380      	movs	r3, #128	; 0x80
 80043da:	029b      	lsls	r3, r3, #10
 80043dc:	4013      	ands	r3, r2
 80043de:	d100      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80043e0:	e0ad      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043e2:	2011      	movs	r0, #17
 80043e4:	183b      	adds	r3, r7, r0
 80043e6:	2200      	movs	r2, #0
 80043e8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ea:	4b47      	ldr	r3, [pc, #284]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80043ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ee:	2380      	movs	r3, #128	; 0x80
 80043f0:	055b      	lsls	r3, r3, #21
 80043f2:	4013      	ands	r3, r2
 80043f4:	d110      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043f6:	4b44      	ldr	r3, [pc, #272]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80043f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043fa:	4b43      	ldr	r3, [pc, #268]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80043fc:	2180      	movs	r1, #128	; 0x80
 80043fe:	0549      	lsls	r1, r1, #21
 8004400:	430a      	orrs	r2, r1
 8004402:	63da      	str	r2, [r3, #60]	; 0x3c
 8004404:	4b40      	ldr	r3, [pc, #256]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	055b      	lsls	r3, r3, #21
 800440c:	4013      	ands	r3, r2
 800440e:	60bb      	str	r3, [r7, #8]
 8004410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004412:	183b      	adds	r3, r7, r0
 8004414:	2201      	movs	r2, #1
 8004416:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004418:	4b3c      	ldr	r3, [pc, #240]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	4b3b      	ldr	r3, [pc, #236]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800441e:	2180      	movs	r1, #128	; 0x80
 8004420:	0049      	lsls	r1, r1, #1
 8004422:	430a      	orrs	r2, r1
 8004424:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004426:	f7fe fc6b 	bl	8002d00 <HAL_GetTick>
 800442a:	0003      	movs	r3, r0
 800442c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800442e:	e00b      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004430:	f7fe fc66 	bl	8002d00 <HAL_GetTick>
 8004434:	0002      	movs	r2, r0
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d904      	bls.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800443e:	2313      	movs	r3, #19
 8004440:	18fb      	adds	r3, r7, r3
 8004442:	2203      	movs	r2, #3
 8004444:	701a      	strb	r2, [r3, #0]
        break;
 8004446:	e005      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004448:	4b30      	ldr	r3, [pc, #192]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4013      	ands	r3, r2
 8004452:	d0ed      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004454:	2313      	movs	r3, #19
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d15e      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800445e:	4b2a      	ldr	r3, [pc, #168]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004460:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004462:	23c0      	movs	r3, #192	; 0xc0
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4013      	ands	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d019      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	429a      	cmp	r2, r3
 8004478:	d014      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800447a:	4b23      	ldr	r3, [pc, #140]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800447c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447e:	4a24      	ldr	r2, [pc, #144]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004480:	4013      	ands	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004484:	4b20      	ldr	r3, [pc, #128]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004486:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004488:	4b1f      	ldr	r3, [pc, #124]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800448a:	2180      	movs	r1, #128	; 0x80
 800448c:	0249      	lsls	r1, r1, #9
 800448e:	430a      	orrs	r2, r1
 8004490:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004492:	4b1d      	ldr	r3, [pc, #116]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004494:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004496:	4b1c      	ldr	r3, [pc, #112]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004498:	491e      	ldr	r1, [pc, #120]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800449a:	400a      	ands	r2, r1
 800449c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800449e:	4b1a      	ldr	r3, [pc, #104]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2201      	movs	r2, #1
 80044a8:	4013      	ands	r3, r2
 80044aa:	d016      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ac:	f7fe fc28 	bl	8002d00 <HAL_GetTick>
 80044b0:	0003      	movs	r3, r0
 80044b2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b4:	e00c      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b6:	f7fe fc23 	bl	8002d00 <HAL_GetTick>
 80044ba:	0002      	movs	r2, r0
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	4a15      	ldr	r2, [pc, #84]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d904      	bls.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80044c6:	2313      	movs	r3, #19
 80044c8:	18fb      	adds	r3, r7, r3
 80044ca:	2203      	movs	r2, #3
 80044cc:	701a      	strb	r2, [r3, #0]
            break;
 80044ce:	e004      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044d0:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d4:	2202      	movs	r2, #2
 80044d6:	4013      	ands	r3, r2
 80044d8:	d0ed      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80044da:	2313      	movs	r3, #19
 80044dc:	18fb      	adds	r3, r7, r3
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044e4:	4b08      	ldr	r3, [pc, #32]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e8:	4a09      	ldr	r2, [pc, #36]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	0019      	movs	r1, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f2:	4b05      	ldr	r3, [pc, #20]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044f4:	430a      	orrs	r2, r1
 80044f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80044f8:	e016      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044fa:	2312      	movs	r3, #18
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	2213      	movs	r2, #19
 8004500:	18ba      	adds	r2, r7, r2
 8004502:	7812      	ldrb	r2, [r2, #0]
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	e00f      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004508:	40021000 	.word	0x40021000
 800450c:	40007000 	.word	0x40007000
 8004510:	fffffcff 	.word	0xfffffcff
 8004514:	fffeffff 	.word	0xfffeffff
 8004518:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451c:	2312      	movs	r3, #18
 800451e:	18fb      	adds	r3, r7, r3
 8004520:	2213      	movs	r2, #19
 8004522:	18ba      	adds	r2, r7, r2
 8004524:	7812      	ldrb	r2, [r2, #0]
 8004526:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004528:	2311      	movs	r3, #17
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d105      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004532:	4bb6      	ldr	r3, [pc, #728]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004536:	4bb5      	ldr	r3, [pc, #724]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004538:	49b5      	ldr	r1, [pc, #724]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800453a:	400a      	ands	r2, r1
 800453c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2201      	movs	r2, #1
 8004544:	4013      	ands	r3, r2
 8004546:	d009      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004548:	4bb0      	ldr	r3, [pc, #704]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800454a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454c:	2203      	movs	r2, #3
 800454e:	4393      	bics	r3, r2
 8004550:	0019      	movs	r1, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	4bad      	ldr	r3, [pc, #692]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004558:	430a      	orrs	r2, r1
 800455a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2202      	movs	r2, #2
 8004562:	4013      	ands	r3, r2
 8004564:	d009      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004566:	4ba9      	ldr	r3, [pc, #676]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456a:	220c      	movs	r2, #12
 800456c:	4393      	bics	r3, r2
 800456e:	0019      	movs	r1, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	4ba5      	ldr	r3, [pc, #660]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004576:	430a      	orrs	r2, r1
 8004578:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2204      	movs	r2, #4
 8004580:	4013      	ands	r3, r2
 8004582:	d009      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004584:	4ba1      	ldr	r3, [pc, #644]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004588:	2230      	movs	r2, #48	; 0x30
 800458a:	4393      	bics	r3, r2
 800458c:	0019      	movs	r1, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	4b9e      	ldr	r3, [pc, #632]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004594:	430a      	orrs	r2, r1
 8004596:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2210      	movs	r2, #16
 800459e:	4013      	ands	r3, r2
 80045a0:	d009      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045a2:	4b9a      	ldr	r3, [pc, #616]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a6:	4a9b      	ldr	r2, [pc, #620]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	0019      	movs	r1, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	4b96      	ldr	r3, [pc, #600]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045b2:	430a      	orrs	r2, r1
 80045b4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	2380      	movs	r3, #128	; 0x80
 80045bc:	015b      	lsls	r3, r3, #5
 80045be:	4013      	ands	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80045c2:	4b92      	ldr	r3, [pc, #584]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c6:	4a94      	ldr	r2, [pc, #592]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	0019      	movs	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	695a      	ldr	r2, [r3, #20]
 80045d0:	4b8e      	ldr	r3, [pc, #568]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045d2:	430a      	orrs	r2, r1
 80045d4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	2380      	movs	r3, #128	; 0x80
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4013      	ands	r3, r2
 80045e0:	d009      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045e2:	4b8a      	ldr	r3, [pc, #552]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e6:	4a8d      	ldr	r2, [pc, #564]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	0019      	movs	r1, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045f0:	4b86      	ldr	r3, [pc, #536]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045f2:	430a      	orrs	r2, r1
 80045f4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	2380      	movs	r3, #128	; 0x80
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	4013      	ands	r3, r2
 8004600:	d009      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004602:	4b82      	ldr	r3, [pc, #520]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004606:	4a86      	ldr	r2, [pc, #536]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004608:	4013      	ands	r3, r2
 800460a:	0019      	movs	r1, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	4b7e      	ldr	r3, [pc, #504]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004612:	430a      	orrs	r2, r1
 8004614:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2220      	movs	r2, #32
 800461c:	4013      	ands	r3, r2
 800461e:	d009      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004620:	4b7a      	ldr	r3, [pc, #488]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004624:	4a7f      	ldr	r2, [pc, #508]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004626:	4013      	ands	r3, r2
 8004628:	0019      	movs	r1, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	4b77      	ldr	r3, [pc, #476]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004630:	430a      	orrs	r2, r1
 8004632:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2240      	movs	r2, #64	; 0x40
 800463a:	4013      	ands	r3, r2
 800463c:	d009      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800463e:	4b73      	ldr	r3, [pc, #460]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004642:	4a79      	ldr	r2, [pc, #484]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004644:	4013      	ands	r3, r2
 8004646:	0019      	movs	r1, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69da      	ldr	r2, [r3, #28]
 800464c:	4b6f      	ldr	r3, [pc, #444]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800464e:	430a      	orrs	r2, r1
 8004650:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	2380      	movs	r3, #128	; 0x80
 8004658:	01db      	lsls	r3, r3, #7
 800465a:	4013      	ands	r3, r2
 800465c:	d015      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800465e:	4b6b      	ldr	r3, [pc, #428]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	0899      	lsrs	r1, r3, #2
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800466a:	4b68      	ldr	r3, [pc, #416]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800466c:	430a      	orrs	r2, r1
 800466e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	05db      	lsls	r3, r3, #23
 8004678:	429a      	cmp	r2, r3
 800467a:	d106      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800467c:	4b63      	ldr	r3, [pc, #396]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	4b62      	ldr	r3, [pc, #392]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004682:	2180      	movs	r1, #128	; 0x80
 8004684:	0249      	lsls	r1, r1, #9
 8004686:	430a      	orrs	r2, r1
 8004688:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	031b      	lsls	r3, r3, #12
 8004692:	4013      	ands	r3, r2
 8004694:	d009      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004696:	4b5d      	ldr	r3, [pc, #372]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469a:	2240      	movs	r2, #64	; 0x40
 800469c:	4393      	bics	r3, r2
 800469e:	0019      	movs	r1, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046a4:	4b59      	ldr	r3, [pc, #356]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046a6:	430a      	orrs	r2, r1
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	039b      	lsls	r3, r3, #14
 80046b2:	4013      	ands	r3, r2
 80046b4:	d016      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80046b6:	4b55      	ldr	r3, [pc, #340]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	4a5c      	ldr	r2, [pc, #368]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80046bc:	4013      	ands	r3, r2
 80046be:	0019      	movs	r1, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046c4:	4b51      	ldr	r3, [pc, #324]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046c6:	430a      	orrs	r2, r1
 80046c8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ce:	2380      	movs	r3, #128	; 0x80
 80046d0:	03db      	lsls	r3, r3, #15
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d106      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80046d6:	4b4d      	ldr	r3, [pc, #308]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	4b4c      	ldr	r3, [pc, #304]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046dc:	2180      	movs	r1, #128	; 0x80
 80046de:	0449      	lsls	r1, r1, #17
 80046e0:	430a      	orrs	r2, r1
 80046e2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	03db      	lsls	r3, r3, #15
 80046ec:	4013      	ands	r3, r2
 80046ee:	d016      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80046f0:	4b46      	ldr	r3, [pc, #280]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	4a4e      	ldr	r2, [pc, #312]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	0019      	movs	r1, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046fe:	4b43      	ldr	r3, [pc, #268]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004700:	430a      	orrs	r2, r1
 8004702:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004708:	2380      	movs	r3, #128	; 0x80
 800470a:	045b      	lsls	r3, r3, #17
 800470c:	429a      	cmp	r2, r3
 800470e:	d106      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004710:	4b3e      	ldr	r3, [pc, #248]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	4b3d      	ldr	r3, [pc, #244]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004716:	2180      	movs	r1, #128	; 0x80
 8004718:	0449      	lsls	r1, r1, #17
 800471a:	430a      	orrs	r2, r1
 800471c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	2380      	movs	r3, #128	; 0x80
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	4013      	ands	r3, r2
 8004728:	d014      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800472a:	4b38      	ldr	r3, [pc, #224]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800472c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472e:	2203      	movs	r2, #3
 8004730:	4393      	bics	r3, r2
 8004732:	0019      	movs	r1, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1a      	ldr	r2, [r3, #32]
 8004738:	4b34      	ldr	r3, [pc, #208]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800473a:	430a      	orrs	r2, r1
 800473c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d106      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004746:	4b31      	ldr	r3, [pc, #196]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	4b30      	ldr	r3, [pc, #192]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800474c:	2180      	movs	r1, #128	; 0x80
 800474e:	0249      	lsls	r1, r1, #9
 8004750:	430a      	orrs	r2, r1
 8004752:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	019b      	lsls	r3, r3, #6
 800475c:	4013      	ands	r3, r2
 800475e:	d014      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004760:	4b2a      	ldr	r3, [pc, #168]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004764:	220c      	movs	r2, #12
 8004766:	4393      	bics	r3, r2
 8004768:	0019      	movs	r1, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800476e:	4b27      	ldr	r3, [pc, #156]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004770:	430a      	orrs	r2, r1
 8004772:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	2b04      	cmp	r3, #4
 800477a:	d106      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800477c:	4b23      	ldr	r3, [pc, #140]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	4b22      	ldr	r3, [pc, #136]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004782:	2180      	movs	r1, #128	; 0x80
 8004784:	0249      	lsls	r1, r1, #9
 8004786:	430a      	orrs	r2, r1
 8004788:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	2380      	movs	r3, #128	; 0x80
 8004790:	045b      	lsls	r3, r3, #17
 8004792:	4013      	ands	r3, r2
 8004794:	d016      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004796:	4b1d      	ldr	r3, [pc, #116]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	4a22      	ldr	r2, [pc, #136]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800479c:	4013      	ands	r3, r2
 800479e:	0019      	movs	r1, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047a4:	4b19      	ldr	r3, [pc, #100]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047a6:	430a      	orrs	r2, r1
 80047a8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ae:	2380      	movs	r3, #128	; 0x80
 80047b0:	019b      	lsls	r3, r3, #6
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d106      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80047b6:	4b15      	ldr	r3, [pc, #84]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	4b14      	ldr	r3, [pc, #80]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047bc:	2180      	movs	r1, #128	; 0x80
 80047be:	0449      	lsls	r1, r1, #17
 80047c0:	430a      	orrs	r2, r1
 80047c2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	2380      	movs	r3, #128	; 0x80
 80047ca:	049b      	lsls	r3, r3, #18
 80047cc:	4013      	ands	r3, r2
 80047ce:	d016      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047d0:	4b0e      	ldr	r3, [pc, #56]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d4:	4a10      	ldr	r2, [pc, #64]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047d6:	4013      	ands	r3, r2
 80047d8:	0019      	movs	r1, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047de:	4b0b      	ldr	r3, [pc, #44]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047e0:	430a      	orrs	r2, r1
 80047e2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d106      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047f6:	2180      	movs	r1, #128	; 0x80
 80047f8:	0449      	lsls	r1, r1, #17
 80047fa:	430a      	orrs	r2, r1
 80047fc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80047fe:	2312      	movs	r3, #18
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	781b      	ldrb	r3, [r3, #0]
}
 8004804:	0018      	movs	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	b006      	add	sp, #24
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40021000 	.word	0x40021000
 8004810:	efffffff 	.word	0xefffffff
 8004814:	fffff3ff 	.word	0xfffff3ff
 8004818:	fffffcff 	.word	0xfffffcff
 800481c:	fff3ffff 	.word	0xfff3ffff
 8004820:	ffcfffff 	.word	0xffcfffff
 8004824:	ffffcfff 	.word	0xffffcfff
 8004828:	ffff3fff 	.word	0xffff3fff
 800482c:	ffbfffff 	.word	0xffbfffff
 8004830:	feffffff 	.word	0xfeffffff

08004834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e046      	b.n	80048d4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2288      	movs	r2, #136	; 0x88
 800484a:	589b      	ldr	r3, [r3, r2]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d107      	bne.n	8004860 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2284      	movs	r2, #132	; 0x84
 8004854:	2100      	movs	r1, #0
 8004856:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	0018      	movs	r0, r3
 800485c:	f7fe f86a 	bl	8002934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2288      	movs	r2, #136	; 0x88
 8004864:	2124      	movs	r1, #36	; 0x24
 8004866:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2101      	movs	r1, #1
 8004874:	438a      	bics	r2, r1
 8004876:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	0018      	movs	r0, r3
 800487c:	f000 fdfa 	bl	8005474 <UART_SetConfig>
 8004880:	0003      	movs	r3, r0
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e024      	b.n	80048d4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	0018      	movs	r0, r3
 8004896:	f001 f943 	bl	8005b20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	490d      	ldr	r1, [pc, #52]	; (80048dc <HAL_UART_Init+0xa8>)
 80048a6:	400a      	ands	r2, r1
 80048a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	212a      	movs	r1, #42	; 0x2a
 80048b6:	438a      	bics	r2, r1
 80048b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2101      	movs	r1, #1
 80048c6:	430a      	orrs	r2, r1
 80048c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	0018      	movs	r0, r3
 80048ce:	f001 f9db 	bl	8005c88 <UART_CheckIdleState>
 80048d2:	0003      	movs	r3, r0
}
 80048d4:	0018      	movs	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b002      	add	sp, #8
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	ffffb7ff 	.word	0xffffb7ff

080048e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08a      	sub	sp, #40	; 0x28
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	1dbb      	adds	r3, r7, #6
 80048ee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2288      	movs	r2, #136	; 0x88
 80048f4:	589b      	ldr	r3, [r3, r2]
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d000      	beq.n	80048fc <HAL_UART_Transmit+0x1c>
 80048fa:	e088      	b.n	8004a0e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_UART_Transmit+0x2a>
 8004902:	1dbb      	adds	r3, r7, #6
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e080      	b.n	8004a10 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	2380      	movs	r3, #128	; 0x80
 8004914:	015b      	lsls	r3, r3, #5
 8004916:	429a      	cmp	r2, r3
 8004918:	d109      	bne.n	800492e <HAL_UART_Transmit+0x4e>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d105      	bne.n	800492e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2201      	movs	r2, #1
 8004926:	4013      	ands	r3, r2
 8004928:	d001      	beq.n	800492e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e070      	b.n	8004a10 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2290      	movs	r2, #144	; 0x90
 8004932:	2100      	movs	r1, #0
 8004934:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2288      	movs	r2, #136	; 0x88
 800493a:	2121      	movs	r1, #33	; 0x21
 800493c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800493e:	f7fe f9df 	bl	8002d00 <HAL_GetTick>
 8004942:	0003      	movs	r3, r0
 8004944:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1dba      	adds	r2, r7, #6
 800494a:	2154      	movs	r1, #84	; 0x54
 800494c:	8812      	ldrh	r2, [r2, #0]
 800494e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	1dba      	adds	r2, r7, #6
 8004954:	2156      	movs	r1, #86	; 0x56
 8004956:	8812      	ldrh	r2, [r2, #0]
 8004958:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	2380      	movs	r3, #128	; 0x80
 8004960:	015b      	lsls	r3, r3, #5
 8004962:	429a      	cmp	r2, r3
 8004964:	d108      	bne.n	8004978 <HAL_UART_Transmit+0x98>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d104      	bne.n	8004978 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	e003      	b.n	8004980 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800497c:	2300      	movs	r3, #0
 800497e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004980:	e02c      	b.n	80049dc <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	0013      	movs	r3, r2
 800498c:	2200      	movs	r2, #0
 800498e:	2180      	movs	r1, #128	; 0x80
 8004990:	f001 f9c8 	bl	8005d24 <UART_WaitOnFlagUntilTimeout>
 8004994:	1e03      	subs	r3, r0, #0
 8004996:	d001      	beq.n	800499c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e039      	b.n	8004a10 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10b      	bne.n	80049ba <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	001a      	movs	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	05d2      	lsls	r2, r2, #23
 80049ae:	0dd2      	lsrs	r2, r2, #23
 80049b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	3302      	adds	r3, #2
 80049b6:	61bb      	str	r3, [r7, #24]
 80049b8:	e007      	b.n	80049ca <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	781a      	ldrb	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	3301      	adds	r3, #1
 80049c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2256      	movs	r2, #86	; 0x56
 80049ce:	5a9b      	ldrh	r3, [r3, r2]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b299      	uxth	r1, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2256      	movs	r2, #86	; 0x56
 80049da:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2256      	movs	r2, #86	; 0x56
 80049e0:	5a9b      	ldrh	r3, [r3, r2]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1cc      	bne.n	8004982 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	0013      	movs	r3, r2
 80049f2:	2200      	movs	r2, #0
 80049f4:	2140      	movs	r1, #64	; 0x40
 80049f6:	f001 f995 	bl	8005d24 <UART_WaitOnFlagUntilTimeout>
 80049fa:	1e03      	subs	r3, r0, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e006      	b.n	8004a10 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2288      	movs	r2, #136	; 0x88
 8004a06:	2120      	movs	r1, #32
 8004a08:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e000      	b.n	8004a10 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004a0e:	2302      	movs	r3, #2
  }
}
 8004a10:	0018      	movs	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b008      	add	sp, #32
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	; 0x28
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	603b      	str	r3, [r7, #0]
 8004a24:	1dbb      	adds	r3, r7, #6
 8004a26:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	228c      	movs	r2, #140	; 0x8c
 8004a2c:	589b      	ldr	r3, [r3, r2]
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d000      	beq.n	8004a34 <HAL_UART_Receive+0x1c>
 8004a32:	e0cc      	b.n	8004bce <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_UART_Receive+0x2a>
 8004a3a:	1dbb      	adds	r3, r7, #6
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e0c4      	b.n	8004bd0 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	2380      	movs	r3, #128	; 0x80
 8004a4c:	015b      	lsls	r3, r3, #5
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d109      	bne.n	8004a66 <HAL_UART_Receive+0x4e>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d105      	bne.n	8004a66 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d001      	beq.n	8004a66 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e0b4      	b.n	8004bd0 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2290      	movs	r2, #144	; 0x90
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	228c      	movs	r2, #140	; 0x8c
 8004a72:	2122      	movs	r1, #34	; 0x22
 8004a74:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a7c:	f7fe f940 	bl	8002d00 <HAL_GetTick>
 8004a80:	0003      	movs	r3, r0
 8004a82:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1dba      	adds	r2, r7, #6
 8004a88:	215c      	movs	r1, #92	; 0x5c
 8004a8a:	8812      	ldrh	r2, [r2, #0]
 8004a8c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1dba      	adds	r2, r7, #6
 8004a92:	215e      	movs	r1, #94	; 0x5e
 8004a94:	8812      	ldrh	r2, [r2, #0]
 8004a96:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	2380      	movs	r3, #128	; 0x80
 8004a9e:	015b      	lsls	r3, r3, #5
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d10d      	bne.n	8004ac0 <HAL_UART_Receive+0xa8>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d104      	bne.n	8004ab6 <HAL_UART_Receive+0x9e>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2260      	movs	r2, #96	; 0x60
 8004ab0:	4949      	ldr	r1, [pc, #292]	; (8004bd8 <HAL_UART_Receive+0x1c0>)
 8004ab2:	5299      	strh	r1, [r3, r2]
 8004ab4:	e02e      	b.n	8004b14 <HAL_UART_Receive+0xfc>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2260      	movs	r2, #96	; 0x60
 8004aba:	21ff      	movs	r1, #255	; 0xff
 8004abc:	5299      	strh	r1, [r3, r2]
 8004abe:	e029      	b.n	8004b14 <HAL_UART_Receive+0xfc>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10d      	bne.n	8004ae4 <HAL_UART_Receive+0xcc>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d104      	bne.n	8004ada <HAL_UART_Receive+0xc2>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2260      	movs	r2, #96	; 0x60
 8004ad4:	21ff      	movs	r1, #255	; 0xff
 8004ad6:	5299      	strh	r1, [r3, r2]
 8004ad8:	e01c      	b.n	8004b14 <HAL_UART_Receive+0xfc>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2260      	movs	r2, #96	; 0x60
 8004ade:	217f      	movs	r1, #127	; 0x7f
 8004ae0:	5299      	strh	r1, [r3, r2]
 8004ae2:	e017      	b.n	8004b14 <HAL_UART_Receive+0xfc>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	055b      	lsls	r3, r3, #21
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d10d      	bne.n	8004b0c <HAL_UART_Receive+0xf4>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d104      	bne.n	8004b02 <HAL_UART_Receive+0xea>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2260      	movs	r2, #96	; 0x60
 8004afc:	217f      	movs	r1, #127	; 0x7f
 8004afe:	5299      	strh	r1, [r3, r2]
 8004b00:	e008      	b.n	8004b14 <HAL_UART_Receive+0xfc>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2260      	movs	r2, #96	; 0x60
 8004b06:	213f      	movs	r1, #63	; 0x3f
 8004b08:	5299      	strh	r1, [r3, r2]
 8004b0a:	e003      	b.n	8004b14 <HAL_UART_Receive+0xfc>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2260      	movs	r2, #96	; 0x60
 8004b10:	2100      	movs	r1, #0
 8004b12:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004b14:	2312      	movs	r3, #18
 8004b16:	18fb      	adds	r3, r7, r3
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	2160      	movs	r1, #96	; 0x60
 8004b1c:	5a52      	ldrh	r2, [r2, r1]
 8004b1e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	015b      	lsls	r3, r3, #5
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d108      	bne.n	8004b3e <HAL_UART_Receive+0x126>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d104      	bne.n	8004b3e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004b34:	2300      	movs	r3, #0
 8004b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	e003      	b.n	8004b46 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004b46:	e036      	b.n	8004bb6 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	0013      	movs	r3, r2
 8004b52:	2200      	movs	r2, #0
 8004b54:	2120      	movs	r1, #32
 8004b56:	f001 f8e5 	bl	8005d24 <UART_WaitOnFlagUntilTimeout>
 8004b5a:	1e03      	subs	r3, r0, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e036      	b.n	8004bd0 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10e      	bne.n	8004b86 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2212      	movs	r2, #18
 8004b72:	18ba      	adds	r2, r7, r2
 8004b74:	8812      	ldrh	r2, [r2, #0]
 8004b76:	4013      	ands	r3, r2
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	3302      	adds	r3, #2
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	e00e      	b.n	8004ba4 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2212      	movs	r2, #18
 8004b90:	18ba      	adds	r2, r7, r2
 8004b92:	8812      	ldrh	r2, [r2, #0]
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	4013      	ands	r3, r2
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	225e      	movs	r2, #94	; 0x5e
 8004ba8:	5a9b      	ldrh	r3, [r3, r2]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b299      	uxth	r1, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	225e      	movs	r2, #94	; 0x5e
 8004bb4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	225e      	movs	r2, #94	; 0x5e
 8004bba:	5a9b      	ldrh	r3, [r3, r2]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1c2      	bne.n	8004b48 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	228c      	movs	r2, #140	; 0x8c
 8004bc6:	2120      	movs	r1, #32
 8004bc8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e000      	b.n	8004bd0 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8004bce:	2302      	movs	r3, #2
  }
}
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	b008      	add	sp, #32
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	000001ff 	.word	0x000001ff

08004bdc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	1dbb      	adds	r3, r7, #6
 8004be8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	228c      	movs	r2, #140	; 0x8c
 8004bee:	589b      	ldr	r3, [r3, r2]
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d14f      	bne.n	8004c94 <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_UART_Receive_DMA+0x26>
 8004bfa:	1dbb      	adds	r3, r7, #6
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e047      	b.n	8004c96 <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	2380      	movs	r3, #128	; 0x80
 8004c0c:	015b      	lsls	r3, r3, #5
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d109      	bne.n	8004c26 <HAL_UART_Receive_DMA+0x4a>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d105      	bne.n	8004c26 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	4013      	ands	r3, r2
 8004c20:	d001      	beq.n	8004c26 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e037      	b.n	8004c96 <HAL_UART_Receive_DMA+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a1b      	ldr	r2, [pc, #108]	; (8004ca0 <HAL_UART_Receive_DMA+0xc4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d025      	beq.n	8004c82 <HAL_UART_Receive_DMA+0xa6>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a1a      	ldr	r2, [pc, #104]	; (8004ca4 <HAL_UART_Receive_DMA+0xc8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d020      	beq.n	8004c82 <HAL_UART_Receive_DMA+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	2380      	movs	r3, #128	; 0x80
 8004c48:	041b      	lsls	r3, r3, #16
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d019      	beq.n	8004c82 <HAL_UART_Receive_DMA+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c52:	613b      	str	r3, [r7, #16]
  return(result);
 8004c54:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c56:	61fb      	str	r3, [r7, #28]
 8004c58:	2301      	movs	r3, #1
 8004c5a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f383 8810 	msr	PRIMASK, r3
}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2180      	movs	r1, #128	; 0x80
 8004c70:	04c9      	lsls	r1, r1, #19
 8004c72:	430a      	orrs	r2, r1
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	f383 8810 	msr	PRIMASK, r3
}
 8004c80:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004c82:	1dbb      	adds	r3, r7, #6
 8004c84:	881a      	ldrh	r2, [r3, #0]
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	f001 f912 	bl	8005eb4 <UART_Start_Receive_DMA>
 8004c90:	0003      	movs	r3, r0
 8004c92:	e000      	b.n	8004c96 <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004c94:	2302      	movs	r3, #2
  }
}
 8004c96:	0018      	movs	r0, r3
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b008      	add	sp, #32
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	40008000 	.word	0x40008000
 8004ca4:	40008400 	.word	0x40008400

08004ca8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08c      	sub	sp, #48	; 0x30
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2288      	movs	r2, #136	; 0x88
 8004cb4:	589b      	ldr	r3, [r3, r2]
 8004cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	228c      	movs	r2, #140	; 0x8c
 8004cbc:	589b      	ldr	r3, [r3, r2]
 8004cbe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2280      	movs	r2, #128	; 0x80
 8004cc8:	4013      	ands	r3, r2
 8004cca:	2b80      	cmp	r3, #128	; 0x80
 8004ccc:	d138      	bne.n	8004d40 <HAL_UART_DMAStop+0x98>
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	2b21      	cmp	r3, #33	; 0x21
 8004cd2:	d135      	bne.n	8004d40 <HAL_UART_DMAStop+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd8:	617b      	str	r3, [r7, #20]
  return(result);
 8004cda:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cde:	2301      	movs	r3, #1
 8004ce0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	f383 8810 	msr	PRIMASK, r3
}
 8004ce8:	46c0      	nop			; (mov r8, r8)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2180      	movs	r1, #128	; 0x80
 8004cf6:	438a      	bics	r2, r1
 8004cf8:	609a      	str	r2, [r3, #8]
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	f383 8810 	msr	PRIMASK, r3
}
 8004d04:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d014      	beq.n	8004d38 <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d12:	0018      	movs	r0, r3
 8004d14:	f7fe fa32 	bl	800317c <HAL_DMA_Abort>
 8004d18:	1e03      	subs	r3, r0, #0
 8004d1a:	d00d      	beq.n	8004d38 <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d20:	0018      	movs	r0, r3
 8004d22:	f7fe fbb7 	bl	8003494 <HAL_DMA_GetError>
 8004d26:	0003      	movs	r3, r0
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d105      	bne.n	8004d38 <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2290      	movs	r2, #144	; 0x90
 8004d30:	2110      	movs	r1, #16
 8004d32:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e047      	b.n	8004dc8 <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f001 f960 	bl	8006000 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2240      	movs	r2, #64	; 0x40
 8004d48:	4013      	ands	r3, r2
 8004d4a:	2b40      	cmp	r3, #64	; 0x40
 8004d4c:	d13b      	bne.n	8004dc6 <HAL_UART_DMAStop+0x11e>
 8004d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d50:	2b22      	cmp	r3, #34	; 0x22
 8004d52:	d138      	bne.n	8004dc6 <HAL_UART_DMAStop+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d54:	f3ef 8310 	mrs	r3, PRIMASK
 8004d58:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d5a:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d5c:	623b      	str	r3, [r7, #32]
 8004d5e:	2301      	movs	r3, #1
 8004d60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f383 8810 	msr	PRIMASK, r3
}
 8004d68:	46c0      	nop			; (mov r8, r8)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2140      	movs	r1, #64	; 0x40
 8004d76:	438a      	bics	r2, r1
 8004d78:	609a      	str	r2, [r3, #8]
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f383 8810 	msr	PRIMASK, r3
}
 8004d84:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2280      	movs	r2, #128	; 0x80
 8004d8a:	589b      	ldr	r3, [r3, r2]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d016      	beq.n	8004dbe <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2280      	movs	r2, #128	; 0x80
 8004d94:	589b      	ldr	r3, [r3, r2]
 8004d96:	0018      	movs	r0, r3
 8004d98:	f7fe f9f0 	bl	800317c <HAL_DMA_Abort>
 8004d9c:	1e03      	subs	r3, r0, #0
 8004d9e:	d00e      	beq.n	8004dbe <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2280      	movs	r2, #128	; 0x80
 8004da4:	589b      	ldr	r3, [r3, r2]
 8004da6:	0018      	movs	r0, r3
 8004da8:	f7fe fb74 	bl	8003494 <HAL_DMA_GetError>
 8004dac:	0003      	movs	r3, r0
 8004dae:	2b20      	cmp	r3, #32
 8004db0:	d105      	bne.n	8004dbe <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2290      	movs	r2, #144	; 0x90
 8004db6:	2110      	movs	r1, #16
 8004db8:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e004      	b.n	8004dc8 <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f001 f95d 	bl	8006080 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	0018      	movs	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b00c      	add	sp, #48	; 0x30
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dd0:	b5b0      	push	{r4, r5, r7, lr}
 8004dd2:	b0aa      	sub	sp, #168	; 0xa8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	22a4      	movs	r2, #164	; 0xa4
 8004de0:	18b9      	adds	r1, r7, r2
 8004de2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	20a0      	movs	r0, #160	; 0xa0
 8004dec:	1839      	adds	r1, r7, r0
 8004dee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	249c      	movs	r4, #156	; 0x9c
 8004df8:	1939      	adds	r1, r7, r4
 8004dfa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004dfc:	0011      	movs	r1, r2
 8004dfe:	18bb      	adds	r3, r7, r2
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4aa2      	ldr	r2, [pc, #648]	; (800508c <HAL_UART_IRQHandler+0x2bc>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	2298      	movs	r2, #152	; 0x98
 8004e08:	18bd      	adds	r5, r7, r2
 8004e0a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004e0c:	18bb      	adds	r3, r7, r2
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d11a      	bne.n	8004e4a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e14:	187b      	adds	r3, r7, r1
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d015      	beq.n	8004e4a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e1e:	183b      	adds	r3, r7, r0
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2220      	movs	r2, #32
 8004e24:	4013      	ands	r3, r2
 8004e26:	d105      	bne.n	8004e34 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e28:	193b      	adds	r3, r7, r4
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	2380      	movs	r3, #128	; 0x80
 8004e2e:	055b      	lsls	r3, r3, #21
 8004e30:	4013      	ands	r3, r2
 8004e32:	d00a      	beq.n	8004e4a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d100      	bne.n	8004e3e <HAL_UART_IRQHandler+0x6e>
 8004e3c:	e2dc      	b.n	80053f8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	0010      	movs	r0, r2
 8004e46:	4798      	blx	r3
      }
      return;
 8004e48:	e2d6      	b.n	80053f8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e4a:	2398      	movs	r3, #152	; 0x98
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d100      	bne.n	8004e56 <HAL_UART_IRQHandler+0x86>
 8004e54:	e122      	b.n	800509c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004e56:	239c      	movs	r3, #156	; 0x9c
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a8c      	ldr	r2, [pc, #560]	; (8005090 <HAL_UART_IRQHandler+0x2c0>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	d106      	bne.n	8004e70 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004e62:	23a0      	movs	r3, #160	; 0xa0
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a8a      	ldr	r2, [pc, #552]	; (8005094 <HAL_UART_IRQHandler+0x2c4>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d100      	bne.n	8004e70 <HAL_UART_IRQHandler+0xa0>
 8004e6e:	e115      	b.n	800509c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e70:	23a4      	movs	r3, #164	; 0xa4
 8004e72:	18fb      	adds	r3, r7, r3
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2201      	movs	r2, #1
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d012      	beq.n	8004ea2 <HAL_UART_IRQHandler+0xd2>
 8004e7c:	23a0      	movs	r3, #160	; 0xa0
 8004e7e:	18fb      	adds	r3, r7, r3
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	2380      	movs	r3, #128	; 0x80
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	4013      	ands	r3, r2
 8004e88:	d00b      	beq.n	8004ea2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2290      	movs	r2, #144	; 0x90
 8004e96:	589b      	ldr	r3, [r3, r2]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2190      	movs	r1, #144	; 0x90
 8004ea0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ea2:	23a4      	movs	r3, #164	; 0xa4
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	4013      	ands	r3, r2
 8004eac:	d011      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x102>
 8004eae:	239c      	movs	r3, #156	; 0x9c
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d00b      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2290      	movs	r2, #144	; 0x90
 8004ec6:	589b      	ldr	r3, [r3, r2]
 8004ec8:	2204      	movs	r2, #4
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2190      	movs	r1, #144	; 0x90
 8004ed0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ed2:	23a4      	movs	r3, #164	; 0xa4
 8004ed4:	18fb      	adds	r3, r7, r3
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2204      	movs	r2, #4
 8004eda:	4013      	ands	r3, r2
 8004edc:	d011      	beq.n	8004f02 <HAL_UART_IRQHandler+0x132>
 8004ede:	239c      	movs	r3, #156	; 0x9c
 8004ee0:	18fb      	adds	r3, r7, r3
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	d00b      	beq.n	8004f02 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2204      	movs	r2, #4
 8004ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2290      	movs	r2, #144	; 0x90
 8004ef6:	589b      	ldr	r3, [r3, r2]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2190      	movs	r1, #144	; 0x90
 8004f00:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f02:	23a4      	movs	r3, #164	; 0xa4
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2208      	movs	r2, #8
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d017      	beq.n	8004f3e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f0e:	23a0      	movs	r3, #160	; 0xa0
 8004f10:	18fb      	adds	r3, r7, r3
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2220      	movs	r2, #32
 8004f16:	4013      	ands	r3, r2
 8004f18:	d105      	bne.n	8004f26 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004f1a:	239c      	movs	r3, #156	; 0x9c
 8004f1c:	18fb      	adds	r3, r7, r3
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a5b      	ldr	r2, [pc, #364]	; (8005090 <HAL_UART_IRQHandler+0x2c0>)
 8004f22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f24:	d00b      	beq.n	8004f3e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2208      	movs	r2, #8
 8004f2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2290      	movs	r2, #144	; 0x90
 8004f32:	589b      	ldr	r3, [r3, r2]
 8004f34:	2208      	movs	r2, #8
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2190      	movs	r1, #144	; 0x90
 8004f3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f3e:	23a4      	movs	r3, #164	; 0xa4
 8004f40:	18fb      	adds	r3, r7, r3
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	2380      	movs	r3, #128	; 0x80
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d013      	beq.n	8004f74 <HAL_UART_IRQHandler+0x1a4>
 8004f4c:	23a0      	movs	r3, #160	; 0xa0
 8004f4e:	18fb      	adds	r3, r7, r3
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	2380      	movs	r3, #128	; 0x80
 8004f54:	04db      	lsls	r3, r3, #19
 8004f56:	4013      	ands	r3, r2
 8004f58:	d00c      	beq.n	8004f74 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2280      	movs	r2, #128	; 0x80
 8004f60:	0112      	lsls	r2, r2, #4
 8004f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2290      	movs	r2, #144	; 0x90
 8004f68:	589b      	ldr	r3, [r3, r2]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2190      	movs	r1, #144	; 0x90
 8004f72:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2290      	movs	r2, #144	; 0x90
 8004f78:	589b      	ldr	r3, [r3, r2]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d100      	bne.n	8004f80 <HAL_UART_IRQHandler+0x1b0>
 8004f7e:	e23d      	b.n	80053fc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f80:	23a4      	movs	r3, #164	; 0xa4
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2220      	movs	r2, #32
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d015      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f8c:	23a0      	movs	r3, #160	; 0xa0
 8004f8e:	18fb      	adds	r3, r7, r3
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2220      	movs	r2, #32
 8004f94:	4013      	ands	r3, r2
 8004f96:	d106      	bne.n	8004fa6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f98:	239c      	movs	r3, #156	; 0x9c
 8004f9a:	18fb      	adds	r3, r7, r3
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	2380      	movs	r3, #128	; 0x80
 8004fa0:	055b      	lsls	r3, r3, #21
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	d008      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d004      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	0010      	movs	r0, r2
 8004fb6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2290      	movs	r2, #144	; 0x90
 8004fbc:	589b      	ldr	r3, [r3, r2]
 8004fbe:	2194      	movs	r1, #148	; 0x94
 8004fc0:	187a      	adds	r2, r7, r1
 8004fc2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2240      	movs	r2, #64	; 0x40
 8004fcc:	4013      	ands	r3, r2
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	d004      	beq.n	8004fdc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fd2:	187b      	adds	r3, r7, r1
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2228      	movs	r2, #40	; 0x28
 8004fd8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fda:	d04c      	beq.n	8005076 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f001 f84e 	bl	8006080 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2240      	movs	r2, #64	; 0x40
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d13c      	bne.n	800506c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ff6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ffa:	2090      	movs	r0, #144	; 0x90
 8004ffc:	183a      	adds	r2, r7, r0
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	2301      	movs	r3, #1
 8005002:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005006:	f383 8810 	msr	PRIMASK, r3
}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2140      	movs	r1, #64	; 0x40
 8005018:	438a      	bics	r2, r1
 800501a:	609a      	str	r2, [r3, #8]
 800501c:	183b      	adds	r3, r7, r0
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005024:	f383 8810 	msr	PRIMASK, r3
}
 8005028:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2280      	movs	r2, #128	; 0x80
 800502e:	589b      	ldr	r3, [r3, r2]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d016      	beq.n	8005062 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2280      	movs	r2, #128	; 0x80
 8005038:	589b      	ldr	r3, [r3, r2]
 800503a:	4a17      	ldr	r2, [pc, #92]	; (8005098 <HAL_UART_IRQHandler+0x2c8>)
 800503c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2280      	movs	r2, #128	; 0x80
 8005042:	589b      	ldr	r3, [r3, r2]
 8005044:	0018      	movs	r0, r3
 8005046:	f7fe f8f9 	bl	800323c <HAL_DMA_Abort_IT>
 800504a:	1e03      	subs	r3, r0, #0
 800504c:	d01c      	beq.n	8005088 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2280      	movs	r2, #128	; 0x80
 8005052:	589b      	ldr	r3, [r3, r2]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	2180      	movs	r1, #128	; 0x80
 800505a:	5852      	ldr	r2, [r2, r1]
 800505c:	0010      	movs	r0, r2
 800505e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005060:	e012      	b.n	8005088 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	0018      	movs	r0, r3
 8005066:	f000 f9f1 	bl	800544c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800506a:	e00d      	b.n	8005088 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	0018      	movs	r0, r3
 8005070:	f000 f9ec 	bl	800544c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005074:	e008      	b.n	8005088 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	0018      	movs	r0, r3
 800507a:	f000 f9e7 	bl	800544c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2290      	movs	r2, #144	; 0x90
 8005082:	2100      	movs	r1, #0
 8005084:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005086:	e1b9      	b.n	80053fc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005088:	46c0      	nop			; (mov r8, r8)
    return;
 800508a:	e1b7      	b.n	80053fc <HAL_UART_IRQHandler+0x62c>
 800508c:	0000080f 	.word	0x0000080f
 8005090:	10000001 	.word	0x10000001
 8005094:	04000120 	.word	0x04000120
 8005098:	08006345 	.word	0x08006345

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d000      	beq.n	80050a6 <HAL_UART_IRQHandler+0x2d6>
 80050a4:	e13e      	b.n	8005324 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80050a6:	23a4      	movs	r3, #164	; 0xa4
 80050a8:	18fb      	adds	r3, r7, r3
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2210      	movs	r2, #16
 80050ae:	4013      	ands	r3, r2
 80050b0:	d100      	bne.n	80050b4 <HAL_UART_IRQHandler+0x2e4>
 80050b2:	e137      	b.n	8005324 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80050b4:	23a0      	movs	r3, #160	; 0xa0
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2210      	movs	r2, #16
 80050bc:	4013      	ands	r3, r2
 80050be:	d100      	bne.n	80050c2 <HAL_UART_IRQHandler+0x2f2>
 80050c0:	e130      	b.n	8005324 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2210      	movs	r2, #16
 80050c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2240      	movs	r2, #64	; 0x40
 80050d2:	4013      	ands	r3, r2
 80050d4:	2b40      	cmp	r3, #64	; 0x40
 80050d6:	d000      	beq.n	80050da <HAL_UART_IRQHandler+0x30a>
 80050d8:	e0a4      	b.n	8005224 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2280      	movs	r2, #128	; 0x80
 80050de:	589b      	ldr	r3, [r3, r2]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	217e      	movs	r1, #126	; 0x7e
 80050e6:	187b      	adds	r3, r7, r1
 80050e8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80050ea:	187b      	adds	r3, r7, r1
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d100      	bne.n	80050f4 <HAL_UART_IRQHandler+0x324>
 80050f2:	e185      	b.n	8005400 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	225c      	movs	r2, #92	; 0x5c
 80050f8:	5a9b      	ldrh	r3, [r3, r2]
 80050fa:	187a      	adds	r2, r7, r1
 80050fc:	8812      	ldrh	r2, [r2, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d300      	bcc.n	8005104 <HAL_UART_IRQHandler+0x334>
 8005102:	e17d      	b.n	8005400 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	187a      	adds	r2, r7, r1
 8005108:	215e      	movs	r1, #94	; 0x5e
 800510a:	8812      	ldrh	r2, [r2, #0]
 800510c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2280      	movs	r2, #128	; 0x80
 8005112:	589b      	ldr	r3, [r3, r2]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2220      	movs	r2, #32
 800511a:	4013      	ands	r3, r2
 800511c:	d170      	bne.n	8005200 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800511e:	f3ef 8310 	mrs	r3, PRIMASK
 8005122:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005126:	67bb      	str	r3, [r7, #120]	; 0x78
 8005128:	2301      	movs	r3, #1
 800512a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800512c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512e:	f383 8810 	msr	PRIMASK, r3
}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	49b4      	ldr	r1, [pc, #720]	; (8005410 <HAL_UART_IRQHandler+0x640>)
 8005140:	400a      	ands	r2, r1
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005146:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514a:	f383 8810 	msr	PRIMASK, r3
}
 800514e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005150:	f3ef 8310 	mrs	r3, PRIMASK
 8005154:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005158:	677b      	str	r3, [r7, #116]	; 0x74
 800515a:	2301      	movs	r3, #1
 800515c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800515e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005160:	f383 8810 	msr	PRIMASK, r3
}
 8005164:	46c0      	nop			; (mov r8, r8)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2101      	movs	r1, #1
 8005172:	438a      	bics	r2, r1
 8005174:	609a      	str	r2, [r3, #8]
 8005176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005178:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800517a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800517c:	f383 8810 	msr	PRIMASK, r3
}
 8005180:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005182:	f3ef 8310 	mrs	r3, PRIMASK
 8005186:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005188:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800518a:	673b      	str	r3, [r7, #112]	; 0x70
 800518c:	2301      	movs	r3, #1
 800518e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005192:	f383 8810 	msr	PRIMASK, r3
}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2140      	movs	r1, #64	; 0x40
 80051a4:	438a      	bics	r2, r1
 80051a6:	609a      	str	r2, [r3, #8]
 80051a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051aa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ae:	f383 8810 	msr	PRIMASK, r3
}
 80051b2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	228c      	movs	r2, #140	; 0x8c
 80051b8:	2120      	movs	r1, #32
 80051ba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c2:	f3ef 8310 	mrs	r3, PRIMASK
 80051c6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80051c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051cc:	2301      	movs	r3, #1
 80051ce:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051d2:	f383 8810 	msr	PRIMASK, r3
}
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2110      	movs	r1, #16
 80051e4:	438a      	bics	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ee:	f383 8810 	msr	PRIMASK, r3
}
 80051f2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2280      	movs	r2, #128	; 0x80
 80051f8:	589b      	ldr	r3, [r3, r2]
 80051fa:	0018      	movs	r0, r3
 80051fc:	f7fd ffbe 	bl	800317c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	225c      	movs	r2, #92	; 0x5c
 800520a:	5a9a      	ldrh	r2, [r3, r2]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	215e      	movs	r1, #94	; 0x5e
 8005210:	5a5b      	ldrh	r3, [r3, r1]
 8005212:	b29b      	uxth	r3, r3
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	b29a      	uxth	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	0011      	movs	r1, r2
 800521c:	0018      	movs	r0, r3
 800521e:	f000 f91d 	bl	800545c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005222:	e0ed      	b.n	8005400 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	225c      	movs	r2, #92	; 0x5c
 8005228:	5a99      	ldrh	r1, [r3, r2]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	225e      	movs	r2, #94	; 0x5e
 800522e:	5a9b      	ldrh	r3, [r3, r2]
 8005230:	b29a      	uxth	r2, r3
 8005232:	208e      	movs	r0, #142	; 0x8e
 8005234:	183b      	adds	r3, r7, r0
 8005236:	1a8a      	subs	r2, r1, r2
 8005238:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	225e      	movs	r2, #94	; 0x5e
 800523e:	5a9b      	ldrh	r3, [r3, r2]
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d100      	bne.n	8005248 <HAL_UART_IRQHandler+0x478>
 8005246:	e0dd      	b.n	8005404 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005248:	183b      	adds	r3, r7, r0
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d100      	bne.n	8005252 <HAL_UART_IRQHandler+0x482>
 8005250:	e0d8      	b.n	8005404 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005252:	f3ef 8310 	mrs	r3, PRIMASK
 8005256:	60fb      	str	r3, [r7, #12]
  return(result);
 8005258:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800525a:	2488      	movs	r4, #136	; 0x88
 800525c:	193a      	adds	r2, r7, r4
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	2301      	movs	r3, #1
 8005262:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f383 8810 	msr	PRIMASK, r3
}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4967      	ldr	r1, [pc, #412]	; (8005414 <HAL_UART_IRQHandler+0x644>)
 8005278:	400a      	ands	r2, r1
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	193b      	adds	r3, r7, r4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f383 8810 	msr	PRIMASK, r3
}
 8005288:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800528a:	f3ef 8310 	mrs	r3, PRIMASK
 800528e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005290:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005292:	2484      	movs	r4, #132	; 0x84
 8005294:	193a      	adds	r2, r7, r4
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	2301      	movs	r3, #1
 800529a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f383 8810 	msr	PRIMASK, r3
}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	495a      	ldr	r1, [pc, #360]	; (8005418 <HAL_UART_IRQHandler+0x648>)
 80052b0:	400a      	ands	r2, r1
 80052b2:	609a      	str	r2, [r3, #8]
 80052b4:	193b      	adds	r3, r7, r4
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	f383 8810 	msr	PRIMASK, r3
}
 80052c0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	228c      	movs	r2, #140	; 0x8c
 80052c6:	2120      	movs	r1, #32
 80052c8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d6:	f3ef 8310 	mrs	r3, PRIMASK
 80052da:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052de:	2480      	movs	r4, #128	; 0x80
 80052e0:	193a      	adds	r2, r7, r4
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	2301      	movs	r3, #1
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	f383 8810 	msr	PRIMASK, r3
}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2110      	movs	r1, #16
 80052fc:	438a      	bics	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	193b      	adds	r3, r7, r4
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005308:	f383 8810 	msr	PRIMASK, r3
}
 800530c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2202      	movs	r2, #2
 8005312:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005314:	183b      	adds	r3, r7, r0
 8005316:	881a      	ldrh	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	0011      	movs	r1, r2
 800531c:	0018      	movs	r0, r3
 800531e:	f000 f89d 	bl	800545c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005322:	e06f      	b.n	8005404 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005324:	23a4      	movs	r3, #164	; 0xa4
 8005326:	18fb      	adds	r3, r7, r3
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	2380      	movs	r3, #128	; 0x80
 800532c:	035b      	lsls	r3, r3, #13
 800532e:	4013      	ands	r3, r2
 8005330:	d010      	beq.n	8005354 <HAL_UART_IRQHandler+0x584>
 8005332:	239c      	movs	r3, #156	; 0x9c
 8005334:	18fb      	adds	r3, r7, r3
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	2380      	movs	r3, #128	; 0x80
 800533a:	03db      	lsls	r3, r3, #15
 800533c:	4013      	ands	r3, r2
 800533e:	d009      	beq.n	8005354 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2280      	movs	r2, #128	; 0x80
 8005346:	0352      	lsls	r2, r2, #13
 8005348:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	0018      	movs	r0, r3
 800534e:	f001 f83c 	bl	80063ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005352:	e05a      	b.n	800540a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005354:	23a4      	movs	r3, #164	; 0xa4
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2280      	movs	r2, #128	; 0x80
 800535c:	4013      	ands	r3, r2
 800535e:	d016      	beq.n	800538e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005360:	23a0      	movs	r3, #160	; 0xa0
 8005362:	18fb      	adds	r3, r7, r3
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2280      	movs	r2, #128	; 0x80
 8005368:	4013      	ands	r3, r2
 800536a:	d106      	bne.n	800537a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800536c:	239c      	movs	r3, #156	; 0x9c
 800536e:	18fb      	adds	r3, r7, r3
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	2380      	movs	r3, #128	; 0x80
 8005374:	041b      	lsls	r3, r3, #16
 8005376:	4013      	ands	r3, r2
 8005378:	d009      	beq.n	800538e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800537e:	2b00      	cmp	r3, #0
 8005380:	d042      	beq.n	8005408 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	0010      	movs	r0, r2
 800538a:	4798      	blx	r3
    }
    return;
 800538c:	e03c      	b.n	8005408 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800538e:	23a4      	movs	r3, #164	; 0xa4
 8005390:	18fb      	adds	r3, r7, r3
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2240      	movs	r2, #64	; 0x40
 8005396:	4013      	ands	r3, r2
 8005398:	d00a      	beq.n	80053b0 <HAL_UART_IRQHandler+0x5e0>
 800539a:	23a0      	movs	r3, #160	; 0xa0
 800539c:	18fb      	adds	r3, r7, r3
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2240      	movs	r2, #64	; 0x40
 80053a2:	4013      	ands	r3, r2
 80053a4:	d004      	beq.n	80053b0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	0018      	movs	r0, r3
 80053aa:	f000 ffe2 	bl	8006372 <UART_EndTransmit_IT>
    return;
 80053ae:	e02c      	b.n	800540a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80053b0:	23a4      	movs	r3, #164	; 0xa4
 80053b2:	18fb      	adds	r3, r7, r3
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	2380      	movs	r3, #128	; 0x80
 80053b8:	041b      	lsls	r3, r3, #16
 80053ba:	4013      	ands	r3, r2
 80053bc:	d00b      	beq.n	80053d6 <HAL_UART_IRQHandler+0x606>
 80053be:	23a0      	movs	r3, #160	; 0xa0
 80053c0:	18fb      	adds	r3, r7, r3
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	2380      	movs	r3, #128	; 0x80
 80053c6:	05db      	lsls	r3, r3, #23
 80053c8:	4013      	ands	r3, r2
 80053ca:	d004      	beq.n	80053d6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	0018      	movs	r0, r3
 80053d0:	f001 f80b 	bl	80063ea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053d4:	e019      	b.n	800540a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80053d6:	23a4      	movs	r3, #164	; 0xa4
 80053d8:	18fb      	adds	r3, r7, r3
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	2380      	movs	r3, #128	; 0x80
 80053de:	045b      	lsls	r3, r3, #17
 80053e0:	4013      	ands	r3, r2
 80053e2:	d012      	beq.n	800540a <HAL_UART_IRQHandler+0x63a>
 80053e4:	23a0      	movs	r3, #160	; 0xa0
 80053e6:	18fb      	adds	r3, r7, r3
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	da0d      	bge.n	800540a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	0018      	movs	r0, r3
 80053f2:	f000 fff2 	bl	80063da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053f6:	e008      	b.n	800540a <HAL_UART_IRQHandler+0x63a>
      return;
 80053f8:	46c0      	nop			; (mov r8, r8)
 80053fa:	e006      	b.n	800540a <HAL_UART_IRQHandler+0x63a>
    return;
 80053fc:	46c0      	nop			; (mov r8, r8)
 80053fe:	e004      	b.n	800540a <HAL_UART_IRQHandler+0x63a>
      return;
 8005400:	46c0      	nop			; (mov r8, r8)
 8005402:	e002      	b.n	800540a <HAL_UART_IRQHandler+0x63a>
      return;
 8005404:	46c0      	nop			; (mov r8, r8)
 8005406:	e000      	b.n	800540a <HAL_UART_IRQHandler+0x63a>
    return;
 8005408:	46c0      	nop			; (mov r8, r8)
  }
}
 800540a:	46bd      	mov	sp, r7
 800540c:	b02a      	add	sp, #168	; 0xa8
 800540e:	bdb0      	pop	{r4, r5, r7, pc}
 8005410:	fffffeff 	.word	0xfffffeff
 8005414:	fffffedf 	.word	0xfffffedf
 8005418:	effffffe 	.word	0xeffffffe

0800541c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005424:	46c0      	nop			; (mov r8, r8)
 8005426:	46bd      	mov	sp, r7
 8005428:	b002      	add	sp, #8
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005434:	46c0      	nop			; (mov r8, r8)
 8005436:	46bd      	mov	sp, r7
 8005438:	b002      	add	sp, #8
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005444:	46c0      	nop			; (mov r8, r8)
 8005446:	46bd      	mov	sp, r7
 8005448:	b002      	add	sp, #8
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	46bd      	mov	sp, r7
 8005458:	b002      	add	sp, #8
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	000a      	movs	r2, r1
 8005466:	1cbb      	adds	r3, r7, #2
 8005468:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	46bd      	mov	sp, r7
 800546e:	b002      	add	sp, #8
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005474:	b5b0      	push	{r4, r5, r7, lr}
 8005476:	b090      	sub	sp, #64	; 0x40
 8005478:	af00      	add	r7, sp, #0
 800547a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800547c:	231a      	movs	r3, #26
 800547e:	2220      	movs	r2, #32
 8005480:	189b      	adds	r3, r3, r2
 8005482:	19db      	adds	r3, r3, r7
 8005484:	2200      	movs	r2, #0
 8005486:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	431a      	orrs	r2, r3
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	431a      	orrs	r2, r3
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	4313      	orrs	r3, r2
 800549e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4ac1      	ldr	r2, [pc, #772]	; (80057ac <UART_SetConfig+0x338>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	0019      	movs	r1, r3
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b2:	430b      	orrs	r3, r1
 80054b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	4abc      	ldr	r2, [pc, #752]	; (80057b0 <UART_SetConfig+0x33c>)
 80054be:	4013      	ands	r3, r2
 80054c0:	0018      	movs	r0, r3
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	68d9      	ldr	r1, [r3, #12]
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	0003      	movs	r3, r0
 80054cc:	430b      	orrs	r3, r1
 80054ce:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4ab6      	ldr	r2, [pc, #728]	; (80057b4 <UART_SetConfig+0x340>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d009      	beq.n	80054f4 <UART_SetConfig+0x80>
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4ab4      	ldr	r2, [pc, #720]	; (80057b8 <UART_SetConfig+0x344>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d004      	beq.n	80054f4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054f0:	4313      	orrs	r3, r2
 80054f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	4ab0      	ldr	r2, [pc, #704]	; (80057bc <UART_SetConfig+0x348>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	0019      	movs	r1, r3
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005506:	430b      	orrs	r3, r1
 8005508:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	220f      	movs	r2, #15
 8005512:	4393      	bics	r3, r2
 8005514:	0018      	movs	r0, r3
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	0003      	movs	r3, r0
 8005520:	430b      	orrs	r3, r1
 8005522:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4aa5      	ldr	r2, [pc, #660]	; (80057c0 <UART_SetConfig+0x34c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d131      	bne.n	8005592 <UART_SetConfig+0x11e>
 800552e:	4ba5      	ldr	r3, [pc, #660]	; (80057c4 <UART_SetConfig+0x350>)
 8005530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005532:	2203      	movs	r2, #3
 8005534:	4013      	ands	r3, r2
 8005536:	2b03      	cmp	r3, #3
 8005538:	d01d      	beq.n	8005576 <UART_SetConfig+0x102>
 800553a:	d823      	bhi.n	8005584 <UART_SetConfig+0x110>
 800553c:	2b02      	cmp	r3, #2
 800553e:	d00c      	beq.n	800555a <UART_SetConfig+0xe6>
 8005540:	d820      	bhi.n	8005584 <UART_SetConfig+0x110>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <UART_SetConfig+0xd8>
 8005546:	2b01      	cmp	r3, #1
 8005548:	d00e      	beq.n	8005568 <UART_SetConfig+0xf4>
 800554a:	e01b      	b.n	8005584 <UART_SetConfig+0x110>
 800554c:	231b      	movs	r3, #27
 800554e:	2220      	movs	r2, #32
 8005550:	189b      	adds	r3, r3, r2
 8005552:	19db      	adds	r3, r3, r7
 8005554:	2200      	movs	r2, #0
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	e154      	b.n	8005804 <UART_SetConfig+0x390>
 800555a:	231b      	movs	r3, #27
 800555c:	2220      	movs	r2, #32
 800555e:	189b      	adds	r3, r3, r2
 8005560:	19db      	adds	r3, r3, r7
 8005562:	2202      	movs	r2, #2
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	e14d      	b.n	8005804 <UART_SetConfig+0x390>
 8005568:	231b      	movs	r3, #27
 800556a:	2220      	movs	r2, #32
 800556c:	189b      	adds	r3, r3, r2
 800556e:	19db      	adds	r3, r3, r7
 8005570:	2204      	movs	r2, #4
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	e146      	b.n	8005804 <UART_SetConfig+0x390>
 8005576:	231b      	movs	r3, #27
 8005578:	2220      	movs	r2, #32
 800557a:	189b      	adds	r3, r3, r2
 800557c:	19db      	adds	r3, r3, r7
 800557e:	2208      	movs	r2, #8
 8005580:	701a      	strb	r2, [r3, #0]
 8005582:	e13f      	b.n	8005804 <UART_SetConfig+0x390>
 8005584:	231b      	movs	r3, #27
 8005586:	2220      	movs	r2, #32
 8005588:	189b      	adds	r3, r3, r2
 800558a:	19db      	adds	r3, r3, r7
 800558c:	2210      	movs	r2, #16
 800558e:	701a      	strb	r2, [r3, #0]
 8005590:	e138      	b.n	8005804 <UART_SetConfig+0x390>
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a8c      	ldr	r2, [pc, #560]	; (80057c8 <UART_SetConfig+0x354>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d131      	bne.n	8005600 <UART_SetConfig+0x18c>
 800559c:	4b89      	ldr	r3, [pc, #548]	; (80057c4 <UART_SetConfig+0x350>)
 800559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a0:	220c      	movs	r2, #12
 80055a2:	4013      	ands	r3, r2
 80055a4:	2b0c      	cmp	r3, #12
 80055a6:	d01d      	beq.n	80055e4 <UART_SetConfig+0x170>
 80055a8:	d823      	bhi.n	80055f2 <UART_SetConfig+0x17e>
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d00c      	beq.n	80055c8 <UART_SetConfig+0x154>
 80055ae:	d820      	bhi.n	80055f2 <UART_SetConfig+0x17e>
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <UART_SetConfig+0x146>
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	d00e      	beq.n	80055d6 <UART_SetConfig+0x162>
 80055b8:	e01b      	b.n	80055f2 <UART_SetConfig+0x17e>
 80055ba:	231b      	movs	r3, #27
 80055bc:	2220      	movs	r2, #32
 80055be:	189b      	adds	r3, r3, r2
 80055c0:	19db      	adds	r3, r3, r7
 80055c2:	2200      	movs	r2, #0
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	e11d      	b.n	8005804 <UART_SetConfig+0x390>
 80055c8:	231b      	movs	r3, #27
 80055ca:	2220      	movs	r2, #32
 80055cc:	189b      	adds	r3, r3, r2
 80055ce:	19db      	adds	r3, r3, r7
 80055d0:	2202      	movs	r2, #2
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	e116      	b.n	8005804 <UART_SetConfig+0x390>
 80055d6:	231b      	movs	r3, #27
 80055d8:	2220      	movs	r2, #32
 80055da:	189b      	adds	r3, r3, r2
 80055dc:	19db      	adds	r3, r3, r7
 80055de:	2204      	movs	r2, #4
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	e10f      	b.n	8005804 <UART_SetConfig+0x390>
 80055e4:	231b      	movs	r3, #27
 80055e6:	2220      	movs	r2, #32
 80055e8:	189b      	adds	r3, r3, r2
 80055ea:	19db      	adds	r3, r3, r7
 80055ec:	2208      	movs	r2, #8
 80055ee:	701a      	strb	r2, [r3, #0]
 80055f0:	e108      	b.n	8005804 <UART_SetConfig+0x390>
 80055f2:	231b      	movs	r3, #27
 80055f4:	2220      	movs	r2, #32
 80055f6:	189b      	adds	r3, r3, r2
 80055f8:	19db      	adds	r3, r3, r7
 80055fa:	2210      	movs	r2, #16
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	e101      	b.n	8005804 <UART_SetConfig+0x390>
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a71      	ldr	r2, [pc, #452]	; (80057cc <UART_SetConfig+0x358>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d131      	bne.n	800566e <UART_SetConfig+0x1fa>
 800560a:	4b6e      	ldr	r3, [pc, #440]	; (80057c4 <UART_SetConfig+0x350>)
 800560c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560e:	2230      	movs	r2, #48	; 0x30
 8005610:	4013      	ands	r3, r2
 8005612:	2b30      	cmp	r3, #48	; 0x30
 8005614:	d01d      	beq.n	8005652 <UART_SetConfig+0x1de>
 8005616:	d823      	bhi.n	8005660 <UART_SetConfig+0x1ec>
 8005618:	2b20      	cmp	r3, #32
 800561a:	d00c      	beq.n	8005636 <UART_SetConfig+0x1c2>
 800561c:	d820      	bhi.n	8005660 <UART_SetConfig+0x1ec>
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <UART_SetConfig+0x1b4>
 8005622:	2b10      	cmp	r3, #16
 8005624:	d00e      	beq.n	8005644 <UART_SetConfig+0x1d0>
 8005626:	e01b      	b.n	8005660 <UART_SetConfig+0x1ec>
 8005628:	231b      	movs	r3, #27
 800562a:	2220      	movs	r2, #32
 800562c:	189b      	adds	r3, r3, r2
 800562e:	19db      	adds	r3, r3, r7
 8005630:	2200      	movs	r2, #0
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	e0e6      	b.n	8005804 <UART_SetConfig+0x390>
 8005636:	231b      	movs	r3, #27
 8005638:	2220      	movs	r2, #32
 800563a:	189b      	adds	r3, r3, r2
 800563c:	19db      	adds	r3, r3, r7
 800563e:	2202      	movs	r2, #2
 8005640:	701a      	strb	r2, [r3, #0]
 8005642:	e0df      	b.n	8005804 <UART_SetConfig+0x390>
 8005644:	231b      	movs	r3, #27
 8005646:	2220      	movs	r2, #32
 8005648:	189b      	adds	r3, r3, r2
 800564a:	19db      	adds	r3, r3, r7
 800564c:	2204      	movs	r2, #4
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	e0d8      	b.n	8005804 <UART_SetConfig+0x390>
 8005652:	231b      	movs	r3, #27
 8005654:	2220      	movs	r2, #32
 8005656:	189b      	adds	r3, r3, r2
 8005658:	19db      	adds	r3, r3, r7
 800565a:	2208      	movs	r2, #8
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	e0d1      	b.n	8005804 <UART_SetConfig+0x390>
 8005660:	231b      	movs	r3, #27
 8005662:	2220      	movs	r2, #32
 8005664:	189b      	adds	r3, r3, r2
 8005666:	19db      	adds	r3, r3, r7
 8005668:	2210      	movs	r2, #16
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	e0ca      	b.n	8005804 <UART_SetConfig+0x390>
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a57      	ldr	r2, [pc, #348]	; (80057d0 <UART_SetConfig+0x35c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d106      	bne.n	8005686 <UART_SetConfig+0x212>
 8005678:	231b      	movs	r3, #27
 800567a:	2220      	movs	r2, #32
 800567c:	189b      	adds	r3, r3, r2
 800567e:	19db      	adds	r3, r3, r7
 8005680:	2200      	movs	r2, #0
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	e0be      	b.n	8005804 <UART_SetConfig+0x390>
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a52      	ldr	r2, [pc, #328]	; (80057d4 <UART_SetConfig+0x360>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d106      	bne.n	800569e <UART_SetConfig+0x22a>
 8005690:	231b      	movs	r3, #27
 8005692:	2220      	movs	r2, #32
 8005694:	189b      	adds	r3, r3, r2
 8005696:	19db      	adds	r3, r3, r7
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	e0b2      	b.n	8005804 <UART_SetConfig+0x390>
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a4d      	ldr	r2, [pc, #308]	; (80057d8 <UART_SetConfig+0x364>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d106      	bne.n	80056b6 <UART_SetConfig+0x242>
 80056a8:	231b      	movs	r3, #27
 80056aa:	2220      	movs	r2, #32
 80056ac:	189b      	adds	r3, r3, r2
 80056ae:	19db      	adds	r3, r3, r7
 80056b0:	2200      	movs	r2, #0
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	e0a6      	b.n	8005804 <UART_SetConfig+0x390>
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a3e      	ldr	r2, [pc, #248]	; (80057b4 <UART_SetConfig+0x340>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d13e      	bne.n	800573e <UART_SetConfig+0x2ca>
 80056c0:	4b40      	ldr	r3, [pc, #256]	; (80057c4 <UART_SetConfig+0x350>)
 80056c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056c4:	23c0      	movs	r3, #192	; 0xc0
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	4013      	ands	r3, r2
 80056ca:	22c0      	movs	r2, #192	; 0xc0
 80056cc:	0112      	lsls	r2, r2, #4
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d027      	beq.n	8005722 <UART_SetConfig+0x2ae>
 80056d2:	22c0      	movs	r2, #192	; 0xc0
 80056d4:	0112      	lsls	r2, r2, #4
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d82a      	bhi.n	8005730 <UART_SetConfig+0x2bc>
 80056da:	2280      	movs	r2, #128	; 0x80
 80056dc:	0112      	lsls	r2, r2, #4
 80056de:	4293      	cmp	r3, r2
 80056e0:	d011      	beq.n	8005706 <UART_SetConfig+0x292>
 80056e2:	2280      	movs	r2, #128	; 0x80
 80056e4:	0112      	lsls	r2, r2, #4
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d822      	bhi.n	8005730 <UART_SetConfig+0x2bc>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d004      	beq.n	80056f8 <UART_SetConfig+0x284>
 80056ee:	2280      	movs	r2, #128	; 0x80
 80056f0:	00d2      	lsls	r2, r2, #3
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00e      	beq.n	8005714 <UART_SetConfig+0x2a0>
 80056f6:	e01b      	b.n	8005730 <UART_SetConfig+0x2bc>
 80056f8:	231b      	movs	r3, #27
 80056fa:	2220      	movs	r2, #32
 80056fc:	189b      	adds	r3, r3, r2
 80056fe:	19db      	adds	r3, r3, r7
 8005700:	2200      	movs	r2, #0
 8005702:	701a      	strb	r2, [r3, #0]
 8005704:	e07e      	b.n	8005804 <UART_SetConfig+0x390>
 8005706:	231b      	movs	r3, #27
 8005708:	2220      	movs	r2, #32
 800570a:	189b      	adds	r3, r3, r2
 800570c:	19db      	adds	r3, r3, r7
 800570e:	2202      	movs	r2, #2
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	e077      	b.n	8005804 <UART_SetConfig+0x390>
 8005714:	231b      	movs	r3, #27
 8005716:	2220      	movs	r2, #32
 8005718:	189b      	adds	r3, r3, r2
 800571a:	19db      	adds	r3, r3, r7
 800571c:	2204      	movs	r2, #4
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	e070      	b.n	8005804 <UART_SetConfig+0x390>
 8005722:	231b      	movs	r3, #27
 8005724:	2220      	movs	r2, #32
 8005726:	189b      	adds	r3, r3, r2
 8005728:	19db      	adds	r3, r3, r7
 800572a:	2208      	movs	r2, #8
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	e069      	b.n	8005804 <UART_SetConfig+0x390>
 8005730:	231b      	movs	r3, #27
 8005732:	2220      	movs	r2, #32
 8005734:	189b      	adds	r3, r3, r2
 8005736:	19db      	adds	r3, r3, r7
 8005738:	2210      	movs	r2, #16
 800573a:	701a      	strb	r2, [r3, #0]
 800573c:	e062      	b.n	8005804 <UART_SetConfig+0x390>
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1d      	ldr	r2, [pc, #116]	; (80057b8 <UART_SetConfig+0x344>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d157      	bne.n	80057f8 <UART_SetConfig+0x384>
 8005748:	4b1e      	ldr	r3, [pc, #120]	; (80057c4 <UART_SetConfig+0x350>)
 800574a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800574c:	23c0      	movs	r3, #192	; 0xc0
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4013      	ands	r3, r2
 8005752:	22c0      	movs	r2, #192	; 0xc0
 8005754:	0092      	lsls	r2, r2, #2
 8005756:	4293      	cmp	r3, r2
 8005758:	d040      	beq.n	80057dc <UART_SetConfig+0x368>
 800575a:	22c0      	movs	r2, #192	; 0xc0
 800575c:	0092      	lsls	r2, r2, #2
 800575e:	4293      	cmp	r3, r2
 8005760:	d843      	bhi.n	80057ea <UART_SetConfig+0x376>
 8005762:	2280      	movs	r2, #128	; 0x80
 8005764:	0092      	lsls	r2, r2, #2
 8005766:	4293      	cmp	r3, r2
 8005768:	d011      	beq.n	800578e <UART_SetConfig+0x31a>
 800576a:	2280      	movs	r2, #128	; 0x80
 800576c:	0092      	lsls	r2, r2, #2
 800576e:	4293      	cmp	r3, r2
 8005770:	d83b      	bhi.n	80057ea <UART_SetConfig+0x376>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d004      	beq.n	8005780 <UART_SetConfig+0x30c>
 8005776:	2280      	movs	r2, #128	; 0x80
 8005778:	0052      	lsls	r2, r2, #1
 800577a:	4293      	cmp	r3, r2
 800577c:	d00e      	beq.n	800579c <UART_SetConfig+0x328>
 800577e:	e034      	b.n	80057ea <UART_SetConfig+0x376>
 8005780:	231b      	movs	r3, #27
 8005782:	2220      	movs	r2, #32
 8005784:	189b      	adds	r3, r3, r2
 8005786:	19db      	adds	r3, r3, r7
 8005788:	2200      	movs	r2, #0
 800578a:	701a      	strb	r2, [r3, #0]
 800578c:	e03a      	b.n	8005804 <UART_SetConfig+0x390>
 800578e:	231b      	movs	r3, #27
 8005790:	2220      	movs	r2, #32
 8005792:	189b      	adds	r3, r3, r2
 8005794:	19db      	adds	r3, r3, r7
 8005796:	2202      	movs	r2, #2
 8005798:	701a      	strb	r2, [r3, #0]
 800579a:	e033      	b.n	8005804 <UART_SetConfig+0x390>
 800579c:	231b      	movs	r3, #27
 800579e:	2220      	movs	r2, #32
 80057a0:	189b      	adds	r3, r3, r2
 80057a2:	19db      	adds	r3, r3, r7
 80057a4:	2204      	movs	r2, #4
 80057a6:	701a      	strb	r2, [r3, #0]
 80057a8:	e02c      	b.n	8005804 <UART_SetConfig+0x390>
 80057aa:	46c0      	nop			; (mov r8, r8)
 80057ac:	cfff69f3 	.word	0xcfff69f3
 80057b0:	ffffcfff 	.word	0xffffcfff
 80057b4:	40008000 	.word	0x40008000
 80057b8:	40008400 	.word	0x40008400
 80057bc:	11fff4ff 	.word	0x11fff4ff
 80057c0:	40013800 	.word	0x40013800
 80057c4:	40021000 	.word	0x40021000
 80057c8:	40004400 	.word	0x40004400
 80057cc:	40004800 	.word	0x40004800
 80057d0:	40004c00 	.word	0x40004c00
 80057d4:	40005000 	.word	0x40005000
 80057d8:	40013c00 	.word	0x40013c00
 80057dc:	231b      	movs	r3, #27
 80057de:	2220      	movs	r2, #32
 80057e0:	189b      	adds	r3, r3, r2
 80057e2:	19db      	adds	r3, r3, r7
 80057e4:	2208      	movs	r2, #8
 80057e6:	701a      	strb	r2, [r3, #0]
 80057e8:	e00c      	b.n	8005804 <UART_SetConfig+0x390>
 80057ea:	231b      	movs	r3, #27
 80057ec:	2220      	movs	r2, #32
 80057ee:	189b      	adds	r3, r3, r2
 80057f0:	19db      	adds	r3, r3, r7
 80057f2:	2210      	movs	r2, #16
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	e005      	b.n	8005804 <UART_SetConfig+0x390>
 80057f8:	231b      	movs	r3, #27
 80057fa:	2220      	movs	r2, #32
 80057fc:	189b      	adds	r3, r3, r2
 80057fe:	19db      	adds	r3, r3, r7
 8005800:	2210      	movs	r2, #16
 8005802:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4ac1      	ldr	r2, [pc, #772]	; (8005b10 <UART_SetConfig+0x69c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d005      	beq.n	800581a <UART_SetConfig+0x3a6>
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4ac0      	ldr	r2, [pc, #768]	; (8005b14 <UART_SetConfig+0x6a0>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d000      	beq.n	800581a <UART_SetConfig+0x3a6>
 8005818:	e093      	b.n	8005942 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800581a:	231b      	movs	r3, #27
 800581c:	2220      	movs	r2, #32
 800581e:	189b      	adds	r3, r3, r2
 8005820:	19db      	adds	r3, r3, r7
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b08      	cmp	r3, #8
 8005826:	d015      	beq.n	8005854 <UART_SetConfig+0x3e0>
 8005828:	dc18      	bgt.n	800585c <UART_SetConfig+0x3e8>
 800582a:	2b04      	cmp	r3, #4
 800582c:	d00d      	beq.n	800584a <UART_SetConfig+0x3d6>
 800582e:	dc15      	bgt.n	800585c <UART_SetConfig+0x3e8>
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <UART_SetConfig+0x3c6>
 8005834:	2b02      	cmp	r3, #2
 8005836:	d005      	beq.n	8005844 <UART_SetConfig+0x3d0>
 8005838:	e010      	b.n	800585c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800583a:	f7fe fda9 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 800583e:	0003      	movs	r3, r0
 8005840:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005842:	e014      	b.n	800586e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005844:	4bb4      	ldr	r3, [pc, #720]	; (8005b18 <UART_SetConfig+0x6a4>)
 8005846:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005848:	e011      	b.n	800586e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800584a:	f7fe fd15 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 800584e:	0003      	movs	r3, r0
 8005850:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005852:	e00c      	b.n	800586e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005854:	2380      	movs	r3, #128	; 0x80
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800585a:	e008      	b.n	800586e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005860:	231a      	movs	r3, #26
 8005862:	2220      	movs	r2, #32
 8005864:	189b      	adds	r3, r3, r2
 8005866:	19db      	adds	r3, r3, r7
 8005868:	2201      	movs	r2, #1
 800586a:	701a      	strb	r2, [r3, #0]
        break;
 800586c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800586e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005870:	2b00      	cmp	r3, #0
 8005872:	d100      	bne.n	8005876 <UART_SetConfig+0x402>
 8005874:	e135      	b.n	8005ae2 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800587a:	4ba8      	ldr	r3, [pc, #672]	; (8005b1c <UART_SetConfig+0x6a8>)
 800587c:	0052      	lsls	r2, r2, #1
 800587e:	5ad3      	ldrh	r3, [r2, r3]
 8005880:	0019      	movs	r1, r3
 8005882:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005884:	f7fa fc5a 	bl	800013c <__udivsi3>
 8005888:	0003      	movs	r3, r0
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	0013      	movs	r3, r2
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	189b      	adds	r3, r3, r2
 8005896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005898:	429a      	cmp	r2, r3
 800589a:	d305      	bcc.n	80058a8 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d906      	bls.n	80058b6 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80058a8:	231a      	movs	r3, #26
 80058aa:	2220      	movs	r2, #32
 80058ac:	189b      	adds	r3, r3, r2
 80058ae:	19db      	adds	r3, r3, r7
 80058b0:	2201      	movs	r2, #1
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	e044      	b.n	8005940 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	2300      	movs	r3, #0
 80058bc:	61fb      	str	r3, [r7, #28]
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058c2:	4b96      	ldr	r3, [pc, #600]	; (8005b1c <UART_SetConfig+0x6a8>)
 80058c4:	0052      	lsls	r2, r2, #1
 80058c6:	5ad3      	ldrh	r3, [r2, r3]
 80058c8:	613b      	str	r3, [r7, #16]
 80058ca:	2300      	movs	r3, #0
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	69b8      	ldr	r0, [r7, #24]
 80058d4:	69f9      	ldr	r1, [r7, #28]
 80058d6:	f7fa fde5 	bl	80004a4 <__aeabi_uldivmod>
 80058da:	0002      	movs	r2, r0
 80058dc:	000b      	movs	r3, r1
 80058de:	0e11      	lsrs	r1, r2, #24
 80058e0:	021d      	lsls	r5, r3, #8
 80058e2:	430d      	orrs	r5, r1
 80058e4:	0214      	lsls	r4, r2, #8
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	085b      	lsrs	r3, r3, #1
 80058ec:	60bb      	str	r3, [r7, #8]
 80058ee:	2300      	movs	r3, #0
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	68b8      	ldr	r0, [r7, #8]
 80058f4:	68f9      	ldr	r1, [r7, #12]
 80058f6:	1900      	adds	r0, r0, r4
 80058f8:	4169      	adcs	r1, r5
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	2300      	movs	r3, #0
 8005902:	607b      	str	r3, [r7, #4]
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f7fa fdcc 	bl	80004a4 <__aeabi_uldivmod>
 800590c:	0002      	movs	r2, r0
 800590e:	000b      	movs	r3, r1
 8005910:	0013      	movs	r3, r2
 8005912:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005916:	23c0      	movs	r3, #192	; 0xc0
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	429a      	cmp	r2, r3
 800591c:	d309      	bcc.n	8005932 <UART_SetConfig+0x4be>
 800591e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005920:	2380      	movs	r3, #128	; 0x80
 8005922:	035b      	lsls	r3, r3, #13
 8005924:	429a      	cmp	r2, r3
 8005926:	d204      	bcs.n	8005932 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800592e:	60da      	str	r2, [r3, #12]
 8005930:	e006      	b.n	8005940 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005932:	231a      	movs	r3, #26
 8005934:	2220      	movs	r2, #32
 8005936:	189b      	adds	r3, r3, r2
 8005938:	19db      	adds	r3, r3, r7
 800593a:	2201      	movs	r2, #1
 800593c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800593e:	e0d0      	b.n	8005ae2 <UART_SetConfig+0x66e>
 8005940:	e0cf      	b.n	8005ae2 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	69da      	ldr	r2, [r3, #28]
 8005946:	2380      	movs	r3, #128	; 0x80
 8005948:	021b      	lsls	r3, r3, #8
 800594a:	429a      	cmp	r2, r3
 800594c:	d000      	beq.n	8005950 <UART_SetConfig+0x4dc>
 800594e:	e070      	b.n	8005a32 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8005950:	231b      	movs	r3, #27
 8005952:	2220      	movs	r2, #32
 8005954:	189b      	adds	r3, r3, r2
 8005956:	19db      	adds	r3, r3, r7
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b08      	cmp	r3, #8
 800595c:	d015      	beq.n	800598a <UART_SetConfig+0x516>
 800595e:	dc18      	bgt.n	8005992 <UART_SetConfig+0x51e>
 8005960:	2b04      	cmp	r3, #4
 8005962:	d00d      	beq.n	8005980 <UART_SetConfig+0x50c>
 8005964:	dc15      	bgt.n	8005992 <UART_SetConfig+0x51e>
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <UART_SetConfig+0x4fc>
 800596a:	2b02      	cmp	r3, #2
 800596c:	d005      	beq.n	800597a <UART_SetConfig+0x506>
 800596e:	e010      	b.n	8005992 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005970:	f7fe fd0e 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 8005974:	0003      	movs	r3, r0
 8005976:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005978:	e014      	b.n	80059a4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800597a:	4b67      	ldr	r3, [pc, #412]	; (8005b18 <UART_SetConfig+0x6a4>)
 800597c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800597e:	e011      	b.n	80059a4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005980:	f7fe fc7a 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 8005984:	0003      	movs	r3, r0
 8005986:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005988:	e00c      	b.n	80059a4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800598a:	2380      	movs	r3, #128	; 0x80
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005990:	e008      	b.n	80059a4 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005996:	231a      	movs	r3, #26
 8005998:	2220      	movs	r2, #32
 800599a:	189b      	adds	r3, r3, r2
 800599c:	19db      	adds	r3, r3, r7
 800599e:	2201      	movs	r2, #1
 80059a0:	701a      	strb	r2, [r3, #0]
        break;
 80059a2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d100      	bne.n	80059ac <UART_SetConfig+0x538>
 80059aa:	e09a      	b.n	8005ae2 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059b0:	4b5a      	ldr	r3, [pc, #360]	; (8005b1c <UART_SetConfig+0x6a8>)
 80059b2:	0052      	lsls	r2, r2, #1
 80059b4:	5ad3      	ldrh	r3, [r2, r3]
 80059b6:	0019      	movs	r1, r3
 80059b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80059ba:	f7fa fbbf 	bl	800013c <__udivsi3>
 80059be:	0003      	movs	r3, r0
 80059c0:	005a      	lsls	r2, r3, #1
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	085b      	lsrs	r3, r3, #1
 80059c8:	18d2      	adds	r2, r2, r3
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	0019      	movs	r1, r3
 80059d0:	0010      	movs	r0, r2
 80059d2:	f7fa fbb3 	bl	800013c <__udivsi3>
 80059d6:	0003      	movs	r3, r0
 80059d8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	2b0f      	cmp	r3, #15
 80059de:	d921      	bls.n	8005a24 <UART_SetConfig+0x5b0>
 80059e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059e2:	2380      	movs	r3, #128	; 0x80
 80059e4:	025b      	lsls	r3, r3, #9
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d21c      	bcs.n	8005a24 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	200e      	movs	r0, #14
 80059f0:	2420      	movs	r4, #32
 80059f2:	1903      	adds	r3, r0, r4
 80059f4:	19db      	adds	r3, r3, r7
 80059f6:	210f      	movs	r1, #15
 80059f8:	438a      	bics	r2, r1
 80059fa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2207      	movs	r2, #7
 8005a04:	4013      	ands	r3, r2
 8005a06:	b299      	uxth	r1, r3
 8005a08:	1903      	adds	r3, r0, r4
 8005a0a:	19db      	adds	r3, r3, r7
 8005a0c:	1902      	adds	r2, r0, r4
 8005a0e:	19d2      	adds	r2, r2, r7
 8005a10:	8812      	ldrh	r2, [r2, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	1902      	adds	r2, r0, r4
 8005a1c:	19d2      	adds	r2, r2, r7
 8005a1e:	8812      	ldrh	r2, [r2, #0]
 8005a20:	60da      	str	r2, [r3, #12]
 8005a22:	e05e      	b.n	8005ae2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005a24:	231a      	movs	r3, #26
 8005a26:	2220      	movs	r2, #32
 8005a28:	189b      	adds	r3, r3, r2
 8005a2a:	19db      	adds	r3, r3, r7
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	e057      	b.n	8005ae2 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a32:	231b      	movs	r3, #27
 8005a34:	2220      	movs	r2, #32
 8005a36:	189b      	adds	r3, r3, r2
 8005a38:	19db      	adds	r3, r3, r7
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d015      	beq.n	8005a6c <UART_SetConfig+0x5f8>
 8005a40:	dc18      	bgt.n	8005a74 <UART_SetConfig+0x600>
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d00d      	beq.n	8005a62 <UART_SetConfig+0x5ee>
 8005a46:	dc15      	bgt.n	8005a74 <UART_SetConfig+0x600>
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <UART_SetConfig+0x5de>
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d005      	beq.n	8005a5c <UART_SetConfig+0x5e8>
 8005a50:	e010      	b.n	8005a74 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a52:	f7fe fc9d 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 8005a56:	0003      	movs	r3, r0
 8005a58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a5a:	e014      	b.n	8005a86 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a5c:	4b2e      	ldr	r3, [pc, #184]	; (8005b18 <UART_SetConfig+0x6a4>)
 8005a5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a60:	e011      	b.n	8005a86 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a62:	f7fe fc09 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 8005a66:	0003      	movs	r3, r0
 8005a68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a6a:	e00c      	b.n	8005a86 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a6c:	2380      	movs	r3, #128	; 0x80
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a72:	e008      	b.n	8005a86 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005a78:	231a      	movs	r3, #26
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	189b      	adds	r3, r3, r2
 8005a7e:	19db      	adds	r3, r3, r7
 8005a80:	2201      	movs	r2, #1
 8005a82:	701a      	strb	r2, [r3, #0]
        break;
 8005a84:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d02a      	beq.n	8005ae2 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a90:	4b22      	ldr	r3, [pc, #136]	; (8005b1c <UART_SetConfig+0x6a8>)
 8005a92:	0052      	lsls	r2, r2, #1
 8005a94:	5ad3      	ldrh	r3, [r2, r3]
 8005a96:	0019      	movs	r1, r3
 8005a98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a9a:	f7fa fb4f 	bl	800013c <__udivsi3>
 8005a9e:	0003      	movs	r3, r0
 8005aa0:	001a      	movs	r2, r3
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	085b      	lsrs	r3, r3, #1
 8005aa8:	18d2      	adds	r2, r2, r3
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	0019      	movs	r1, r3
 8005ab0:	0010      	movs	r0, r2
 8005ab2:	f7fa fb43 	bl	800013c <__udivsi3>
 8005ab6:	0003      	movs	r3, r0
 8005ab8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	2b0f      	cmp	r3, #15
 8005abe:	d90a      	bls.n	8005ad6 <UART_SetConfig+0x662>
 8005ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac2:	2380      	movs	r3, #128	; 0x80
 8005ac4:	025b      	lsls	r3, r3, #9
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d205      	bcs.n	8005ad6 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	60da      	str	r2, [r3, #12]
 8005ad4:	e005      	b.n	8005ae2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005ad6:	231a      	movs	r3, #26
 8005ad8:	2220      	movs	r2, #32
 8005ada:	189b      	adds	r3, r3, r2
 8005adc:	19db      	adds	r3, r3, r7
 8005ade:	2201      	movs	r2, #1
 8005ae0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	226a      	movs	r2, #106	; 0x6a
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	2268      	movs	r2, #104	; 0x68
 8005aee:	2101      	movs	r1, #1
 8005af0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	2200      	movs	r2, #0
 8005af6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	2200      	movs	r2, #0
 8005afc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005afe:	231a      	movs	r3, #26
 8005b00:	2220      	movs	r2, #32
 8005b02:	189b      	adds	r3, r3, r2
 8005b04:	19db      	adds	r3, r3, r7
 8005b06:	781b      	ldrb	r3, [r3, #0]
}
 8005b08:	0018      	movs	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b010      	add	sp, #64	; 0x40
 8005b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8005b10:	40008000 	.word	0x40008000
 8005b14:	40008400 	.word	0x40008400
 8005b18:	00f42400 	.word	0x00f42400
 8005b1c:	0800a180 	.word	0x0800a180

08005b20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	4013      	ands	r3, r2
 8005b30:	d00b      	beq.n	8005b4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	4a4a      	ldr	r2, [pc, #296]	; (8005c64 <UART_AdvFeatureConfig+0x144>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	0019      	movs	r1, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4e:	2202      	movs	r2, #2
 8005b50:	4013      	ands	r3, r2
 8005b52:	d00b      	beq.n	8005b6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	4a43      	ldr	r2, [pc, #268]	; (8005c68 <UART_AdvFeatureConfig+0x148>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	0019      	movs	r1, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b70:	2204      	movs	r2, #4
 8005b72:	4013      	ands	r3, r2
 8005b74:	d00b      	beq.n	8005b8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	4a3b      	ldr	r2, [pc, #236]	; (8005c6c <UART_AdvFeatureConfig+0x14c>)
 8005b7e:	4013      	ands	r3, r2
 8005b80:	0019      	movs	r1, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b92:	2208      	movs	r2, #8
 8005b94:	4013      	ands	r3, r2
 8005b96:	d00b      	beq.n	8005bb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	4a34      	ldr	r2, [pc, #208]	; (8005c70 <UART_AdvFeatureConfig+0x150>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	0019      	movs	r1, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	2210      	movs	r2, #16
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	d00b      	beq.n	8005bd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	4a2c      	ldr	r2, [pc, #176]	; (8005c74 <UART_AdvFeatureConfig+0x154>)
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	0019      	movs	r1, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	4013      	ands	r3, r2
 8005bda:	d00b      	beq.n	8005bf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	4a25      	ldr	r2, [pc, #148]	; (8005c78 <UART_AdvFeatureConfig+0x158>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	0019      	movs	r1, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf8:	2240      	movs	r2, #64	; 0x40
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d01d      	beq.n	8005c3a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	4a1d      	ldr	r2, [pc, #116]	; (8005c7c <UART_AdvFeatureConfig+0x15c>)
 8005c06:	4013      	ands	r3, r2
 8005c08:	0019      	movs	r1, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c1a:	2380      	movs	r3, #128	; 0x80
 8005c1c:	035b      	lsls	r3, r3, #13
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d10b      	bne.n	8005c3a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	4a15      	ldr	r2, [pc, #84]	; (8005c80 <UART_AdvFeatureConfig+0x160>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	0019      	movs	r1, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	2280      	movs	r2, #128	; 0x80
 8005c40:	4013      	ands	r3, r2
 8005c42:	d00b      	beq.n	8005c5c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	4a0e      	ldr	r2, [pc, #56]	; (8005c84 <UART_AdvFeatureConfig+0x164>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	0019      	movs	r1, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	605a      	str	r2, [r3, #4]
  }
}
 8005c5c:	46c0      	nop			; (mov r8, r8)
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	b002      	add	sp, #8
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	fffdffff 	.word	0xfffdffff
 8005c68:	fffeffff 	.word	0xfffeffff
 8005c6c:	fffbffff 	.word	0xfffbffff
 8005c70:	ffff7fff 	.word	0xffff7fff
 8005c74:	ffffefff 	.word	0xffffefff
 8005c78:	ffffdfff 	.word	0xffffdfff
 8005c7c:	ffefffff 	.word	0xffefffff
 8005c80:	ff9fffff 	.word	0xff9fffff
 8005c84:	fff7ffff 	.word	0xfff7ffff

08005c88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af02      	add	r7, sp, #8
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2290      	movs	r2, #144	; 0x90
 8005c94:	2100      	movs	r1, #0
 8005c96:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c98:	f7fd f832 	bl	8002d00 <HAL_GetTick>
 8005c9c:	0003      	movs	r3, r0
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2208      	movs	r2, #8
 8005ca8:	4013      	ands	r3, r2
 8005caa:	2b08      	cmp	r3, #8
 8005cac:	d10c      	bne.n	8005cc8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2280      	movs	r2, #128	; 0x80
 8005cb2:	0391      	lsls	r1, r2, #14
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	4a1a      	ldr	r2, [pc, #104]	; (8005d20 <UART_CheckIdleState+0x98>)
 8005cb8:	9200      	str	r2, [sp, #0]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f000 f832 	bl	8005d24 <UART_WaitOnFlagUntilTimeout>
 8005cc0:	1e03      	subs	r3, r0, #0
 8005cc2:	d001      	beq.n	8005cc8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e026      	b.n	8005d16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2204      	movs	r2, #4
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d10c      	bne.n	8005cf0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2280      	movs	r2, #128	; 0x80
 8005cda:	03d1      	lsls	r1, r2, #15
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	4a10      	ldr	r2, [pc, #64]	; (8005d20 <UART_CheckIdleState+0x98>)
 8005ce0:	9200      	str	r2, [sp, #0]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f000 f81e 	bl	8005d24 <UART_WaitOnFlagUntilTimeout>
 8005ce8:	1e03      	subs	r3, r0, #0
 8005cea:	d001      	beq.n	8005cf0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e012      	b.n	8005d16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2288      	movs	r2, #136	; 0x88
 8005cf4:	2120      	movs	r1, #32
 8005cf6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	228c      	movs	r2, #140	; 0x8c
 8005cfc:	2120      	movs	r1, #32
 8005cfe:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2284      	movs	r2, #132	; 0x84
 8005d10:	2100      	movs	r1, #0
 8005d12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	0018      	movs	r0, r3
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	b004      	add	sp, #16
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	46c0      	nop			; (mov r8, r8)
 8005d20:	01ffffff 	.word	0x01ffffff

08005d24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b094      	sub	sp, #80	; 0x50
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	603b      	str	r3, [r7, #0]
 8005d30:	1dfb      	adds	r3, r7, #7
 8005d32:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d34:	e0a7      	b.n	8005e86 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d38:	3301      	adds	r3, #1
 8005d3a:	d100      	bne.n	8005d3e <UART_WaitOnFlagUntilTimeout+0x1a>
 8005d3c:	e0a3      	b.n	8005e86 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d3e:	f7fc ffdf 	bl	8002d00 <HAL_GetTick>
 8005d42:	0002      	movs	r2, r0
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d302      	bcc.n	8005d54 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d13f      	bne.n	8005dd4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d54:	f3ef 8310 	mrs	r3, PRIMASK
 8005d58:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d5e:	2301      	movs	r3, #1
 8005d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	f383 8810 	msr	PRIMASK, r3
}
 8005d68:	46c0      	nop			; (mov r8, r8)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	494e      	ldr	r1, [pc, #312]	; (8005eb0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005d76:	400a      	ands	r2, r1
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d7c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	f383 8810 	msr	PRIMASK, r3
}
 8005d84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d86:	f3ef 8310 	mrs	r3, PRIMASK
 8005d8a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d90:	2301      	movs	r3, #1
 8005d92:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d96:	f383 8810 	msr	PRIMASK, r3
}
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2101      	movs	r1, #1
 8005da8:	438a      	bics	r2, r1
 8005daa:	609a      	str	r2, [r3, #8]
 8005dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db2:	f383 8810 	msr	PRIMASK, r3
}
 8005db6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2288      	movs	r2, #136	; 0x88
 8005dbc:	2120      	movs	r1, #32
 8005dbe:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	228c      	movs	r2, #140	; 0x8c
 8005dc4:	2120      	movs	r1, #32
 8005dc6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2284      	movs	r2, #132	; 0x84
 8005dcc:	2100      	movs	r1, #0
 8005dce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e069      	b.n	8005ea8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2204      	movs	r2, #4
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d052      	beq.n	8005e86 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69da      	ldr	r2, [r3, #28]
 8005de6:	2380      	movs	r3, #128	; 0x80
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	401a      	ands	r2, r3
 8005dec:	2380      	movs	r3, #128	; 0x80
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d148      	bne.n	8005e86 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2280      	movs	r2, #128	; 0x80
 8005dfa:	0112      	lsls	r2, r2, #4
 8005dfc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8005e02:	613b      	str	r3, [r7, #16]
  return(result);
 8005e04:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e08:	2301      	movs	r3, #1
 8005e0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f383 8810 	msr	PRIMASK, r3
}
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4924      	ldr	r1, [pc, #144]	; (8005eb0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005e20:	400a      	ands	r2, r1
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e26:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	f383 8810 	msr	PRIMASK, r3
}
 8005e2e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e30:	f3ef 8310 	mrs	r3, PRIMASK
 8005e34:	61fb      	str	r3, [r7, #28]
  return(result);
 8005e36:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e38:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	f383 8810 	msr	PRIMASK, r3
}
 8005e44:	46c0      	nop			; (mov r8, r8)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2101      	movs	r1, #1
 8005e52:	438a      	bics	r2, r1
 8005e54:	609a      	str	r2, [r3, #8]
 8005e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e58:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	f383 8810 	msr	PRIMASK, r3
}
 8005e60:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2288      	movs	r2, #136	; 0x88
 8005e66:	2120      	movs	r1, #32
 8005e68:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	228c      	movs	r2, #140	; 0x8c
 8005e6e:	2120      	movs	r1, #32
 8005e70:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2290      	movs	r2, #144	; 0x90
 8005e76:	2120      	movs	r1, #32
 8005e78:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2284      	movs	r2, #132	; 0x84
 8005e7e:	2100      	movs	r1, #0
 8005e80:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e010      	b.n	8005ea8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	425a      	negs	r2, r3
 8005e96:	4153      	adcs	r3, r2
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	001a      	movs	r2, r3
 8005e9c:	1dfb      	adds	r3, r7, #7
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d100      	bne.n	8005ea6 <UART_WaitOnFlagUntilTimeout+0x182>
 8005ea4:	e747      	b.n	8005d36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	b014      	add	sp, #80	; 0x50
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	fffffe5f 	.word	0xfffffe5f

08005eb4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b090      	sub	sp, #64	; 0x40
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	1dbb      	adds	r3, r7, #6
 8005ec0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	1dba      	adds	r2, r7, #6
 8005ecc:	215c      	movs	r1, #92	; 0x5c
 8005ece:	8812      	ldrh	r2, [r2, #0]
 8005ed0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2290      	movs	r2, #144	; 0x90
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	228c      	movs	r2, #140	; 0x8c
 8005ede:	2122      	movs	r1, #34	; 0x22
 8005ee0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2280      	movs	r2, #128	; 0x80
 8005ee6:	589b      	ldr	r3, [r3, r2]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d02d      	beq.n	8005f48 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2280      	movs	r2, #128	; 0x80
 8005ef0:	589b      	ldr	r3, [r3, r2]
 8005ef2:	4a40      	ldr	r2, [pc, #256]	; (8005ff4 <UART_Start_Receive_DMA+0x140>)
 8005ef4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2280      	movs	r2, #128	; 0x80
 8005efa:	589b      	ldr	r3, [r3, r2]
 8005efc:	4a3e      	ldr	r2, [pc, #248]	; (8005ff8 <UART_Start_Receive_DMA+0x144>)
 8005efe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2280      	movs	r2, #128	; 0x80
 8005f04:	589b      	ldr	r3, [r3, r2]
 8005f06:	4a3d      	ldr	r2, [pc, #244]	; (8005ffc <UART_Start_Receive_DMA+0x148>)
 8005f08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2280      	movs	r2, #128	; 0x80
 8005f0e:	589b      	ldr	r3, [r3, r2]
 8005f10:	2200      	movs	r2, #0
 8005f12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2280      	movs	r2, #128	; 0x80
 8005f18:	5898      	ldr	r0, [r3, r2]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3324      	adds	r3, #36	; 0x24
 8005f20:	0019      	movs	r1, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f26:	001a      	movs	r2, r3
 8005f28:	1dbb      	adds	r3, r7, #6
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	f7fd f8a0 	bl	8003070 <HAL_DMA_Start_IT>
 8005f30:	1e03      	subs	r3, r0, #0
 8005f32:	d009      	beq.n	8005f48 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2290      	movs	r2, #144	; 0x90
 8005f38:	2110      	movs	r1, #16
 8005f3a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	228c      	movs	r2, #140	; 0x8c
 8005f40:	2120      	movs	r1, #32
 8005f42:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e050      	b.n	8005fea <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d019      	beq.n	8005f84 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f50:	f3ef 8310 	mrs	r3, PRIMASK
 8005f54:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	f383 8810 	msr	PRIMASK, r3
}
 8005f64:	46c0      	nop			; (mov r8, r8)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2180      	movs	r1, #128	; 0x80
 8005f72:	0049      	lsls	r1, r1, #1
 8005f74:	430a      	orrs	r2, r1
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	f383 8810 	msr	PRIMASK, r3
}
 8005f82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f84:	f3ef 8310 	mrs	r3, PRIMASK
 8005f88:	613b      	str	r3, [r7, #16]
  return(result);
 8005f8a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f8e:	2301      	movs	r3, #1
 8005f90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f383 8810 	msr	PRIMASK, r3
}
 8005f98:	46c0      	nop			; (mov r8, r8)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	609a      	str	r2, [r3, #8]
 8005faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	f383 8810 	msr	PRIMASK, r3
}
 8005fb4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8005fba:	61fb      	str	r3, [r7, #28]
  return(result);
 8005fbc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	f383 8810 	msr	PRIMASK, r3
}
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2140      	movs	r1, #64	; 0x40
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	609a      	str	r2, [r3, #8]
 8005fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	f383 8810 	msr	PRIMASK, r3
}
 8005fe6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	0018      	movs	r0, r3
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b010      	add	sp, #64	; 0x40
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	46c0      	nop			; (mov r8, r8)
 8005ff4:	0800614d 	.word	0x0800614d
 8005ff8:	0800627d 	.word	0x0800627d
 8005ffc:	080062bf 	.word	0x080062bf

08006000 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08a      	sub	sp, #40	; 0x28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006008:	f3ef 8310 	mrs	r3, PRIMASK
 800600c:	60bb      	str	r3, [r7, #8]
  return(result);
 800600e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
 8006012:	2301      	movs	r3, #1
 8006014:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f383 8810 	msr	PRIMASK, r3
}
 800601c:	46c0      	nop			; (mov r8, r8)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	21c0      	movs	r1, #192	; 0xc0
 800602a:	438a      	bics	r2, r1
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f383 8810 	msr	PRIMASK, r3
}
 8006038:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800603a:	f3ef 8310 	mrs	r3, PRIMASK
 800603e:	617b      	str	r3, [r7, #20]
  return(result);
 8006040:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006042:	623b      	str	r3, [r7, #32]
 8006044:	2301      	movs	r3, #1
 8006046:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	f383 8810 	msr	PRIMASK, r3
}
 800604e:	46c0      	nop			; (mov r8, r8)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4908      	ldr	r1, [pc, #32]	; (800607c <UART_EndTxTransfer+0x7c>)
 800605c:	400a      	ands	r2, r1
 800605e:	609a      	str	r2, [r3, #8]
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	f383 8810 	msr	PRIMASK, r3
}
 800606a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2288      	movs	r2, #136	; 0x88
 8006070:	2120      	movs	r1, #32
 8006072:	5099      	str	r1, [r3, r2]
}
 8006074:	46c0      	nop			; (mov r8, r8)
 8006076:	46bd      	mov	sp, r7
 8006078:	b00a      	add	sp, #40	; 0x28
 800607a:	bd80      	pop	{r7, pc}
 800607c:	ff7fffff 	.word	0xff7fffff

08006080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08e      	sub	sp, #56	; 0x38
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006088:	f3ef 8310 	mrs	r3, PRIMASK
 800608c:	617b      	str	r3, [r7, #20]
  return(result);
 800608e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006090:	637b      	str	r3, [r7, #52]	; 0x34
 8006092:	2301      	movs	r3, #1
 8006094:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	f383 8810 	msr	PRIMASK, r3
}
 800609c:	46c0      	nop			; (mov r8, r8)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4926      	ldr	r1, [pc, #152]	; (8006144 <UART_EndRxTransfer+0xc4>)
 80060aa:	400a      	ands	r2, r1
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f383 8810 	msr	PRIMASK, r3
}
 80060b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ba:	f3ef 8310 	mrs	r3, PRIMASK
 80060be:	623b      	str	r3, [r7, #32]
  return(result);
 80060c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060c2:	633b      	str	r3, [r7, #48]	; 0x30
 80060c4:	2301      	movs	r3, #1
 80060c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	f383 8810 	msr	PRIMASK, r3
}
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	491b      	ldr	r1, [pc, #108]	; (8006148 <UART_EndRxTransfer+0xc8>)
 80060dc:	400a      	ands	r2, r1
 80060de:	609a      	str	r2, [r3, #8]
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e6:	f383 8810 	msr	PRIMASK, r3
}
 80060ea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d118      	bne.n	8006126 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060f4:	f3ef 8310 	mrs	r3, PRIMASK
 80060f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80060fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060fe:	2301      	movs	r3, #1
 8006100:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f383 8810 	msr	PRIMASK, r3
}
 8006108:	46c0      	nop			; (mov r8, r8)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2110      	movs	r1, #16
 8006116:	438a      	bics	r2, r1
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f383 8810 	msr	PRIMASK, r3
}
 8006124:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	228c      	movs	r2, #140	; 0x8c
 800612a:	2120      	movs	r1, #32
 800612c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	675a      	str	r2, [r3, #116]	; 0x74
}
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	46bd      	mov	sp, r7
 800613e:	b00e      	add	sp, #56	; 0x38
 8006140:	bd80      	pop	{r7, pc}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	fffffedf 	.word	0xfffffedf
 8006148:	effffffe 	.word	0xeffffffe

0800614c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b094      	sub	sp, #80	; 0x50
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2220      	movs	r2, #32
 8006162:	4013      	ands	r3, r2
 8006164:	d16f      	bne.n	8006246 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8006166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006168:	225e      	movs	r2, #94	; 0x5e
 800616a:	2100      	movs	r1, #0
 800616c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800616e:	f3ef 8310 	mrs	r3, PRIMASK
 8006172:	61bb      	str	r3, [r7, #24]
  return(result);
 8006174:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006176:	64bb      	str	r3, [r7, #72]	; 0x48
 8006178:	2301      	movs	r3, #1
 800617a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f383 8810 	msr	PRIMASK, r3
}
 8006182:	46c0      	nop			; (mov r8, r8)
 8006184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	493a      	ldr	r1, [pc, #232]	; (8006278 <UART_DMAReceiveCplt+0x12c>)
 8006190:	400a      	ands	r2, r1
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006196:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	f383 8810 	msr	PRIMASK, r3
}
 800619e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061a0:	f3ef 8310 	mrs	r3, PRIMASK
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a8:	647b      	str	r3, [r7, #68]	; 0x44
 80061aa:	2301      	movs	r3, #1
 80061ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b0:	f383 8810 	msr	PRIMASK, r3
}
 80061b4:	46c0      	nop			; (mov r8, r8)
 80061b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2101      	movs	r1, #1
 80061c2:	438a      	bics	r2, r1
 80061c4:	609a      	str	r2, [r3, #8]
 80061c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	f383 8810 	msr	PRIMASK, r3
}
 80061d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061d2:	f3ef 8310 	mrs	r3, PRIMASK
 80061d6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80061d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061da:	643b      	str	r3, [r7, #64]	; 0x40
 80061dc:	2301      	movs	r3, #1
 80061de:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e2:	f383 8810 	msr	PRIMASK, r3
}
 80061e6:	46c0      	nop			; (mov r8, r8)
 80061e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689a      	ldr	r2, [r3, #8]
 80061ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2140      	movs	r1, #64	; 0x40
 80061f4:	438a      	bics	r2, r1
 80061f6:	609a      	str	r2, [r3, #8]
 80061f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	f383 8810 	msr	PRIMASK, r3
}
 8006202:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006206:	228c      	movs	r2, #140	; 0x8c
 8006208:	2120      	movs	r1, #32
 800620a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800620c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800620e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006210:	2b01      	cmp	r3, #1
 8006212:	d118      	bne.n	8006246 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006214:	f3ef 8310 	mrs	r3, PRIMASK
 8006218:	60fb      	str	r3, [r7, #12]
  return(result);
 800621a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800621c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800621e:	2301      	movs	r3, #1
 8006220:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f383 8810 	msr	PRIMASK, r3
}
 8006228:	46c0      	nop			; (mov r8, r8)
 800622a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2110      	movs	r1, #16
 8006236:	438a      	bics	r2, r1
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800623c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f383 8810 	msr	PRIMASK, r3
}
 8006244:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006248:	2200      	movs	r2, #0
 800624a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800624c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800624e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006250:	2b01      	cmp	r3, #1
 8006252:	d108      	bne.n	8006266 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006256:	225c      	movs	r2, #92	; 0x5c
 8006258:	5a9a      	ldrh	r2, [r3, r2]
 800625a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625c:	0011      	movs	r1, r2
 800625e:	0018      	movs	r0, r3
 8006260:	f7ff f8fc 	bl	800545c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006264:	e003      	b.n	800626e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8006266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006268:	0018      	movs	r0, r3
 800626a:	f7ff f8df 	bl	800542c <HAL_UART_RxCpltCallback>
}
 800626e:	46c0      	nop			; (mov r8, r8)
 8006270:	46bd      	mov	sp, r7
 8006272:	b014      	add	sp, #80	; 0x50
 8006274:	bd80      	pop	{r7, pc}
 8006276:	46c0      	nop			; (mov r8, r8)
 8006278:	fffffeff 	.word	0xfffffeff

0800627c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006288:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2201      	movs	r2, #1
 800628e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006294:	2b01      	cmp	r3, #1
 8006296:	d10a      	bne.n	80062ae <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	225c      	movs	r2, #92	; 0x5c
 800629c:	5a9b      	ldrh	r3, [r3, r2]
 800629e:	085b      	lsrs	r3, r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	0011      	movs	r1, r2
 80062a6:	0018      	movs	r0, r3
 80062a8:	f7ff f8d8 	bl	800545c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062ac:	e003      	b.n	80062b6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	0018      	movs	r0, r3
 80062b2:	f7ff f8c3 	bl	800543c <HAL_UART_RxHalfCpltCallback>
}
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	46bd      	mov	sp, r7
 80062ba:	b004      	add	sp, #16
 80062bc:	bd80      	pop	{r7, pc}

080062be <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b086      	sub	sp, #24
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2288      	movs	r2, #136	; 0x88
 80062d0:	589b      	ldr	r3, [r3, r2]
 80062d2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	228c      	movs	r2, #140	; 0x8c
 80062d8:	589b      	ldr	r3, [r3, r2]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	2280      	movs	r2, #128	; 0x80
 80062e4:	4013      	ands	r3, r2
 80062e6:	2b80      	cmp	r3, #128	; 0x80
 80062e8:	d10a      	bne.n	8006300 <UART_DMAError+0x42>
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	2b21      	cmp	r3, #33	; 0x21
 80062ee:	d107      	bne.n	8006300 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2256      	movs	r2, #86	; 0x56
 80062f4:	2100      	movs	r1, #0
 80062f6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	0018      	movs	r0, r3
 80062fc:	f7ff fe80 	bl	8006000 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	2240      	movs	r2, #64	; 0x40
 8006308:	4013      	ands	r3, r2
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	d10a      	bne.n	8006324 <UART_DMAError+0x66>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b22      	cmp	r3, #34	; 0x22
 8006312:	d107      	bne.n	8006324 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	225e      	movs	r2, #94	; 0x5e
 8006318:	2100      	movs	r1, #0
 800631a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	0018      	movs	r0, r3
 8006320:	f7ff feae 	bl	8006080 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2290      	movs	r2, #144	; 0x90
 8006328:	589b      	ldr	r3, [r3, r2]
 800632a:	2210      	movs	r2, #16
 800632c:	431a      	orrs	r2, r3
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2190      	movs	r1, #144	; 0x90
 8006332:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	0018      	movs	r0, r3
 8006338:	f7ff f888 	bl	800544c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800633c:	46c0      	nop			; (mov r8, r8)
 800633e:	46bd      	mov	sp, r7
 8006340:	b006      	add	sp, #24
 8006342:	bd80      	pop	{r7, pc}

08006344 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006350:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	225e      	movs	r2, #94	; 0x5e
 8006356:	2100      	movs	r1, #0
 8006358:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2256      	movs	r2, #86	; 0x56
 800635e:	2100      	movs	r1, #0
 8006360:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	0018      	movs	r0, r3
 8006366:	f7ff f871 	bl	800544c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800636a:	46c0      	nop			; (mov r8, r8)
 800636c:	46bd      	mov	sp, r7
 800636e:	b004      	add	sp, #16
 8006370:	bd80      	pop	{r7, pc}

08006372 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b086      	sub	sp, #24
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800637a:	f3ef 8310 	mrs	r3, PRIMASK
 800637e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006380:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	2301      	movs	r3, #1
 8006386:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f383 8810 	msr	PRIMASK, r3
}
 800638e:	46c0      	nop			; (mov r8, r8)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2140      	movs	r1, #64	; 0x40
 800639c:	438a      	bics	r2, r1
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f383 8810 	msr	PRIMASK, r3
}
 80063aa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2288      	movs	r2, #136	; 0x88
 80063b0:	2120      	movs	r1, #32
 80063b2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	0018      	movs	r0, r3
 80063be:	f7ff f82d 	bl	800541c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063c2:	46c0      	nop			; (mov r8, r8)
 80063c4:	46bd      	mov	sp, r7
 80063c6:	b006      	add	sp, #24
 80063c8:	bd80      	pop	{r7, pc}

080063ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063d2:	46c0      	nop			; (mov r8, r8)
 80063d4:	46bd      	mov	sp, r7
 80063d6:	b002      	add	sp, #8
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80063e2:	46c0      	nop			; (mov r8, r8)
 80063e4:	46bd      	mov	sp, r7
 80063e6:	b002      	add	sp, #8
 80063e8:	bd80      	pop	{r7, pc}

080063ea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b082      	sub	sp, #8
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80063f2:	46c0      	nop			; (mov r8, r8)
 80063f4:	46bd      	mov	sp, r7
 80063f6:	b002      	add	sp, #8
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2284      	movs	r2, #132	; 0x84
 8006408:	5c9b      	ldrb	r3, [r3, r2]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d101      	bne.n	8006412 <HAL_UARTEx_DisableFifoMode+0x16>
 800640e:	2302      	movs	r3, #2
 8006410:	e027      	b.n	8006462 <HAL_UARTEx_DisableFifoMode+0x66>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2284      	movs	r2, #132	; 0x84
 8006416:	2101      	movs	r1, #1
 8006418:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2288      	movs	r2, #136	; 0x88
 800641e:	2124      	movs	r1, #36	; 0x24
 8006420:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2101      	movs	r1, #1
 8006436:	438a      	bics	r2, r1
 8006438:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4a0b      	ldr	r2, [pc, #44]	; (800646c <HAL_UARTEx_DisableFifoMode+0x70>)
 800643e:	4013      	ands	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2288      	movs	r2, #136	; 0x88
 8006454:	2120      	movs	r1, #32
 8006456:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2284      	movs	r2, #132	; 0x84
 800645c:	2100      	movs	r1, #0
 800645e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	0018      	movs	r0, r3
 8006464:	46bd      	mov	sp, r7
 8006466:	b004      	add	sp, #16
 8006468:	bd80      	pop	{r7, pc}
 800646a:	46c0      	nop			; (mov r8, r8)
 800646c:	dfffffff 	.word	0xdfffffff

08006470 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2284      	movs	r2, #132	; 0x84
 800647e:	5c9b      	ldrb	r3, [r3, r2]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d101      	bne.n	8006488 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006484:	2302      	movs	r3, #2
 8006486:	e02e      	b.n	80064e6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2284      	movs	r2, #132	; 0x84
 800648c:	2101      	movs	r1, #1
 800648e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2288      	movs	r2, #136	; 0x88
 8006494:	2124      	movs	r1, #36	; 0x24
 8006496:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2101      	movs	r1, #1
 80064ac:	438a      	bics	r2, r1
 80064ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	08d9      	lsrs	r1, r3, #3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	0018      	movs	r0, r3
 80064c8:	f000 f854 	bl	8006574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2288      	movs	r2, #136	; 0x88
 80064d8:	2120      	movs	r1, #32
 80064da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2284      	movs	r2, #132	; 0x84
 80064e0:	2100      	movs	r1, #0
 80064e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	0018      	movs	r0, r3
 80064e8:	46bd      	mov	sp, r7
 80064ea:	b004      	add	sp, #16
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2284      	movs	r2, #132	; 0x84
 80064fe:	5c9b      	ldrb	r3, [r3, r2]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006504:	2302      	movs	r3, #2
 8006506:	e02f      	b.n	8006568 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2284      	movs	r2, #132	; 0x84
 800650c:	2101      	movs	r1, #1
 800650e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2288      	movs	r2, #136	; 0x88
 8006514:	2124      	movs	r1, #36	; 0x24
 8006516:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2101      	movs	r1, #1
 800652c:	438a      	bics	r2, r1
 800652e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	4a0e      	ldr	r2, [pc, #56]	; (8006570 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006538:	4013      	ands	r3, r2
 800653a:	0019      	movs	r1, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	0018      	movs	r0, r3
 800654a:	f000 f813 	bl	8006574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2288      	movs	r2, #136	; 0x88
 800655a:	2120      	movs	r1, #32
 800655c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2284      	movs	r2, #132	; 0x84
 8006562:	2100      	movs	r1, #0
 8006564:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	0018      	movs	r0, r3
 800656a:	46bd      	mov	sp, r7
 800656c:	b004      	add	sp, #16
 800656e:	bd80      	pop	{r7, pc}
 8006570:	f1ffffff 	.word	0xf1ffffff

08006574 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006580:	2b00      	cmp	r3, #0
 8006582:	d108      	bne.n	8006596 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	226a      	movs	r2, #106	; 0x6a
 8006588:	2101      	movs	r1, #1
 800658a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2268      	movs	r2, #104	; 0x68
 8006590:	2101      	movs	r1, #1
 8006592:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006594:	e043      	b.n	800661e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006596:	260f      	movs	r6, #15
 8006598:	19bb      	adds	r3, r7, r6
 800659a:	2208      	movs	r2, #8
 800659c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800659e:	200e      	movs	r0, #14
 80065a0:	183b      	adds	r3, r7, r0
 80065a2:	2208      	movs	r2, #8
 80065a4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	0e5b      	lsrs	r3, r3, #25
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	240d      	movs	r4, #13
 80065b2:	193b      	adds	r3, r7, r4
 80065b4:	2107      	movs	r1, #7
 80065b6:	400a      	ands	r2, r1
 80065b8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	0f5b      	lsrs	r3, r3, #29
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	250c      	movs	r5, #12
 80065c6:	197b      	adds	r3, r7, r5
 80065c8:	2107      	movs	r1, #7
 80065ca:	400a      	ands	r2, r1
 80065cc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065ce:	183b      	adds	r3, r7, r0
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	197a      	adds	r2, r7, r5
 80065d4:	7812      	ldrb	r2, [r2, #0]
 80065d6:	4914      	ldr	r1, [pc, #80]	; (8006628 <UARTEx_SetNbDataToProcess+0xb4>)
 80065d8:	5c8a      	ldrb	r2, [r1, r2]
 80065da:	435a      	muls	r2, r3
 80065dc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80065de:	197b      	adds	r3, r7, r5
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	4a12      	ldr	r2, [pc, #72]	; (800662c <UARTEx_SetNbDataToProcess+0xb8>)
 80065e4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065e6:	0019      	movs	r1, r3
 80065e8:	f7f9 fe32 	bl	8000250 <__divsi3>
 80065ec:	0003      	movs	r3, r0
 80065ee:	b299      	uxth	r1, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	226a      	movs	r2, #106	; 0x6a
 80065f4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065f6:	19bb      	adds	r3, r7, r6
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	193a      	adds	r2, r7, r4
 80065fc:	7812      	ldrb	r2, [r2, #0]
 80065fe:	490a      	ldr	r1, [pc, #40]	; (8006628 <UARTEx_SetNbDataToProcess+0xb4>)
 8006600:	5c8a      	ldrb	r2, [r1, r2]
 8006602:	435a      	muls	r2, r3
 8006604:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006606:	193b      	adds	r3, r7, r4
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	4a08      	ldr	r2, [pc, #32]	; (800662c <UARTEx_SetNbDataToProcess+0xb8>)
 800660c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800660e:	0019      	movs	r1, r3
 8006610:	f7f9 fe1e 	bl	8000250 <__divsi3>
 8006614:	0003      	movs	r3, r0
 8006616:	b299      	uxth	r1, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2268      	movs	r2, #104	; 0x68
 800661c:	5299      	strh	r1, [r3, r2]
}
 800661e:	46c0      	nop			; (mov r8, r8)
 8006620:	46bd      	mov	sp, r7
 8006622:	b005      	add	sp, #20
 8006624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006626:	46c0      	nop			; (mov r8, r8)
 8006628:	0800a198 	.word	0x0800a198
 800662c:	0800a1a0 	.word	0x0800a1a0

08006630 <lcd_init>:
//------------ LCD at Master  -------


/*This Function initilicer the LCD display*/
lcd_status_t lcd_init(lcd_port_t *pines)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
	write_command(pines,LCD_FUNTION_SET);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2138      	movs	r1, #56	; 0x38
 800663c:	0018      	movs	r0, r3
 800663e:	f000 f9e1 	bl	8006a04 <write_command>
	write_command(pines,LCD_DISPLAY_CURSOR_SET);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	210f      	movs	r1, #15
 8006646:	0018      	movs	r0, r3
 8006648:	f000 f9dc 	bl	8006a04 <write_command>
	write_command(pines,LCD_CHARACTER_ENTRY_MODE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2106      	movs	r1, #6
 8006650:	0018      	movs	r0, r3
 8006652:	f000 f9d7 	bl	8006a04 <write_command>
	write_command(pines,LCD_DISPLAY_CURSOR_HOME);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2102      	movs	r1, #2
 800665a:	0018      	movs	r0, r3
 800665c:	f000 f9d2 	bl	8006a04 <write_command>
	write_command(pines,LCD_DISPLAY_CURSOR_SHIFT);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2110      	movs	r1, #16
 8006664:	0018      	movs	r0, r3
 8006666:	f000 f9cd 	bl	8006a04 <write_command>
	write_command(pines,LCD_CLEAR_DISPLAY);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2101      	movs	r1, #1
 800666e:	0018      	movs	r0, r3
 8006670:	f000 f9c8 	bl	8006a04 <write_command>

	printf("\r\n  --- LCD Init----\r\n");
 8006674:	4b04      	ldr	r3, [pc, #16]	; (8006688 <lcd_init+0x58>)
 8006676:	0018      	movs	r0, r3
 8006678:	f001 f88e 	bl	8007798 <puts>
	return LCD_INIT_OK;
 800667c:	2303      	movs	r3, #3
}
 800667e:	0018      	movs	r0, r3
 8006680:	46bd      	mov	sp, r7
 8006682:	b002      	add	sp, #8
 8006684:	bd80      	pop	{r7, pc}
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	0800a044 	.word	0x0800a044

0800668c <clear>:


/*This Function clear the display and puts the cursor in position 0,0*/
lcd_status_t clear(lcd_port_t *pines)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
	write_command(pines,LCD_DISPLAY_CURSOR_HOME);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2102      	movs	r1, #2
 8006698:	0018      	movs	r0, r3
 800669a:	f000 f9b3 	bl	8006a04 <write_command>
	write_command(pines,LCD_CLEAR_DISPLAY);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2101      	movs	r1, #1
 80066a2:	0018      	movs	r0, r3
 80066a4:	f000 f9ae 	bl	8006a04 <write_command>

	printf("\r\n  --- LCD Clear Display ----\r\n");
 80066a8:	4b04      	ldr	r3, [pc, #16]	; (80066bc <clear+0x30>)
 80066aa:	0018      	movs	r0, r3
 80066ac:	f001 f874 	bl	8007798 <puts>
	return LCD_CLEAR_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	0018      	movs	r0, r3
 80066b4:	46bd      	mov	sp, r7
 80066b6:	b002      	add	sp, #8
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	0800a05c 	.word	0x0800a05c

080066c0 <message>:


/*This Function pints an message into LCD display*/
lcd_status_t message(lcd_port_t *pines,char *buff, size_t length)

{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
	for(int i =0; i< length-1; i++)
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	e00b      	b.n	80066ea <message+0x2a>
		write_data(pines,*(buff++));
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	60ba      	str	r2, [r7, #8]
 80066d8:	781a      	ldrb	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	0011      	movs	r1, r2
 80066de:	0018      	movs	r0, r3
 80066e0:	f000 fa5f 	bl	8006ba2 <write_data>
	for(int i =0; i< length-1; i++)
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	3301      	adds	r3, #1
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	1e5a      	subs	r2, r3, #1
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d8ee      	bhi.n	80066d2 <message+0x12>

	return LCD_MESSAGE_OK;
 80066f4:	2304      	movs	r3, #4
}
 80066f6:	0018      	movs	r0, r3
 80066f8:	46bd      	mov	sp, r7
 80066fa:	b006      	add	sp, #24
 80066fc:	bd80      	pop	{r7, pc}

080066fe <get_number>:

/*This Function get a digits form float numbers*/
lcd_status_t get_number(char *string,size_t len, char *fmt, ...)
{
 80066fe:	b40c      	push	{r2, r3}
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
   va_list arg_ptr;
   va_start(arg_ptr, fmt);
 800670a:	231c      	movs	r3, #28
 800670c:	18fb      	adds	r3, r7, r3
 800670e:	60fb      	str	r3, [r7, #12]
   vsnprintf(string, len, fmt, arg_ptr);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	6839      	ldr	r1, [r7, #0]
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f001 f93c 	bl	8007994 <vsniprintf>
   va_end(arg_ptr);

   return LCD_INT2STR_OK;
 800671c:	2308      	movs	r3, #8
}
 800671e:	0018      	movs	r0, r3
 8006720:	46bd      	mov	sp, r7
 8006722:	b004      	add	sp, #16
 8006724:	bc80      	pop	{r7}
 8006726:	bc08      	pop	{r3}
 8006728:	b002      	add	sp, #8
 800672a:	4718      	bx	r3

0800672c <place>:

/*This function move the cursor, puts it x and y coordinates*/
lcd_status_t place(lcd_port_t *pines,size_t raw, size_t column)
{ 
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
	if(raw == 1)
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d10a      	bne.n	8006754 <place+0x28>
	{
		write_command(pines,(0x80 | column));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2280      	movs	r2, #128	; 0x80
 8006744:	4252      	negs	r2, r2
 8006746:	4313      	orrs	r3, r2
 8006748:	b2da      	uxtb	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	0011      	movs	r1, r2
 800674e:	0018      	movs	r0, r3
 8006750:	f000 f958 	bl	8006a04 <write_command>
	}
	if(raw == 2)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2b02      	cmp	r3, #2
 8006758:	d10a      	bne.n	8006770 <place+0x44>
	{
		write_command(pines,(0xC0 | column));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2240      	movs	r2, #64	; 0x40
 8006760:	4252      	negs	r2, r2
 8006762:	4313      	orrs	r3, r2
 8006764:	b2da      	uxtb	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	0011      	movs	r1, r2
 800676a:	0018      	movs	r0, r3
 800676c:	f000 f94a 	bl	8006a04 <write_command>
	}

	return LCD_PLACEMENT_OK;
 8006770:	2306      	movs	r3, #6
 8006772:	0018      	movs	r0, r3
 8006774:	46bd      	mov	sp, r7
 8006776:	b004      	add	sp, #16
 8006778:	bd80      	pop	{r7, pc}
	...

0800677c <log_command>:
#include "lcd_LL.h"

//------- LCD_LL at Master ---- 

lcd_LL_status_t log_command(lcd_port_t *pines,uint8_t cmd)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	000a      	movs	r2, r1
 8006786:	1cfb      	adds	r3, r7, #3
 8006788:	701a      	strb	r2, [r3, #0]
	printf("\r P4: %d \r\n",pines->D4.index);
	printf("\r P5: %d \r\n",pines->D5.index);
	printf("\r P6: %d \r\n",pines->D6.index);
	printf("\r P7: %d \r\n",pines->D7.index);
	*/
	printf("\r\n --- States of pines----\r\n");
 800678a:	4b4b      	ldr	r3, [pc, #300]	; (80068b8 <log_command+0x13c>)
 800678c:	0018      	movs	r0, r3
 800678e:	f001 f803 	bl	8007798 <puts>
	printf(" %d ", pin_state(cmd,pines->D7.index));
 8006792:	1cfb      	adds	r3, r7, #3
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	2156      	movs	r1, #86	; 0x56
 800679a:	5a52      	ldrh	r2, [r2, r1]
 800679c:	0011      	movs	r1, r2
 800679e:	2201      	movs	r2, #1
 80067a0:	408a      	lsls	r2, r1
 80067a2:	4013      	ands	r3, r2
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	2156      	movs	r1, #86	; 0x56
 80067a8:	5a52      	ldrh	r2, [r2, r1]
 80067aa:	4113      	asrs	r3, r2
 80067ac:	001a      	movs	r2, r3
 80067ae:	4b43      	ldr	r3, [pc, #268]	; (80068bc <log_command+0x140>)
 80067b0:	0011      	movs	r1, r2
 80067b2:	0018      	movs	r0, r3
 80067b4:	f000 ff64 	bl	8007680 <iprintf>
	printf(" %d ", pin_state(cmd,pines->D6.index));
 80067b8:	1cfb      	adds	r3, r7, #3
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	214e      	movs	r1, #78	; 0x4e
 80067c0:	5a52      	ldrh	r2, [r2, r1]
 80067c2:	0011      	movs	r1, r2
 80067c4:	2201      	movs	r2, #1
 80067c6:	408a      	lsls	r2, r1
 80067c8:	4013      	ands	r3, r2
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	214e      	movs	r1, #78	; 0x4e
 80067ce:	5a52      	ldrh	r2, [r2, r1]
 80067d0:	4113      	asrs	r3, r2
 80067d2:	001a      	movs	r2, r3
 80067d4:	4b39      	ldr	r3, [pc, #228]	; (80068bc <log_command+0x140>)
 80067d6:	0011      	movs	r1, r2
 80067d8:	0018      	movs	r0, r3
 80067da:	f000 ff51 	bl	8007680 <iprintf>
	printf(" %d ", pin_state(cmd,pines->D5.index));
 80067de:	1cfb      	adds	r3, r7, #3
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	2146      	movs	r1, #70	; 0x46
 80067e6:	5a52      	ldrh	r2, [r2, r1]
 80067e8:	0011      	movs	r1, r2
 80067ea:	2201      	movs	r2, #1
 80067ec:	408a      	lsls	r2, r1
 80067ee:	4013      	ands	r3, r2
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	2146      	movs	r1, #70	; 0x46
 80067f4:	5a52      	ldrh	r2, [r2, r1]
 80067f6:	4113      	asrs	r3, r2
 80067f8:	001a      	movs	r2, r3
 80067fa:	4b30      	ldr	r3, [pc, #192]	; (80068bc <log_command+0x140>)
 80067fc:	0011      	movs	r1, r2
 80067fe:	0018      	movs	r0, r3
 8006800:	f000 ff3e 	bl	8007680 <iprintf>
	printf(" %d ", pin_state(cmd,pines->D4.index));
 8006804:	1cfb      	adds	r3, r7, #3
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 800680c:	0011      	movs	r1, r2
 800680e:	2201      	movs	r2, #1
 8006810:	408a      	lsls	r2, r1
 8006812:	4013      	ands	r3, r2
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8006818:	4113      	asrs	r3, r2
 800681a:	001a      	movs	r2, r3
 800681c:	4b27      	ldr	r3, [pc, #156]	; (80068bc <log_command+0x140>)
 800681e:	0011      	movs	r1, r2
 8006820:	0018      	movs	r0, r3
 8006822:	f000 ff2d 	bl	8007680 <iprintf>
	printf(" %d ", pin_state(cmd,pines->D3.index));
 8006826:	1cfb      	adds	r3, r7, #3
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 800682e:	0011      	movs	r1, r2
 8006830:	2201      	movs	r2, #1
 8006832:	408a      	lsls	r2, r1
 8006834:	4013      	ands	r3, r2
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 800683a:	4113      	asrs	r3, r2
 800683c:	001a      	movs	r2, r3
 800683e:	4b1f      	ldr	r3, [pc, #124]	; (80068bc <log_command+0x140>)
 8006840:	0011      	movs	r1, r2
 8006842:	0018      	movs	r0, r3
 8006844:	f000 ff1c 	bl	8007680 <iprintf>
	printf(" %d ", pin_state(cmd,pines->D2.index));
 8006848:	1cfb      	adds	r3, r7, #3
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8006850:	0011      	movs	r1, r2
 8006852:	2201      	movs	r2, #1
 8006854:	408a      	lsls	r2, r1
 8006856:	4013      	ands	r3, r2
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800685c:	4113      	asrs	r3, r2
 800685e:	001a      	movs	r2, r3
 8006860:	4b16      	ldr	r3, [pc, #88]	; (80068bc <log_command+0x140>)
 8006862:	0011      	movs	r1, r2
 8006864:	0018      	movs	r0, r3
 8006866:	f000 ff0b 	bl	8007680 <iprintf>
	printf(" %d ", pin_state(cmd,pines->D1.index));
 800686a:	1cfb      	adds	r3, r7, #3
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8006872:	0011      	movs	r1, r2
 8006874:	2201      	movs	r2, #1
 8006876:	408a      	lsls	r2, r1
 8006878:	4013      	ands	r3, r2
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800687e:	4113      	asrs	r3, r2
 8006880:	001a      	movs	r2, r3
 8006882:	4b0e      	ldr	r3, [pc, #56]	; (80068bc <log_command+0x140>)
 8006884:	0011      	movs	r1, r2
 8006886:	0018      	movs	r0, r3
 8006888:	f000 fefa 	bl	8007680 <iprintf>
	printf(" %d ", pin_state(cmd,pines->D0.index));
 800688c:	1cfb      	adds	r3, r7, #3
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	8bd2      	ldrh	r2, [r2, #30]
 8006894:	0011      	movs	r1, r2
 8006896:	2201      	movs	r2, #1
 8006898:	408a      	lsls	r2, r1
 800689a:	4013      	ands	r3, r2
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	8bd2      	ldrh	r2, [r2, #30]
 80068a0:	4113      	asrs	r3, r2
 80068a2:	001a      	movs	r2, r3
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <log_command+0x140>)
 80068a6:	0011      	movs	r1, r2
 80068a8:	0018      	movs	r0, r3
 80068aa:	f000 fee9 	bl	8007680 <iprintf>

	return LCD_COMMAND_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	0018      	movs	r0, r3
 80068b2:	46bd      	mov	sp, r7
 80068b4:	b002      	add	sp, #8
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	0800a07c 	.word	0x0800a07c
 80068bc:	0800a098 	.word	0x0800a098

080068c0 <log_data>:


lcd_LL_status_t log_data(lcd_port_t *pines,uint8_t d)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	000a      	movs	r2, r1
 80068ca:	1cfb      	adds	r3, r7, #3
 80068cc:	701a      	strb	r2, [r3, #0]
	printf("\r P4: %d \r\n",pines->D4.index);
	printf("\r P5: %d \r\n",pines->D5.index);
	printf("\r P6: %d \r\n",pines->D6.index);
	printf("\r P7: %d \r\n",pines->D7.index);
	*/
	printf("\r\n --- States of pines----\r\n");
 80068ce:	4b4b      	ldr	r3, [pc, #300]	; (80069fc <log_data+0x13c>)
 80068d0:	0018      	movs	r0, r3
 80068d2:	f000 ff61 	bl	8007798 <puts>
	printf(" %d ", pin_state(d,pines->D7.index));
 80068d6:	1cfb      	adds	r3, r7, #3
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	2156      	movs	r1, #86	; 0x56
 80068de:	5a52      	ldrh	r2, [r2, r1]
 80068e0:	0011      	movs	r1, r2
 80068e2:	2201      	movs	r2, #1
 80068e4:	408a      	lsls	r2, r1
 80068e6:	4013      	ands	r3, r2
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	2156      	movs	r1, #86	; 0x56
 80068ec:	5a52      	ldrh	r2, [r2, r1]
 80068ee:	4113      	asrs	r3, r2
 80068f0:	001a      	movs	r2, r3
 80068f2:	4b43      	ldr	r3, [pc, #268]	; (8006a00 <log_data+0x140>)
 80068f4:	0011      	movs	r1, r2
 80068f6:	0018      	movs	r0, r3
 80068f8:	f000 fec2 	bl	8007680 <iprintf>
	printf(" %d ", pin_state(d,pines->D6.index));
 80068fc:	1cfb      	adds	r3, r7, #3
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	214e      	movs	r1, #78	; 0x4e
 8006904:	5a52      	ldrh	r2, [r2, r1]
 8006906:	0011      	movs	r1, r2
 8006908:	2201      	movs	r2, #1
 800690a:	408a      	lsls	r2, r1
 800690c:	4013      	ands	r3, r2
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	214e      	movs	r1, #78	; 0x4e
 8006912:	5a52      	ldrh	r2, [r2, r1]
 8006914:	4113      	asrs	r3, r2
 8006916:	001a      	movs	r2, r3
 8006918:	4b39      	ldr	r3, [pc, #228]	; (8006a00 <log_data+0x140>)
 800691a:	0011      	movs	r1, r2
 800691c:	0018      	movs	r0, r3
 800691e:	f000 feaf 	bl	8007680 <iprintf>
	printf(" %d ", pin_state(d,pines->D5.index));
 8006922:	1cfb      	adds	r3, r7, #3
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	2146      	movs	r1, #70	; 0x46
 800692a:	5a52      	ldrh	r2, [r2, r1]
 800692c:	0011      	movs	r1, r2
 800692e:	2201      	movs	r2, #1
 8006930:	408a      	lsls	r2, r1
 8006932:	4013      	ands	r3, r2
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	2146      	movs	r1, #70	; 0x46
 8006938:	5a52      	ldrh	r2, [r2, r1]
 800693a:	4113      	asrs	r3, r2
 800693c:	001a      	movs	r2, r3
 800693e:	4b30      	ldr	r3, [pc, #192]	; (8006a00 <log_data+0x140>)
 8006940:	0011      	movs	r1, r2
 8006942:	0018      	movs	r0, r3
 8006944:	f000 fe9c 	bl	8007680 <iprintf>
	printf(" %d ", pin_state(d,pines->D4.index));
 8006948:	1cfb      	adds	r3, r7, #3
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8006950:	0011      	movs	r1, r2
 8006952:	2201      	movs	r2, #1
 8006954:	408a      	lsls	r2, r1
 8006956:	4013      	ands	r3, r2
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 800695c:	4113      	asrs	r3, r2
 800695e:	001a      	movs	r2, r3
 8006960:	4b27      	ldr	r3, [pc, #156]	; (8006a00 <log_data+0x140>)
 8006962:	0011      	movs	r1, r2
 8006964:	0018      	movs	r0, r3
 8006966:	f000 fe8b 	bl	8007680 <iprintf>
	printf(" %d ", pin_state(d,pines->D3.index));
 800696a:	1cfb      	adds	r3, r7, #3
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8006972:	0011      	movs	r1, r2
 8006974:	2201      	movs	r2, #1
 8006976:	408a      	lsls	r2, r1
 8006978:	4013      	ands	r3, r2
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 800697e:	4113      	asrs	r3, r2
 8006980:	001a      	movs	r2, r3
 8006982:	4b1f      	ldr	r3, [pc, #124]	; (8006a00 <log_data+0x140>)
 8006984:	0011      	movs	r1, r2
 8006986:	0018      	movs	r0, r3
 8006988:	f000 fe7a 	bl	8007680 <iprintf>
	printf(" %d ", pin_state(d,pines->D2.index));
 800698c:	1cfb      	adds	r3, r7, #3
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8006994:	0011      	movs	r1, r2
 8006996:	2201      	movs	r2, #1
 8006998:	408a      	lsls	r2, r1
 800699a:	4013      	ands	r3, r2
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80069a0:	4113      	asrs	r3, r2
 80069a2:	001a      	movs	r2, r3
 80069a4:	4b16      	ldr	r3, [pc, #88]	; (8006a00 <log_data+0x140>)
 80069a6:	0011      	movs	r1, r2
 80069a8:	0018      	movs	r0, r3
 80069aa:	f000 fe69 	bl	8007680 <iprintf>
	printf(" %d ", pin_state(d,pines->D1.index));
 80069ae:	1cfb      	adds	r3, r7, #3
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80069b6:	0011      	movs	r1, r2
 80069b8:	2201      	movs	r2, #1
 80069ba:	408a      	lsls	r2, r1
 80069bc:	4013      	ands	r3, r2
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80069c2:	4113      	asrs	r3, r2
 80069c4:	001a      	movs	r2, r3
 80069c6:	4b0e      	ldr	r3, [pc, #56]	; (8006a00 <log_data+0x140>)
 80069c8:	0011      	movs	r1, r2
 80069ca:	0018      	movs	r0, r3
 80069cc:	f000 fe58 	bl	8007680 <iprintf>
	printf(" %d ", pin_state(d,pines->D0.index));
 80069d0:	1cfb      	adds	r3, r7, #3
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	8bd2      	ldrh	r2, [r2, #30]
 80069d8:	0011      	movs	r1, r2
 80069da:	2201      	movs	r2, #1
 80069dc:	408a      	lsls	r2, r1
 80069de:	4013      	ands	r3, r2
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	8bd2      	ldrh	r2, [r2, #30]
 80069e4:	4113      	asrs	r3, r2
 80069e6:	001a      	movs	r2, r3
 80069e8:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <log_data+0x140>)
 80069ea:	0011      	movs	r1, r2
 80069ec:	0018      	movs	r0, r3
 80069ee:	f000 fe47 	bl	8007680 <iprintf>

	return LCD_DATA_OK;
 80069f2:	2302      	movs	r3, #2
}
 80069f4:	0018      	movs	r0, r3
 80069f6:	46bd      	mov	sp, r7
 80069f8:	b002      	add	sp, #8
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	0800a07c 	.word	0x0800a07c
 8006a00:	0800a098 	.word	0x0800a098

08006a04 <write_command>:


lcd_LL_status_t write_command(lcd_port_t *pines,uint8_t cmd)
{
 8006a04:	b590      	push	{r4, r7, lr}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	000a      	movs	r2, r1
 8006a0e:	1cfb      	adds	r3, r7, #3
 8006a10:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(pines->RS.port, pines->RS.pin, 0);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	889b      	ldrh	r3, [r3, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	0019      	movs	r1, r3
 8006a1e:	f7fc ff59 	bl	80038d4 <HAL_GPIO_WritePin>
	//----------------------------------------------------------
	HAL_GPIO_WritePin(pines->D0.port, pines->D0.pin,pin_state(cmd,pines->D0.index));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6998      	ldr	r0, [r3, #24]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	8b99      	ldrh	r1, [r3, #28]
 8006a2a:	1cfb      	adds	r3, r7, #3
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	8bd2      	ldrh	r2, [r2, #30]
 8006a32:	0014      	movs	r4, r2
 8006a34:	2201      	movs	r2, #1
 8006a36:	40a2      	lsls	r2, r4
 8006a38:	4013      	ands	r3, r2
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	8bd2      	ldrh	r2, [r2, #30]
 8006a3e:	4113      	asrs	r3, r2
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	001a      	movs	r2, r3
 8006a44:	f7fc ff46 	bl	80038d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pines->D1.port, pines->D1.pin,pin_state(cmd,pines->D1.index));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a18      	ldr	r0, [r3, #32]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8006a50:	1cfb      	adds	r3, r7, #3
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8006a58:	0014      	movs	r4, r2
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	40a2      	lsls	r2, r4
 8006a5e:	4013      	ands	r3, r2
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8006a64:	4113      	asrs	r3, r2
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	001a      	movs	r2, r3
 8006a6a:	f7fc ff33 	bl	80038d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pines->D2.port, pines->D2.pin,pin_state(cmd,pines->D2.index));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8006a76:	1cfb      	adds	r3, r7, #3
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8006a7e:	0014      	movs	r4, r2
 8006a80:	2201      	movs	r2, #1
 8006a82:	40a2      	lsls	r2, r4
 8006a84:	4013      	ands	r3, r2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8006a8a:	4113      	asrs	r3, r2
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	001a      	movs	r2, r3
 8006a90:	f7fc ff20 	bl	80038d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pines->D3.port, pines->D3.pin,pin_state(cmd,pines->D3.index));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8006a9c:	1cfb      	adds	r3, r7, #3
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8006aa4:	0014      	movs	r4, r2
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	40a2      	lsls	r2, r4
 8006aaa:	4013      	ands	r3, r2
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8006ab0:	4113      	asrs	r3, r2
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	001a      	movs	r2, r3
 8006ab6:	f7fc ff0d 	bl	80038d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pines->D4.port, pines->D4.pin,pin_state(cmd,pines->D4.index));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 8006ac2:	1cfb      	adds	r3, r7, #3
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8006aca:	0014      	movs	r4, r2
 8006acc:	2201      	movs	r2, #1
 8006ace:	40a2      	lsls	r2, r4
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8006ad6:	4113      	asrs	r3, r2
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	001a      	movs	r2, r3
 8006adc:	f7fc fefa 	bl	80038d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pines->D5.port, pines->D5.pin,pin_state(cmd,pines->D5.index));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2244      	movs	r2, #68	; 0x44
 8006ae8:	5a99      	ldrh	r1, [r3, r2]
 8006aea:	1cfb      	adds	r3, r7, #3
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	2446      	movs	r4, #70	; 0x46
 8006af2:	5b12      	ldrh	r2, [r2, r4]
 8006af4:	0014      	movs	r4, r2
 8006af6:	2201      	movs	r2, #1
 8006af8:	40a2      	lsls	r2, r4
 8006afa:	4013      	ands	r3, r2
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	2446      	movs	r4, #70	; 0x46
 8006b00:	5b12      	ldrh	r2, [r2, r4]
 8006b02:	4113      	asrs	r3, r2
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	001a      	movs	r2, r3
 8006b08:	f7fc fee4 	bl	80038d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pines->D6.port, pines->D6.pin,pin_state(cmd,pines->D6.index));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	224c      	movs	r2, #76	; 0x4c
 8006b14:	5a99      	ldrh	r1, [r3, r2]
 8006b16:	1cfb      	adds	r3, r7, #3
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	244e      	movs	r4, #78	; 0x4e
 8006b1e:	5b12      	ldrh	r2, [r2, r4]
 8006b20:	0014      	movs	r4, r2
 8006b22:	2201      	movs	r2, #1
 8006b24:	40a2      	lsls	r2, r4
 8006b26:	4013      	ands	r3, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	244e      	movs	r4, #78	; 0x4e
 8006b2c:	5b12      	ldrh	r2, [r2, r4]
 8006b2e:	4113      	asrs	r3, r2
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	001a      	movs	r2, r3
 8006b34:	f7fc fece 	bl	80038d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pines->D7.port, pines->D7.pin,pin_state(cmd,pines->D7.index));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2254      	movs	r2, #84	; 0x54
 8006b40:	5a99      	ldrh	r1, [r3, r2]
 8006b42:	1cfb      	adds	r3, r7, #3
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	2456      	movs	r4, #86	; 0x56
 8006b4a:	5b12      	ldrh	r2, [r2, r4]
 8006b4c:	0014      	movs	r4, r2
 8006b4e:	2201      	movs	r2, #1
 8006b50:	40a2      	lsls	r2, r4
 8006b52:	4013      	ands	r3, r2
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	2456      	movs	r4, #86	; 0x56
 8006b58:	5b12      	ldrh	r2, [r2, r4]
 8006b5a:	4113      	asrs	r3, r2
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	001a      	movs	r2, r3
 8006b60:	f7fc feb8 	bl	80038d4 <HAL_GPIO_WritePin>
	log_command(pines,cmd);
 8006b64:	1cfb      	adds	r3, r7, #3
 8006b66:	781a      	ldrb	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	0011      	movs	r1, r2
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f7ff fe05 	bl	800677c <log_command>
	//----------------------------------------------------------                              
	HAL_GPIO_WritePin(pines->E.port, pines->E.pin,1);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6918      	ldr	r0, [r3, #16]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	8a9b      	ldrh	r3, [r3, #20]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	0019      	movs	r1, r3
 8006b7e:	f7fc fea9 	bl	80038d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8006b82:	200a      	movs	r0, #10
 8006b84:	f7fc f8c6 	bl	8002d14 <HAL_Delay>
	HAL_GPIO_WritePin(pines->E.port, pines->E.pin,0);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6918      	ldr	r0, [r3, #16]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	8a9b      	ldrh	r3, [r3, #20]
 8006b90:	2200      	movs	r2, #0
 8006b92:	0019      	movs	r1, r3
 8006b94:	f7fc fe9e 	bl	80038d4 <HAL_GPIO_WritePin>

	return LCD_COMMAND_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	0018      	movs	r0, r3
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	b003      	add	sp, #12
 8006ba0:	bd90      	pop	{r4, r7, pc}

08006ba2 <write_data>:

lcd_LL_status_t write_data(lcd_port_t *pines,uint8_t d)
{
 8006ba2:	b590      	push	{r4, r7, lr}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	000a      	movs	r2, r1
 8006bac:	1cfb      	adds	r3, r7, #3
 8006bae:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(pines->RS.port, pines->RS.pin, 1);  
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6818      	ldr	r0, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	889b      	ldrh	r3, [r3, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	0019      	movs	r1, r3
 8006bbc:	f7fc fe8a 	bl	80038d4 <HAL_GPIO_WritePin>
	//----------------------------------------------------------
	HAL_GPIO_WritePin(pines->D0.port, pines->D0.pin,pin_state(d,pines->D0.index));
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6998      	ldr	r0, [r3, #24]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8b99      	ldrh	r1, [r3, #28]
 8006bc8:	1cfb      	adds	r3, r7, #3
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	8bd2      	ldrh	r2, [r2, #30]
 8006bd0:	0014      	movs	r4, r2
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	40a2      	lsls	r2, r4
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	8bd2      	ldrh	r2, [r2, #30]
 8006bdc:	4113      	asrs	r3, r2
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	001a      	movs	r2, r3
 8006be2:	f7fc fe77 	bl	80038d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pines->D1.port, pines->D1.pin,pin_state(d,pines->D1.index));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a18      	ldr	r0, [r3, #32]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8006bee:	1cfb      	adds	r3, r7, #3
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8006bf6:	0014      	movs	r4, r2
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	40a2      	lsls	r2, r4
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8006c02:	4113      	asrs	r3, r2
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	001a      	movs	r2, r3
 8006c08:	f7fc fe64 	bl	80038d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pines->D2.port, pines->D2.pin,pin_state(d,pines->D2.index));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8006c14:	1cfb      	adds	r3, r7, #3
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8006c1c:	0014      	movs	r4, r2
 8006c1e:	2201      	movs	r2, #1
 8006c20:	40a2      	lsls	r2, r4
 8006c22:	4013      	ands	r3, r2
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8006c28:	4113      	asrs	r3, r2
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	001a      	movs	r2, r3
 8006c2e:	f7fc fe51 	bl	80038d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pines->D3.port, pines->D3.pin,pin_state(d,pines->D3.index));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8006c3a:	1cfb      	adds	r3, r7, #3
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8006c42:	0014      	movs	r4, r2
 8006c44:	2201      	movs	r2, #1
 8006c46:	40a2      	lsls	r2, r4
 8006c48:	4013      	ands	r3, r2
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8006c4e:	4113      	asrs	r3, r2
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	001a      	movs	r2, r3
 8006c54:	f7fc fe3e 	bl	80038d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pines->D4.port, pines->D4.pin,pin_state(d,pines->D4.index));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 8006c60:	1cfb      	adds	r3, r7, #3
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8006c68:	0014      	movs	r4, r2
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	40a2      	lsls	r2, r4
 8006c6e:	4013      	ands	r3, r2
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8006c74:	4113      	asrs	r3, r2
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	001a      	movs	r2, r3
 8006c7a:	f7fc fe2b 	bl	80038d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pines->D5.port, pines->D5.pin,pin_state(d,pines->D5.index));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2244      	movs	r2, #68	; 0x44
 8006c86:	5a99      	ldrh	r1, [r3, r2]
 8006c88:	1cfb      	adds	r3, r7, #3
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	2446      	movs	r4, #70	; 0x46
 8006c90:	5b12      	ldrh	r2, [r2, r4]
 8006c92:	0014      	movs	r4, r2
 8006c94:	2201      	movs	r2, #1
 8006c96:	40a2      	lsls	r2, r4
 8006c98:	4013      	ands	r3, r2
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	2446      	movs	r4, #70	; 0x46
 8006c9e:	5b12      	ldrh	r2, [r2, r4]
 8006ca0:	4113      	asrs	r3, r2
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	001a      	movs	r2, r3
 8006ca6:	f7fc fe15 	bl	80038d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pines->D6.port, pines->D6.pin,pin_state(d,pines->D6.index));
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	224c      	movs	r2, #76	; 0x4c
 8006cb2:	5a99      	ldrh	r1, [r3, r2]
 8006cb4:	1cfb      	adds	r3, r7, #3
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	244e      	movs	r4, #78	; 0x4e
 8006cbc:	5b12      	ldrh	r2, [r2, r4]
 8006cbe:	0014      	movs	r4, r2
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	40a2      	lsls	r2, r4
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	244e      	movs	r4, #78	; 0x4e
 8006cca:	5b12      	ldrh	r2, [r2, r4]
 8006ccc:	4113      	asrs	r3, r2
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	001a      	movs	r2, r3
 8006cd2:	f7fc fdff 	bl	80038d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pines->D7.port, pines->D7.pin,pin_state(d,pines->D7.index));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2254      	movs	r2, #84	; 0x54
 8006cde:	5a99      	ldrh	r1, [r3, r2]
 8006ce0:	1cfb      	adds	r3, r7, #3
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	2456      	movs	r4, #86	; 0x56
 8006ce8:	5b12      	ldrh	r2, [r2, r4]
 8006cea:	0014      	movs	r4, r2
 8006cec:	2201      	movs	r2, #1
 8006cee:	40a2      	lsls	r2, r4
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	2456      	movs	r4, #86	; 0x56
 8006cf6:	5b12      	ldrh	r2, [r2, r4]
 8006cf8:	4113      	asrs	r3, r2
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	001a      	movs	r2, r3
 8006cfe:	f7fc fde9 	bl	80038d4 <HAL_GPIO_WritePin>
	log_data(pines,d);
 8006d02:	1cfb      	adds	r3, r7, #3
 8006d04:	781a      	ldrb	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	0011      	movs	r1, r2
 8006d0a:	0018      	movs	r0, r3
 8006d0c:	f7ff fdd8 	bl	80068c0 <log_data>
	//----------------------------------------------------------                           
	HAL_GPIO_WritePin(pines->E.port, pines->E.pin,1);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6918      	ldr	r0, [r3, #16]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	8a9b      	ldrh	r3, [r3, #20]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	0019      	movs	r1, r3
 8006d1c:	f7fc fdda 	bl	80038d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8006d20:	200a      	movs	r0, #10
 8006d22:	f7fb fff7 	bl	8002d14 <HAL_Delay>
	HAL_GPIO_WritePin(pines->E.port, pines->E.pin,0);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6918      	ldr	r0, [r3, #16]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	8a9b      	ldrh	r3, [r3, #20]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	0019      	movs	r1, r3
 8006d32:	f7fc fdcf 	bl	80038d4 <HAL_GPIO_WritePin>

	return LCD_DATA_OK;
 8006d36:	2302      	movs	r3, #2
 8006d38:	0018      	movs	r0, r3
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	b003      	add	sp, #12
 8006d3e:	bd90      	pop	{r4, r7, pc}

08006d40 <__errno>:
 8006d40:	4b01      	ldr	r3, [pc, #4]	; (8006d48 <__errno+0x8>)
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	4770      	bx	lr
 8006d46:	46c0      	nop			; (mov r8, r8)
 8006d48:	20000064 	.word	0x20000064

08006d4c <__libc_init_array>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	2600      	movs	r6, #0
 8006d50:	4d0c      	ldr	r5, [pc, #48]	; (8006d84 <__libc_init_array+0x38>)
 8006d52:	4c0d      	ldr	r4, [pc, #52]	; (8006d88 <__libc_init_array+0x3c>)
 8006d54:	1b64      	subs	r4, r4, r5
 8006d56:	10a4      	asrs	r4, r4, #2
 8006d58:	42a6      	cmp	r6, r4
 8006d5a:	d109      	bne.n	8006d70 <__libc_init_array+0x24>
 8006d5c:	2600      	movs	r6, #0
 8006d5e:	f003 f943 	bl	8009fe8 <_init>
 8006d62:	4d0a      	ldr	r5, [pc, #40]	; (8006d8c <__libc_init_array+0x40>)
 8006d64:	4c0a      	ldr	r4, [pc, #40]	; (8006d90 <__libc_init_array+0x44>)
 8006d66:	1b64      	subs	r4, r4, r5
 8006d68:	10a4      	asrs	r4, r4, #2
 8006d6a:	42a6      	cmp	r6, r4
 8006d6c:	d105      	bne.n	8006d7a <__libc_init_array+0x2e>
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}
 8006d70:	00b3      	lsls	r3, r6, #2
 8006d72:	58eb      	ldr	r3, [r5, r3]
 8006d74:	4798      	blx	r3
 8006d76:	3601      	adds	r6, #1
 8006d78:	e7ee      	b.n	8006d58 <__libc_init_array+0xc>
 8006d7a:	00b3      	lsls	r3, r6, #2
 8006d7c:	58eb      	ldr	r3, [r5, r3]
 8006d7e:	4798      	blx	r3
 8006d80:	3601      	adds	r6, #1
 8006d82:	e7f2      	b.n	8006d6a <__libc_init_array+0x1e>
 8006d84:	0800a58c 	.word	0x0800a58c
 8006d88:	0800a58c 	.word	0x0800a58c
 8006d8c:	0800a58c 	.word	0x0800a58c
 8006d90:	0800a590 	.word	0x0800a590

08006d94 <memset>:
 8006d94:	0003      	movs	r3, r0
 8006d96:	1882      	adds	r2, r0, r2
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d100      	bne.n	8006d9e <memset+0xa>
 8006d9c:	4770      	bx	lr
 8006d9e:	7019      	strb	r1, [r3, #0]
 8006da0:	3301      	adds	r3, #1
 8006da2:	e7f9      	b.n	8006d98 <memset+0x4>

08006da4 <__cvt>:
 8006da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006da6:	001e      	movs	r6, r3
 8006da8:	2300      	movs	r3, #0
 8006daa:	0014      	movs	r4, r2
 8006dac:	b08b      	sub	sp, #44	; 0x2c
 8006dae:	429e      	cmp	r6, r3
 8006db0:	da04      	bge.n	8006dbc <__cvt+0x18>
 8006db2:	2180      	movs	r1, #128	; 0x80
 8006db4:	0609      	lsls	r1, r1, #24
 8006db6:	1873      	adds	r3, r6, r1
 8006db8:	001e      	movs	r6, r3
 8006dba:	232d      	movs	r3, #45	; 0x2d
 8006dbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006dbe:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006dc0:	7013      	strb	r3, [r2, #0]
 8006dc2:	2320      	movs	r3, #32
 8006dc4:	2203      	movs	r2, #3
 8006dc6:	439f      	bics	r7, r3
 8006dc8:	2f46      	cmp	r7, #70	; 0x46
 8006dca:	d007      	beq.n	8006ddc <__cvt+0x38>
 8006dcc:	003b      	movs	r3, r7
 8006dce:	3b45      	subs	r3, #69	; 0x45
 8006dd0:	4259      	negs	r1, r3
 8006dd2:	414b      	adcs	r3, r1
 8006dd4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006dd6:	3a01      	subs	r2, #1
 8006dd8:	18cb      	adds	r3, r1, r3
 8006dda:	9310      	str	r3, [sp, #64]	; 0x40
 8006ddc:	ab09      	add	r3, sp, #36	; 0x24
 8006dde:	9304      	str	r3, [sp, #16]
 8006de0:	ab08      	add	r3, sp, #32
 8006de2:	9303      	str	r3, [sp, #12]
 8006de4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006de6:	9200      	str	r2, [sp, #0]
 8006de8:	9302      	str	r3, [sp, #8]
 8006dea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006dec:	0022      	movs	r2, r4
 8006dee:	9301      	str	r3, [sp, #4]
 8006df0:	0033      	movs	r3, r6
 8006df2:	f000 ff35 	bl	8007c60 <_dtoa_r>
 8006df6:	0005      	movs	r5, r0
 8006df8:	2f47      	cmp	r7, #71	; 0x47
 8006dfa:	d102      	bne.n	8006e02 <__cvt+0x5e>
 8006dfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dfe:	07db      	lsls	r3, r3, #31
 8006e00:	d528      	bpl.n	8006e54 <__cvt+0xb0>
 8006e02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e04:	18eb      	adds	r3, r5, r3
 8006e06:	9307      	str	r3, [sp, #28]
 8006e08:	2f46      	cmp	r7, #70	; 0x46
 8006e0a:	d114      	bne.n	8006e36 <__cvt+0x92>
 8006e0c:	782b      	ldrb	r3, [r5, #0]
 8006e0e:	2b30      	cmp	r3, #48	; 0x30
 8006e10:	d10c      	bne.n	8006e2c <__cvt+0x88>
 8006e12:	2200      	movs	r2, #0
 8006e14:	2300      	movs	r3, #0
 8006e16:	0020      	movs	r0, r4
 8006e18:	0031      	movs	r1, r6
 8006e1a:	f7f9 fb15 	bl	8000448 <__aeabi_dcmpeq>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	d104      	bne.n	8006e2c <__cvt+0x88>
 8006e22:	2301      	movs	r3, #1
 8006e24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e26:	1a9b      	subs	r3, r3, r2
 8006e28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e2e:	9a07      	ldr	r2, [sp, #28]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	18d3      	adds	r3, r2, r3
 8006e34:	9307      	str	r3, [sp, #28]
 8006e36:	2200      	movs	r2, #0
 8006e38:	2300      	movs	r3, #0
 8006e3a:	0020      	movs	r0, r4
 8006e3c:	0031      	movs	r1, r6
 8006e3e:	f7f9 fb03 	bl	8000448 <__aeabi_dcmpeq>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d001      	beq.n	8006e4a <__cvt+0xa6>
 8006e46:	9b07      	ldr	r3, [sp, #28]
 8006e48:	9309      	str	r3, [sp, #36]	; 0x24
 8006e4a:	2230      	movs	r2, #48	; 0x30
 8006e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4e:	9907      	ldr	r1, [sp, #28]
 8006e50:	428b      	cmp	r3, r1
 8006e52:	d306      	bcc.n	8006e62 <__cvt+0xbe>
 8006e54:	0028      	movs	r0, r5
 8006e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e58:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e5a:	1b5b      	subs	r3, r3, r5
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	b00b      	add	sp, #44	; 0x2c
 8006e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e62:	1c59      	adds	r1, r3, #1
 8006e64:	9109      	str	r1, [sp, #36]	; 0x24
 8006e66:	701a      	strb	r2, [r3, #0]
 8006e68:	e7f0      	b.n	8006e4c <__cvt+0xa8>

08006e6a <__exponent>:
 8006e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e6c:	1c83      	adds	r3, r0, #2
 8006e6e:	b087      	sub	sp, #28
 8006e70:	9303      	str	r3, [sp, #12]
 8006e72:	0005      	movs	r5, r0
 8006e74:	000c      	movs	r4, r1
 8006e76:	232b      	movs	r3, #43	; 0x2b
 8006e78:	7002      	strb	r2, [r0, #0]
 8006e7a:	2900      	cmp	r1, #0
 8006e7c:	da01      	bge.n	8006e82 <__exponent+0x18>
 8006e7e:	424c      	negs	r4, r1
 8006e80:	3302      	adds	r3, #2
 8006e82:	706b      	strb	r3, [r5, #1]
 8006e84:	2c09      	cmp	r4, #9
 8006e86:	dd31      	ble.n	8006eec <__exponent+0x82>
 8006e88:	270a      	movs	r7, #10
 8006e8a:	ab04      	add	r3, sp, #16
 8006e8c:	1dde      	adds	r6, r3, #7
 8006e8e:	0020      	movs	r0, r4
 8006e90:	0039      	movs	r1, r7
 8006e92:	9601      	str	r6, [sp, #4]
 8006e94:	f7f9 fac2 	bl	800041c <__aeabi_idivmod>
 8006e98:	3e01      	subs	r6, #1
 8006e9a:	3130      	adds	r1, #48	; 0x30
 8006e9c:	0020      	movs	r0, r4
 8006e9e:	7031      	strb	r1, [r6, #0]
 8006ea0:	0039      	movs	r1, r7
 8006ea2:	9402      	str	r4, [sp, #8]
 8006ea4:	f7f9 f9d4 	bl	8000250 <__divsi3>
 8006ea8:	9b02      	ldr	r3, [sp, #8]
 8006eaa:	0004      	movs	r4, r0
 8006eac:	2b63      	cmp	r3, #99	; 0x63
 8006eae:	dcee      	bgt.n	8006e8e <__exponent+0x24>
 8006eb0:	9b01      	ldr	r3, [sp, #4]
 8006eb2:	3430      	adds	r4, #48	; 0x30
 8006eb4:	1e9a      	subs	r2, r3, #2
 8006eb6:	0013      	movs	r3, r2
 8006eb8:	9903      	ldr	r1, [sp, #12]
 8006eba:	7014      	strb	r4, [r2, #0]
 8006ebc:	a804      	add	r0, sp, #16
 8006ebe:	3007      	adds	r0, #7
 8006ec0:	4298      	cmp	r0, r3
 8006ec2:	d80e      	bhi.n	8006ee2 <__exponent+0x78>
 8006ec4:	ab04      	add	r3, sp, #16
 8006ec6:	3307      	adds	r3, #7
 8006ec8:	2000      	movs	r0, #0
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d804      	bhi.n	8006ed8 <__exponent+0x6e>
 8006ece:	ab04      	add	r3, sp, #16
 8006ed0:	3009      	adds	r0, #9
 8006ed2:	18c0      	adds	r0, r0, r3
 8006ed4:	9b01      	ldr	r3, [sp, #4]
 8006ed6:	1ac0      	subs	r0, r0, r3
 8006ed8:	9b03      	ldr	r3, [sp, #12]
 8006eda:	1818      	adds	r0, r3, r0
 8006edc:	1b40      	subs	r0, r0, r5
 8006ede:	b007      	add	sp, #28
 8006ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ee2:	7818      	ldrb	r0, [r3, #0]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	7008      	strb	r0, [r1, #0]
 8006ee8:	3101      	adds	r1, #1
 8006eea:	e7e7      	b.n	8006ebc <__exponent+0x52>
 8006eec:	2330      	movs	r3, #48	; 0x30
 8006eee:	18e4      	adds	r4, r4, r3
 8006ef0:	70ab      	strb	r3, [r5, #2]
 8006ef2:	1d28      	adds	r0, r5, #4
 8006ef4:	70ec      	strb	r4, [r5, #3]
 8006ef6:	e7f1      	b.n	8006edc <__exponent+0x72>

08006ef8 <_printf_float>:
 8006ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006efa:	b095      	sub	sp, #84	; 0x54
 8006efc:	000c      	movs	r4, r1
 8006efe:	9209      	str	r2, [sp, #36]	; 0x24
 8006f00:	001e      	movs	r6, r3
 8006f02:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006f04:	0007      	movs	r7, r0
 8006f06:	f001 fe93 	bl	8008c30 <_localeconv_r>
 8006f0a:	6803      	ldr	r3, [r0, #0]
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	930c      	str	r3, [sp, #48]	; 0x30
 8006f10:	f7f9 f8f8 	bl	8000104 <strlen>
 8006f14:	2300      	movs	r3, #0
 8006f16:	9312      	str	r3, [sp, #72]	; 0x48
 8006f18:	7e23      	ldrb	r3, [r4, #24]
 8006f1a:	2207      	movs	r2, #7
 8006f1c:	930a      	str	r3, [sp, #40]	; 0x28
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	900e      	str	r0, [sp, #56]	; 0x38
 8006f22:	930d      	str	r3, [sp, #52]	; 0x34
 8006f24:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f26:	682b      	ldr	r3, [r5, #0]
 8006f28:	05c9      	lsls	r1, r1, #23
 8006f2a:	d547      	bpl.n	8006fbc <_printf_float+0xc4>
 8006f2c:	189b      	adds	r3, r3, r2
 8006f2e:	4393      	bics	r3, r2
 8006f30:	001a      	movs	r2, r3
 8006f32:	3208      	adds	r2, #8
 8006f34:	602a      	str	r2, [r5, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	64a2      	str	r2, [r4, #72]	; 0x48
 8006f3c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006f3e:	2201      	movs	r2, #1
 8006f40:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006f42:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006f44:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f46:	006b      	lsls	r3, r5, #1
 8006f48:	085b      	lsrs	r3, r3, #1
 8006f4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006f4e:	4ba7      	ldr	r3, [pc, #668]	; (80071ec <_printf_float+0x2f4>)
 8006f50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006f52:	4252      	negs	r2, r2
 8006f54:	f7fb f8ce 	bl	80020f4 <__aeabi_dcmpun>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d131      	bne.n	8006fc0 <_printf_float+0xc8>
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	4ba3      	ldr	r3, [pc, #652]	; (80071ec <_printf_float+0x2f4>)
 8006f60:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006f62:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006f64:	4252      	negs	r2, r2
 8006f66:	f7f9 fa7f 	bl	8000468 <__aeabi_dcmple>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d128      	bne.n	8006fc0 <_printf_float+0xc8>
 8006f6e:	2200      	movs	r2, #0
 8006f70:	2300      	movs	r3, #0
 8006f72:	0029      	movs	r1, r5
 8006f74:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006f76:	f7f9 fa6d 	bl	8000454 <__aeabi_dcmplt>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d003      	beq.n	8006f86 <_printf_float+0x8e>
 8006f7e:	0023      	movs	r3, r4
 8006f80:	222d      	movs	r2, #45	; 0x2d
 8006f82:	3343      	adds	r3, #67	; 0x43
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f88:	4d99      	ldr	r5, [pc, #612]	; (80071f0 <_printf_float+0x2f8>)
 8006f8a:	2b47      	cmp	r3, #71	; 0x47
 8006f8c:	d900      	bls.n	8006f90 <_printf_float+0x98>
 8006f8e:	4d99      	ldr	r5, [pc, #612]	; (80071f4 <_printf_float+0x2fc>)
 8006f90:	2303      	movs	r3, #3
 8006f92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f94:	6123      	str	r3, [r4, #16]
 8006f96:	3301      	adds	r3, #1
 8006f98:	439a      	bics	r2, r3
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	6022      	str	r2, [r4, #0]
 8006f9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa2:	0021      	movs	r1, r4
 8006fa4:	0038      	movs	r0, r7
 8006fa6:	9600      	str	r6, [sp, #0]
 8006fa8:	aa13      	add	r2, sp, #76	; 0x4c
 8006faa:	f000 f9e7 	bl	800737c <_printf_common>
 8006fae:	1c43      	adds	r3, r0, #1
 8006fb0:	d000      	beq.n	8006fb4 <_printf_float+0xbc>
 8006fb2:	e0a2      	b.n	80070fa <_printf_float+0x202>
 8006fb4:	2001      	movs	r0, #1
 8006fb6:	4240      	negs	r0, r0
 8006fb8:	b015      	add	sp, #84	; 0x54
 8006fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fbc:	3307      	adds	r3, #7
 8006fbe:	e7b6      	b.n	8006f2e <_printf_float+0x36>
 8006fc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fc2:	002b      	movs	r3, r5
 8006fc4:	0010      	movs	r0, r2
 8006fc6:	0029      	movs	r1, r5
 8006fc8:	f7fb f894 	bl	80020f4 <__aeabi_dcmpun>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d00b      	beq.n	8006fe8 <_printf_float+0xf0>
 8006fd0:	2d00      	cmp	r5, #0
 8006fd2:	da03      	bge.n	8006fdc <_printf_float+0xe4>
 8006fd4:	0023      	movs	r3, r4
 8006fd6:	222d      	movs	r2, #45	; 0x2d
 8006fd8:	3343      	adds	r3, #67	; 0x43
 8006fda:	701a      	strb	r2, [r3, #0]
 8006fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fde:	4d86      	ldr	r5, [pc, #536]	; (80071f8 <_printf_float+0x300>)
 8006fe0:	2b47      	cmp	r3, #71	; 0x47
 8006fe2:	d9d5      	bls.n	8006f90 <_printf_float+0x98>
 8006fe4:	4d85      	ldr	r5, [pc, #532]	; (80071fc <_printf_float+0x304>)
 8006fe6:	e7d3      	b.n	8006f90 <_printf_float+0x98>
 8006fe8:	2220      	movs	r2, #32
 8006fea:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006fec:	6863      	ldr	r3, [r4, #4]
 8006fee:	4391      	bics	r1, r2
 8006ff0:	910f      	str	r1, [sp, #60]	; 0x3c
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	d149      	bne.n	800708a <_printf_float+0x192>
 8006ff6:	3307      	adds	r3, #7
 8006ff8:	6063      	str	r3, [r4, #4]
 8006ffa:	2380      	movs	r3, #128	; 0x80
 8006ffc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	4313      	orrs	r3, r2
 8007002:	2200      	movs	r2, #0
 8007004:	9206      	str	r2, [sp, #24]
 8007006:	aa12      	add	r2, sp, #72	; 0x48
 8007008:	9205      	str	r2, [sp, #20]
 800700a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800700c:	a908      	add	r1, sp, #32
 800700e:	9204      	str	r2, [sp, #16]
 8007010:	aa11      	add	r2, sp, #68	; 0x44
 8007012:	9203      	str	r2, [sp, #12]
 8007014:	2223      	movs	r2, #35	; 0x23
 8007016:	6023      	str	r3, [r4, #0]
 8007018:	9301      	str	r3, [sp, #4]
 800701a:	6863      	ldr	r3, [r4, #4]
 800701c:	1852      	adds	r2, r2, r1
 800701e:	9202      	str	r2, [sp, #8]
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	0038      	movs	r0, r7
 8007024:	002b      	movs	r3, r5
 8007026:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007028:	f7ff febc 	bl	8006da4 <__cvt>
 800702c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800702e:	0005      	movs	r5, r0
 8007030:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007032:	2b47      	cmp	r3, #71	; 0x47
 8007034:	d108      	bne.n	8007048 <_printf_float+0x150>
 8007036:	1ccb      	adds	r3, r1, #3
 8007038:	db02      	blt.n	8007040 <_printf_float+0x148>
 800703a:	6863      	ldr	r3, [r4, #4]
 800703c:	4299      	cmp	r1, r3
 800703e:	dd48      	ble.n	80070d2 <_printf_float+0x1da>
 8007040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007042:	3b02      	subs	r3, #2
 8007044:	b2db      	uxtb	r3, r3
 8007046:	930a      	str	r3, [sp, #40]	; 0x28
 8007048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800704a:	2b65      	cmp	r3, #101	; 0x65
 800704c:	d824      	bhi.n	8007098 <_printf_float+0x1a0>
 800704e:	0020      	movs	r0, r4
 8007050:	001a      	movs	r2, r3
 8007052:	3901      	subs	r1, #1
 8007054:	3050      	adds	r0, #80	; 0x50
 8007056:	9111      	str	r1, [sp, #68]	; 0x44
 8007058:	f7ff ff07 	bl	8006e6a <__exponent>
 800705c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800705e:	900b      	str	r0, [sp, #44]	; 0x2c
 8007060:	1813      	adds	r3, r2, r0
 8007062:	6123      	str	r3, [r4, #16]
 8007064:	2a01      	cmp	r2, #1
 8007066:	dc02      	bgt.n	800706e <_printf_float+0x176>
 8007068:	6822      	ldr	r2, [r4, #0]
 800706a:	07d2      	lsls	r2, r2, #31
 800706c:	d501      	bpl.n	8007072 <_printf_float+0x17a>
 800706e:	3301      	adds	r3, #1
 8007070:	6123      	str	r3, [r4, #16]
 8007072:	2323      	movs	r3, #35	; 0x23
 8007074:	aa08      	add	r2, sp, #32
 8007076:	189b      	adds	r3, r3, r2
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d100      	bne.n	8007080 <_printf_float+0x188>
 800707e:	e78f      	b.n	8006fa0 <_printf_float+0xa8>
 8007080:	0023      	movs	r3, r4
 8007082:	222d      	movs	r2, #45	; 0x2d
 8007084:	3343      	adds	r3, #67	; 0x43
 8007086:	701a      	strb	r2, [r3, #0]
 8007088:	e78a      	b.n	8006fa0 <_printf_float+0xa8>
 800708a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800708c:	2a47      	cmp	r2, #71	; 0x47
 800708e:	d1b4      	bne.n	8006ffa <_printf_float+0x102>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1b2      	bne.n	8006ffa <_printf_float+0x102>
 8007094:	3301      	adds	r3, #1
 8007096:	e7af      	b.n	8006ff8 <_printf_float+0x100>
 8007098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800709a:	2b66      	cmp	r3, #102	; 0x66
 800709c:	d11b      	bne.n	80070d6 <_printf_float+0x1de>
 800709e:	6863      	ldr	r3, [r4, #4]
 80070a0:	2900      	cmp	r1, #0
 80070a2:	dd0d      	ble.n	80070c0 <_printf_float+0x1c8>
 80070a4:	6121      	str	r1, [r4, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d102      	bne.n	80070b0 <_printf_float+0x1b8>
 80070aa:	6822      	ldr	r2, [r4, #0]
 80070ac:	07d2      	lsls	r2, r2, #31
 80070ae:	d502      	bpl.n	80070b6 <_printf_float+0x1be>
 80070b0:	3301      	adds	r3, #1
 80070b2:	1859      	adds	r1, r3, r1
 80070b4:	6121      	str	r1, [r4, #16]
 80070b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80070ba:	2300      	movs	r3, #0
 80070bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80070be:	e7d8      	b.n	8007072 <_printf_float+0x17a>
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d103      	bne.n	80070cc <_printf_float+0x1d4>
 80070c4:	2201      	movs	r2, #1
 80070c6:	6821      	ldr	r1, [r4, #0]
 80070c8:	4211      	tst	r1, r2
 80070ca:	d000      	beq.n	80070ce <_printf_float+0x1d6>
 80070cc:	1c9a      	adds	r2, r3, #2
 80070ce:	6122      	str	r2, [r4, #16]
 80070d0:	e7f1      	b.n	80070b6 <_printf_float+0x1be>
 80070d2:	2367      	movs	r3, #103	; 0x67
 80070d4:	930a      	str	r3, [sp, #40]	; 0x28
 80070d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070da:	4293      	cmp	r3, r2
 80070dc:	db06      	blt.n	80070ec <_printf_float+0x1f4>
 80070de:	6822      	ldr	r2, [r4, #0]
 80070e0:	6123      	str	r3, [r4, #16]
 80070e2:	07d2      	lsls	r2, r2, #31
 80070e4:	d5e7      	bpl.n	80070b6 <_printf_float+0x1be>
 80070e6:	3301      	adds	r3, #1
 80070e8:	6123      	str	r3, [r4, #16]
 80070ea:	e7e4      	b.n	80070b6 <_printf_float+0x1be>
 80070ec:	2101      	movs	r1, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	dc01      	bgt.n	80070f6 <_printf_float+0x1fe>
 80070f2:	1849      	adds	r1, r1, r1
 80070f4:	1ac9      	subs	r1, r1, r3
 80070f6:	1852      	adds	r2, r2, r1
 80070f8:	e7e9      	b.n	80070ce <_printf_float+0x1d6>
 80070fa:	6822      	ldr	r2, [r4, #0]
 80070fc:	0553      	lsls	r3, r2, #21
 80070fe:	d407      	bmi.n	8007110 <_printf_float+0x218>
 8007100:	6923      	ldr	r3, [r4, #16]
 8007102:	002a      	movs	r2, r5
 8007104:	0038      	movs	r0, r7
 8007106:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007108:	47b0      	blx	r6
 800710a:	1c43      	adds	r3, r0, #1
 800710c:	d128      	bne.n	8007160 <_printf_float+0x268>
 800710e:	e751      	b.n	8006fb4 <_printf_float+0xbc>
 8007110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007112:	2b65      	cmp	r3, #101	; 0x65
 8007114:	d800      	bhi.n	8007118 <_printf_float+0x220>
 8007116:	e0e1      	b.n	80072dc <_printf_float+0x3e4>
 8007118:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800711a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800711c:	2200      	movs	r2, #0
 800711e:	2300      	movs	r3, #0
 8007120:	f7f9 f992 	bl	8000448 <__aeabi_dcmpeq>
 8007124:	2800      	cmp	r0, #0
 8007126:	d031      	beq.n	800718c <_printf_float+0x294>
 8007128:	2301      	movs	r3, #1
 800712a:	0038      	movs	r0, r7
 800712c:	4a34      	ldr	r2, [pc, #208]	; (8007200 <_printf_float+0x308>)
 800712e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007130:	47b0      	blx	r6
 8007132:	1c43      	adds	r3, r0, #1
 8007134:	d100      	bne.n	8007138 <_printf_float+0x240>
 8007136:	e73d      	b.n	8006fb4 <_printf_float+0xbc>
 8007138:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800713a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800713c:	4293      	cmp	r3, r2
 800713e:	db02      	blt.n	8007146 <_printf_float+0x24e>
 8007140:	6823      	ldr	r3, [r4, #0]
 8007142:	07db      	lsls	r3, r3, #31
 8007144:	d50c      	bpl.n	8007160 <_printf_float+0x268>
 8007146:	0038      	movs	r0, r7
 8007148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800714a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800714c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800714e:	47b0      	blx	r6
 8007150:	2500      	movs	r5, #0
 8007152:	1c43      	adds	r3, r0, #1
 8007154:	d100      	bne.n	8007158 <_printf_float+0x260>
 8007156:	e72d      	b.n	8006fb4 <_printf_float+0xbc>
 8007158:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800715a:	3b01      	subs	r3, #1
 800715c:	42ab      	cmp	r3, r5
 800715e:	dc0a      	bgt.n	8007176 <_printf_float+0x27e>
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	079b      	lsls	r3, r3, #30
 8007164:	d500      	bpl.n	8007168 <_printf_float+0x270>
 8007166:	e106      	b.n	8007376 <_printf_float+0x47e>
 8007168:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800716a:	68e0      	ldr	r0, [r4, #12]
 800716c:	4298      	cmp	r0, r3
 800716e:	db00      	blt.n	8007172 <_printf_float+0x27a>
 8007170:	e722      	b.n	8006fb8 <_printf_float+0xc0>
 8007172:	0018      	movs	r0, r3
 8007174:	e720      	b.n	8006fb8 <_printf_float+0xc0>
 8007176:	0022      	movs	r2, r4
 8007178:	2301      	movs	r3, #1
 800717a:	0038      	movs	r0, r7
 800717c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800717e:	321a      	adds	r2, #26
 8007180:	47b0      	blx	r6
 8007182:	1c43      	adds	r3, r0, #1
 8007184:	d100      	bne.n	8007188 <_printf_float+0x290>
 8007186:	e715      	b.n	8006fb4 <_printf_float+0xbc>
 8007188:	3501      	adds	r5, #1
 800718a:	e7e5      	b.n	8007158 <_printf_float+0x260>
 800718c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800718e:	2b00      	cmp	r3, #0
 8007190:	dc38      	bgt.n	8007204 <_printf_float+0x30c>
 8007192:	2301      	movs	r3, #1
 8007194:	0038      	movs	r0, r7
 8007196:	4a1a      	ldr	r2, [pc, #104]	; (8007200 <_printf_float+0x308>)
 8007198:	9909      	ldr	r1, [sp, #36]	; 0x24
 800719a:	47b0      	blx	r6
 800719c:	1c43      	adds	r3, r0, #1
 800719e:	d100      	bne.n	80071a2 <_printf_float+0x2aa>
 80071a0:	e708      	b.n	8006fb4 <_printf_float+0xbc>
 80071a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071a6:	4313      	orrs	r3, r2
 80071a8:	d102      	bne.n	80071b0 <_printf_float+0x2b8>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	07db      	lsls	r3, r3, #31
 80071ae:	d5d7      	bpl.n	8007160 <_printf_float+0x268>
 80071b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071b2:	0038      	movs	r0, r7
 80071b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071b8:	47b0      	blx	r6
 80071ba:	1c43      	adds	r3, r0, #1
 80071bc:	d100      	bne.n	80071c0 <_printf_float+0x2c8>
 80071be:	e6f9      	b.n	8006fb4 <_printf_float+0xbc>
 80071c0:	2300      	movs	r3, #0
 80071c2:	930a      	str	r3, [sp, #40]	; 0x28
 80071c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071c8:	425b      	negs	r3, r3
 80071ca:	4293      	cmp	r3, r2
 80071cc:	dc01      	bgt.n	80071d2 <_printf_float+0x2da>
 80071ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071d0:	e797      	b.n	8007102 <_printf_float+0x20a>
 80071d2:	0022      	movs	r2, r4
 80071d4:	2301      	movs	r3, #1
 80071d6:	0038      	movs	r0, r7
 80071d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071da:	321a      	adds	r2, #26
 80071dc:	47b0      	blx	r6
 80071de:	1c43      	adds	r3, r0, #1
 80071e0:	d100      	bne.n	80071e4 <_printf_float+0x2ec>
 80071e2:	e6e7      	b.n	8006fb4 <_printf_float+0xbc>
 80071e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e6:	3301      	adds	r3, #1
 80071e8:	e7eb      	b.n	80071c2 <_printf_float+0x2ca>
 80071ea:	46c0      	nop			; (mov r8, r8)
 80071ec:	7fefffff 	.word	0x7fefffff
 80071f0:	0800a1ac 	.word	0x0800a1ac
 80071f4:	0800a1b0 	.word	0x0800a1b0
 80071f8:	0800a1b4 	.word	0x0800a1b4
 80071fc:	0800a1b8 	.word	0x0800a1b8
 8007200:	0800a1bc 	.word	0x0800a1bc
 8007204:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007206:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007208:	920a      	str	r2, [sp, #40]	; 0x28
 800720a:	429a      	cmp	r2, r3
 800720c:	dd00      	ble.n	8007210 <_printf_float+0x318>
 800720e:	930a      	str	r3, [sp, #40]	; 0x28
 8007210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007212:	2b00      	cmp	r3, #0
 8007214:	dc3c      	bgt.n	8007290 <_printf_float+0x398>
 8007216:	2300      	movs	r3, #0
 8007218:	930d      	str	r3, [sp, #52]	; 0x34
 800721a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800721c:	43db      	mvns	r3, r3
 800721e:	17db      	asrs	r3, r3, #31
 8007220:	930f      	str	r3, [sp, #60]	; 0x3c
 8007222:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007224:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007226:	930b      	str	r3, [sp, #44]	; 0x2c
 8007228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800722a:	4013      	ands	r3, r2
 800722c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007232:	4293      	cmp	r3, r2
 8007234:	dc34      	bgt.n	80072a0 <_printf_float+0x3a8>
 8007236:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007238:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800723a:	4293      	cmp	r3, r2
 800723c:	db3d      	blt.n	80072ba <_printf_float+0x3c2>
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	07db      	lsls	r3, r3, #31
 8007242:	d43a      	bmi.n	80072ba <_printf_float+0x3c2>
 8007244:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007248:	9911      	ldr	r1, [sp, #68]	; 0x44
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	1a52      	subs	r2, r2, r1
 800724e:	920a      	str	r2, [sp, #40]	; 0x28
 8007250:	429a      	cmp	r2, r3
 8007252:	dd00      	ble.n	8007256 <_printf_float+0x35e>
 8007254:	930a      	str	r3, [sp, #40]	; 0x28
 8007256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007258:	2b00      	cmp	r3, #0
 800725a:	dc36      	bgt.n	80072ca <_printf_float+0x3d2>
 800725c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800725e:	2500      	movs	r5, #0
 8007260:	43db      	mvns	r3, r3
 8007262:	17db      	asrs	r3, r3, #31
 8007264:	930b      	str	r3, [sp, #44]	; 0x2c
 8007266:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007268:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800726a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800726c:	1a9b      	subs	r3, r3, r2
 800726e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007270:	400a      	ands	r2, r1
 8007272:	1a9b      	subs	r3, r3, r2
 8007274:	42ab      	cmp	r3, r5
 8007276:	dc00      	bgt.n	800727a <_printf_float+0x382>
 8007278:	e772      	b.n	8007160 <_printf_float+0x268>
 800727a:	0022      	movs	r2, r4
 800727c:	2301      	movs	r3, #1
 800727e:	0038      	movs	r0, r7
 8007280:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007282:	321a      	adds	r2, #26
 8007284:	47b0      	blx	r6
 8007286:	1c43      	adds	r3, r0, #1
 8007288:	d100      	bne.n	800728c <_printf_float+0x394>
 800728a:	e693      	b.n	8006fb4 <_printf_float+0xbc>
 800728c:	3501      	adds	r5, #1
 800728e:	e7ea      	b.n	8007266 <_printf_float+0x36e>
 8007290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007292:	002a      	movs	r2, r5
 8007294:	0038      	movs	r0, r7
 8007296:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007298:	47b0      	blx	r6
 800729a:	1c43      	adds	r3, r0, #1
 800729c:	d1bb      	bne.n	8007216 <_printf_float+0x31e>
 800729e:	e689      	b.n	8006fb4 <_printf_float+0xbc>
 80072a0:	0022      	movs	r2, r4
 80072a2:	2301      	movs	r3, #1
 80072a4:	0038      	movs	r0, r7
 80072a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072a8:	321a      	adds	r2, #26
 80072aa:	47b0      	blx	r6
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d100      	bne.n	80072b2 <_printf_float+0x3ba>
 80072b0:	e680      	b.n	8006fb4 <_printf_float+0xbc>
 80072b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072b4:	3301      	adds	r3, #1
 80072b6:	930d      	str	r3, [sp, #52]	; 0x34
 80072b8:	e7b3      	b.n	8007222 <_printf_float+0x32a>
 80072ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072bc:	0038      	movs	r0, r7
 80072be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072c2:	47b0      	blx	r6
 80072c4:	1c43      	adds	r3, r0, #1
 80072c6:	d1bd      	bne.n	8007244 <_printf_float+0x34c>
 80072c8:	e674      	b.n	8006fb4 <_printf_float+0xbc>
 80072ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072cc:	0038      	movs	r0, r7
 80072ce:	18ea      	adds	r2, r5, r3
 80072d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d4:	47b0      	blx	r6
 80072d6:	1c43      	adds	r3, r0, #1
 80072d8:	d1c0      	bne.n	800725c <_printf_float+0x364>
 80072da:	e66b      	b.n	8006fb4 <_printf_float+0xbc>
 80072dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072de:	2b01      	cmp	r3, #1
 80072e0:	dc02      	bgt.n	80072e8 <_printf_float+0x3f0>
 80072e2:	2301      	movs	r3, #1
 80072e4:	421a      	tst	r2, r3
 80072e6:	d034      	beq.n	8007352 <_printf_float+0x45a>
 80072e8:	2301      	movs	r3, #1
 80072ea:	002a      	movs	r2, r5
 80072ec:	0038      	movs	r0, r7
 80072ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072f0:	47b0      	blx	r6
 80072f2:	1c43      	adds	r3, r0, #1
 80072f4:	d100      	bne.n	80072f8 <_printf_float+0x400>
 80072f6:	e65d      	b.n	8006fb4 <_printf_float+0xbc>
 80072f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072fa:	0038      	movs	r0, r7
 80072fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007300:	47b0      	blx	r6
 8007302:	1c43      	adds	r3, r0, #1
 8007304:	d100      	bne.n	8007308 <_printf_float+0x410>
 8007306:	e655      	b.n	8006fb4 <_printf_float+0xbc>
 8007308:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800730a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800730c:	2200      	movs	r2, #0
 800730e:	2300      	movs	r3, #0
 8007310:	f7f9 f89a 	bl	8000448 <__aeabi_dcmpeq>
 8007314:	2800      	cmp	r0, #0
 8007316:	d11a      	bne.n	800734e <_printf_float+0x456>
 8007318:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800731a:	1c6a      	adds	r2, r5, #1
 800731c:	3b01      	subs	r3, #1
 800731e:	0038      	movs	r0, r7
 8007320:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007322:	47b0      	blx	r6
 8007324:	1c43      	adds	r3, r0, #1
 8007326:	d10e      	bne.n	8007346 <_printf_float+0x44e>
 8007328:	e644      	b.n	8006fb4 <_printf_float+0xbc>
 800732a:	0022      	movs	r2, r4
 800732c:	2301      	movs	r3, #1
 800732e:	0038      	movs	r0, r7
 8007330:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007332:	321a      	adds	r2, #26
 8007334:	47b0      	blx	r6
 8007336:	1c43      	adds	r3, r0, #1
 8007338:	d100      	bne.n	800733c <_printf_float+0x444>
 800733a:	e63b      	b.n	8006fb4 <_printf_float+0xbc>
 800733c:	3501      	adds	r5, #1
 800733e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007340:	3b01      	subs	r3, #1
 8007342:	42ab      	cmp	r3, r5
 8007344:	dcf1      	bgt.n	800732a <_printf_float+0x432>
 8007346:	0022      	movs	r2, r4
 8007348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800734a:	3250      	adds	r2, #80	; 0x50
 800734c:	e6da      	b.n	8007104 <_printf_float+0x20c>
 800734e:	2500      	movs	r5, #0
 8007350:	e7f5      	b.n	800733e <_printf_float+0x446>
 8007352:	002a      	movs	r2, r5
 8007354:	e7e3      	b.n	800731e <_printf_float+0x426>
 8007356:	0022      	movs	r2, r4
 8007358:	2301      	movs	r3, #1
 800735a:	0038      	movs	r0, r7
 800735c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800735e:	3219      	adds	r2, #25
 8007360:	47b0      	blx	r6
 8007362:	1c43      	adds	r3, r0, #1
 8007364:	d100      	bne.n	8007368 <_printf_float+0x470>
 8007366:	e625      	b.n	8006fb4 <_printf_float+0xbc>
 8007368:	3501      	adds	r5, #1
 800736a:	68e3      	ldr	r3, [r4, #12]
 800736c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800736e:	1a9b      	subs	r3, r3, r2
 8007370:	42ab      	cmp	r3, r5
 8007372:	dcf0      	bgt.n	8007356 <_printf_float+0x45e>
 8007374:	e6f8      	b.n	8007168 <_printf_float+0x270>
 8007376:	2500      	movs	r5, #0
 8007378:	e7f7      	b.n	800736a <_printf_float+0x472>
 800737a:	46c0      	nop			; (mov r8, r8)

0800737c <_printf_common>:
 800737c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800737e:	0015      	movs	r5, r2
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	688a      	ldr	r2, [r1, #8]
 8007384:	690b      	ldr	r3, [r1, #16]
 8007386:	000c      	movs	r4, r1
 8007388:	9000      	str	r0, [sp, #0]
 800738a:	4293      	cmp	r3, r2
 800738c:	da00      	bge.n	8007390 <_printf_common+0x14>
 800738e:	0013      	movs	r3, r2
 8007390:	0022      	movs	r2, r4
 8007392:	602b      	str	r3, [r5, #0]
 8007394:	3243      	adds	r2, #67	; 0x43
 8007396:	7812      	ldrb	r2, [r2, #0]
 8007398:	2a00      	cmp	r2, #0
 800739a:	d001      	beq.n	80073a0 <_printf_common+0x24>
 800739c:	3301      	adds	r3, #1
 800739e:	602b      	str	r3, [r5, #0]
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	069b      	lsls	r3, r3, #26
 80073a4:	d502      	bpl.n	80073ac <_printf_common+0x30>
 80073a6:	682b      	ldr	r3, [r5, #0]
 80073a8:	3302      	adds	r3, #2
 80073aa:	602b      	str	r3, [r5, #0]
 80073ac:	6822      	ldr	r2, [r4, #0]
 80073ae:	2306      	movs	r3, #6
 80073b0:	0017      	movs	r7, r2
 80073b2:	401f      	ands	r7, r3
 80073b4:	421a      	tst	r2, r3
 80073b6:	d027      	beq.n	8007408 <_printf_common+0x8c>
 80073b8:	0023      	movs	r3, r4
 80073ba:	3343      	adds	r3, #67	; 0x43
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	1e5a      	subs	r2, r3, #1
 80073c0:	4193      	sbcs	r3, r2
 80073c2:	6822      	ldr	r2, [r4, #0]
 80073c4:	0692      	lsls	r2, r2, #26
 80073c6:	d430      	bmi.n	800742a <_printf_common+0xae>
 80073c8:	0022      	movs	r2, r4
 80073ca:	9901      	ldr	r1, [sp, #4]
 80073cc:	9800      	ldr	r0, [sp, #0]
 80073ce:	9e08      	ldr	r6, [sp, #32]
 80073d0:	3243      	adds	r2, #67	; 0x43
 80073d2:	47b0      	blx	r6
 80073d4:	1c43      	adds	r3, r0, #1
 80073d6:	d025      	beq.n	8007424 <_printf_common+0xa8>
 80073d8:	2306      	movs	r3, #6
 80073da:	6820      	ldr	r0, [r4, #0]
 80073dc:	682a      	ldr	r2, [r5, #0]
 80073de:	68e1      	ldr	r1, [r4, #12]
 80073e0:	2500      	movs	r5, #0
 80073e2:	4003      	ands	r3, r0
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d103      	bne.n	80073f0 <_printf_common+0x74>
 80073e8:	1a8d      	subs	r5, r1, r2
 80073ea:	43eb      	mvns	r3, r5
 80073ec:	17db      	asrs	r3, r3, #31
 80073ee:	401d      	ands	r5, r3
 80073f0:	68a3      	ldr	r3, [r4, #8]
 80073f2:	6922      	ldr	r2, [r4, #16]
 80073f4:	4293      	cmp	r3, r2
 80073f6:	dd01      	ble.n	80073fc <_printf_common+0x80>
 80073f8:	1a9b      	subs	r3, r3, r2
 80073fa:	18ed      	adds	r5, r5, r3
 80073fc:	2700      	movs	r7, #0
 80073fe:	42bd      	cmp	r5, r7
 8007400:	d120      	bne.n	8007444 <_printf_common+0xc8>
 8007402:	2000      	movs	r0, #0
 8007404:	e010      	b.n	8007428 <_printf_common+0xac>
 8007406:	3701      	adds	r7, #1
 8007408:	68e3      	ldr	r3, [r4, #12]
 800740a:	682a      	ldr	r2, [r5, #0]
 800740c:	1a9b      	subs	r3, r3, r2
 800740e:	42bb      	cmp	r3, r7
 8007410:	ddd2      	ble.n	80073b8 <_printf_common+0x3c>
 8007412:	0022      	movs	r2, r4
 8007414:	2301      	movs	r3, #1
 8007416:	9901      	ldr	r1, [sp, #4]
 8007418:	9800      	ldr	r0, [sp, #0]
 800741a:	9e08      	ldr	r6, [sp, #32]
 800741c:	3219      	adds	r2, #25
 800741e:	47b0      	blx	r6
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d1f0      	bne.n	8007406 <_printf_common+0x8a>
 8007424:	2001      	movs	r0, #1
 8007426:	4240      	negs	r0, r0
 8007428:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800742a:	2030      	movs	r0, #48	; 0x30
 800742c:	18e1      	adds	r1, r4, r3
 800742e:	3143      	adds	r1, #67	; 0x43
 8007430:	7008      	strb	r0, [r1, #0]
 8007432:	0021      	movs	r1, r4
 8007434:	1c5a      	adds	r2, r3, #1
 8007436:	3145      	adds	r1, #69	; 0x45
 8007438:	7809      	ldrb	r1, [r1, #0]
 800743a:	18a2      	adds	r2, r4, r2
 800743c:	3243      	adds	r2, #67	; 0x43
 800743e:	3302      	adds	r3, #2
 8007440:	7011      	strb	r1, [r2, #0]
 8007442:	e7c1      	b.n	80073c8 <_printf_common+0x4c>
 8007444:	0022      	movs	r2, r4
 8007446:	2301      	movs	r3, #1
 8007448:	9901      	ldr	r1, [sp, #4]
 800744a:	9800      	ldr	r0, [sp, #0]
 800744c:	9e08      	ldr	r6, [sp, #32]
 800744e:	321a      	adds	r2, #26
 8007450:	47b0      	blx	r6
 8007452:	1c43      	adds	r3, r0, #1
 8007454:	d0e6      	beq.n	8007424 <_printf_common+0xa8>
 8007456:	3701      	adds	r7, #1
 8007458:	e7d1      	b.n	80073fe <_printf_common+0x82>
	...

0800745c <_printf_i>:
 800745c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800745e:	b08b      	sub	sp, #44	; 0x2c
 8007460:	9206      	str	r2, [sp, #24]
 8007462:	000a      	movs	r2, r1
 8007464:	3243      	adds	r2, #67	; 0x43
 8007466:	9307      	str	r3, [sp, #28]
 8007468:	9005      	str	r0, [sp, #20]
 800746a:	9204      	str	r2, [sp, #16]
 800746c:	7e0a      	ldrb	r2, [r1, #24]
 800746e:	000c      	movs	r4, r1
 8007470:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007472:	2a78      	cmp	r2, #120	; 0x78
 8007474:	d807      	bhi.n	8007486 <_printf_i+0x2a>
 8007476:	2a62      	cmp	r2, #98	; 0x62
 8007478:	d809      	bhi.n	800748e <_printf_i+0x32>
 800747a:	2a00      	cmp	r2, #0
 800747c:	d100      	bne.n	8007480 <_printf_i+0x24>
 800747e:	e0c1      	b.n	8007604 <_printf_i+0x1a8>
 8007480:	2a58      	cmp	r2, #88	; 0x58
 8007482:	d100      	bne.n	8007486 <_printf_i+0x2a>
 8007484:	e08c      	b.n	80075a0 <_printf_i+0x144>
 8007486:	0026      	movs	r6, r4
 8007488:	3642      	adds	r6, #66	; 0x42
 800748a:	7032      	strb	r2, [r6, #0]
 800748c:	e022      	b.n	80074d4 <_printf_i+0x78>
 800748e:	0010      	movs	r0, r2
 8007490:	3863      	subs	r0, #99	; 0x63
 8007492:	2815      	cmp	r0, #21
 8007494:	d8f7      	bhi.n	8007486 <_printf_i+0x2a>
 8007496:	f7f8 fe47 	bl	8000128 <__gnu_thumb1_case_shi>
 800749a:	0016      	.short	0x0016
 800749c:	fff6001f 	.word	0xfff6001f
 80074a0:	fff6fff6 	.word	0xfff6fff6
 80074a4:	001ffff6 	.word	0x001ffff6
 80074a8:	fff6fff6 	.word	0xfff6fff6
 80074ac:	fff6fff6 	.word	0xfff6fff6
 80074b0:	003600a8 	.word	0x003600a8
 80074b4:	fff6009a 	.word	0xfff6009a
 80074b8:	00b9fff6 	.word	0x00b9fff6
 80074bc:	0036fff6 	.word	0x0036fff6
 80074c0:	fff6fff6 	.word	0xfff6fff6
 80074c4:	009e      	.short	0x009e
 80074c6:	0026      	movs	r6, r4
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	3642      	adds	r6, #66	; 0x42
 80074cc:	1d11      	adds	r1, r2, #4
 80074ce:	6019      	str	r1, [r3, #0]
 80074d0:	6813      	ldr	r3, [r2, #0]
 80074d2:	7033      	strb	r3, [r6, #0]
 80074d4:	2301      	movs	r3, #1
 80074d6:	e0a7      	b.n	8007628 <_printf_i+0x1cc>
 80074d8:	6808      	ldr	r0, [r1, #0]
 80074da:	6819      	ldr	r1, [r3, #0]
 80074dc:	1d0a      	adds	r2, r1, #4
 80074de:	0605      	lsls	r5, r0, #24
 80074e0:	d50b      	bpl.n	80074fa <_printf_i+0x9e>
 80074e2:	680d      	ldr	r5, [r1, #0]
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	2d00      	cmp	r5, #0
 80074e8:	da03      	bge.n	80074f2 <_printf_i+0x96>
 80074ea:	232d      	movs	r3, #45	; 0x2d
 80074ec:	9a04      	ldr	r2, [sp, #16]
 80074ee:	426d      	negs	r5, r5
 80074f0:	7013      	strb	r3, [r2, #0]
 80074f2:	4b61      	ldr	r3, [pc, #388]	; (8007678 <_printf_i+0x21c>)
 80074f4:	270a      	movs	r7, #10
 80074f6:	9303      	str	r3, [sp, #12]
 80074f8:	e01b      	b.n	8007532 <_printf_i+0xd6>
 80074fa:	680d      	ldr	r5, [r1, #0]
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	0641      	lsls	r1, r0, #25
 8007500:	d5f1      	bpl.n	80074e6 <_printf_i+0x8a>
 8007502:	b22d      	sxth	r5, r5
 8007504:	e7ef      	b.n	80074e6 <_printf_i+0x8a>
 8007506:	680d      	ldr	r5, [r1, #0]
 8007508:	6819      	ldr	r1, [r3, #0]
 800750a:	1d08      	adds	r0, r1, #4
 800750c:	6018      	str	r0, [r3, #0]
 800750e:	062e      	lsls	r6, r5, #24
 8007510:	d501      	bpl.n	8007516 <_printf_i+0xba>
 8007512:	680d      	ldr	r5, [r1, #0]
 8007514:	e003      	b.n	800751e <_printf_i+0xc2>
 8007516:	066d      	lsls	r5, r5, #25
 8007518:	d5fb      	bpl.n	8007512 <_printf_i+0xb6>
 800751a:	680d      	ldr	r5, [r1, #0]
 800751c:	b2ad      	uxth	r5, r5
 800751e:	4b56      	ldr	r3, [pc, #344]	; (8007678 <_printf_i+0x21c>)
 8007520:	2708      	movs	r7, #8
 8007522:	9303      	str	r3, [sp, #12]
 8007524:	2a6f      	cmp	r2, #111	; 0x6f
 8007526:	d000      	beq.n	800752a <_printf_i+0xce>
 8007528:	3702      	adds	r7, #2
 800752a:	0023      	movs	r3, r4
 800752c:	2200      	movs	r2, #0
 800752e:	3343      	adds	r3, #67	; 0x43
 8007530:	701a      	strb	r2, [r3, #0]
 8007532:	6863      	ldr	r3, [r4, #4]
 8007534:	60a3      	str	r3, [r4, #8]
 8007536:	2b00      	cmp	r3, #0
 8007538:	db03      	blt.n	8007542 <_printf_i+0xe6>
 800753a:	2204      	movs	r2, #4
 800753c:	6821      	ldr	r1, [r4, #0]
 800753e:	4391      	bics	r1, r2
 8007540:	6021      	str	r1, [r4, #0]
 8007542:	2d00      	cmp	r5, #0
 8007544:	d102      	bne.n	800754c <_printf_i+0xf0>
 8007546:	9e04      	ldr	r6, [sp, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00c      	beq.n	8007566 <_printf_i+0x10a>
 800754c:	9e04      	ldr	r6, [sp, #16]
 800754e:	0028      	movs	r0, r5
 8007550:	0039      	movs	r1, r7
 8007552:	f7f8 fe79 	bl	8000248 <__aeabi_uidivmod>
 8007556:	9b03      	ldr	r3, [sp, #12]
 8007558:	3e01      	subs	r6, #1
 800755a:	5c5b      	ldrb	r3, [r3, r1]
 800755c:	7033      	strb	r3, [r6, #0]
 800755e:	002b      	movs	r3, r5
 8007560:	0005      	movs	r5, r0
 8007562:	429f      	cmp	r7, r3
 8007564:	d9f3      	bls.n	800754e <_printf_i+0xf2>
 8007566:	2f08      	cmp	r7, #8
 8007568:	d109      	bne.n	800757e <_printf_i+0x122>
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	07db      	lsls	r3, r3, #31
 800756e:	d506      	bpl.n	800757e <_printf_i+0x122>
 8007570:	6863      	ldr	r3, [r4, #4]
 8007572:	6922      	ldr	r2, [r4, #16]
 8007574:	4293      	cmp	r3, r2
 8007576:	dc02      	bgt.n	800757e <_printf_i+0x122>
 8007578:	2330      	movs	r3, #48	; 0x30
 800757a:	3e01      	subs	r6, #1
 800757c:	7033      	strb	r3, [r6, #0]
 800757e:	9b04      	ldr	r3, [sp, #16]
 8007580:	1b9b      	subs	r3, r3, r6
 8007582:	6123      	str	r3, [r4, #16]
 8007584:	9b07      	ldr	r3, [sp, #28]
 8007586:	0021      	movs	r1, r4
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	9805      	ldr	r0, [sp, #20]
 800758c:	9b06      	ldr	r3, [sp, #24]
 800758e:	aa09      	add	r2, sp, #36	; 0x24
 8007590:	f7ff fef4 	bl	800737c <_printf_common>
 8007594:	1c43      	adds	r3, r0, #1
 8007596:	d14c      	bne.n	8007632 <_printf_i+0x1d6>
 8007598:	2001      	movs	r0, #1
 800759a:	4240      	negs	r0, r0
 800759c:	b00b      	add	sp, #44	; 0x2c
 800759e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075a0:	3145      	adds	r1, #69	; 0x45
 80075a2:	700a      	strb	r2, [r1, #0]
 80075a4:	4a34      	ldr	r2, [pc, #208]	; (8007678 <_printf_i+0x21c>)
 80075a6:	9203      	str	r2, [sp, #12]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	6821      	ldr	r1, [r4, #0]
 80075ac:	ca20      	ldmia	r2!, {r5}
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	0608      	lsls	r0, r1, #24
 80075b2:	d516      	bpl.n	80075e2 <_printf_i+0x186>
 80075b4:	07cb      	lsls	r3, r1, #31
 80075b6:	d502      	bpl.n	80075be <_printf_i+0x162>
 80075b8:	2320      	movs	r3, #32
 80075ba:	4319      	orrs	r1, r3
 80075bc:	6021      	str	r1, [r4, #0]
 80075be:	2710      	movs	r7, #16
 80075c0:	2d00      	cmp	r5, #0
 80075c2:	d1b2      	bne.n	800752a <_printf_i+0xce>
 80075c4:	2320      	movs	r3, #32
 80075c6:	6822      	ldr	r2, [r4, #0]
 80075c8:	439a      	bics	r2, r3
 80075ca:	6022      	str	r2, [r4, #0]
 80075cc:	e7ad      	b.n	800752a <_printf_i+0xce>
 80075ce:	2220      	movs	r2, #32
 80075d0:	6809      	ldr	r1, [r1, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	6022      	str	r2, [r4, #0]
 80075d6:	0022      	movs	r2, r4
 80075d8:	2178      	movs	r1, #120	; 0x78
 80075da:	3245      	adds	r2, #69	; 0x45
 80075dc:	7011      	strb	r1, [r2, #0]
 80075de:	4a27      	ldr	r2, [pc, #156]	; (800767c <_printf_i+0x220>)
 80075e0:	e7e1      	b.n	80075a6 <_printf_i+0x14a>
 80075e2:	0648      	lsls	r0, r1, #25
 80075e4:	d5e6      	bpl.n	80075b4 <_printf_i+0x158>
 80075e6:	b2ad      	uxth	r5, r5
 80075e8:	e7e4      	b.n	80075b4 <_printf_i+0x158>
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	680d      	ldr	r5, [r1, #0]
 80075ee:	1d10      	adds	r0, r2, #4
 80075f0:	6949      	ldr	r1, [r1, #20]
 80075f2:	6018      	str	r0, [r3, #0]
 80075f4:	6813      	ldr	r3, [r2, #0]
 80075f6:	062e      	lsls	r6, r5, #24
 80075f8:	d501      	bpl.n	80075fe <_printf_i+0x1a2>
 80075fa:	6019      	str	r1, [r3, #0]
 80075fc:	e002      	b.n	8007604 <_printf_i+0x1a8>
 80075fe:	066d      	lsls	r5, r5, #25
 8007600:	d5fb      	bpl.n	80075fa <_printf_i+0x19e>
 8007602:	8019      	strh	r1, [r3, #0]
 8007604:	2300      	movs	r3, #0
 8007606:	9e04      	ldr	r6, [sp, #16]
 8007608:	6123      	str	r3, [r4, #16]
 800760a:	e7bb      	b.n	8007584 <_printf_i+0x128>
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	1d11      	adds	r1, r2, #4
 8007610:	6019      	str	r1, [r3, #0]
 8007612:	6816      	ldr	r6, [r2, #0]
 8007614:	2100      	movs	r1, #0
 8007616:	0030      	movs	r0, r6
 8007618:	6862      	ldr	r2, [r4, #4]
 800761a:	f001 fb87 	bl	8008d2c <memchr>
 800761e:	2800      	cmp	r0, #0
 8007620:	d001      	beq.n	8007626 <_printf_i+0x1ca>
 8007622:	1b80      	subs	r0, r0, r6
 8007624:	6060      	str	r0, [r4, #4]
 8007626:	6863      	ldr	r3, [r4, #4]
 8007628:	6123      	str	r3, [r4, #16]
 800762a:	2300      	movs	r3, #0
 800762c:	9a04      	ldr	r2, [sp, #16]
 800762e:	7013      	strb	r3, [r2, #0]
 8007630:	e7a8      	b.n	8007584 <_printf_i+0x128>
 8007632:	6923      	ldr	r3, [r4, #16]
 8007634:	0032      	movs	r2, r6
 8007636:	9906      	ldr	r1, [sp, #24]
 8007638:	9805      	ldr	r0, [sp, #20]
 800763a:	9d07      	ldr	r5, [sp, #28]
 800763c:	47a8      	blx	r5
 800763e:	1c43      	adds	r3, r0, #1
 8007640:	d0aa      	beq.n	8007598 <_printf_i+0x13c>
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	079b      	lsls	r3, r3, #30
 8007646:	d415      	bmi.n	8007674 <_printf_i+0x218>
 8007648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800764a:	68e0      	ldr	r0, [r4, #12]
 800764c:	4298      	cmp	r0, r3
 800764e:	daa5      	bge.n	800759c <_printf_i+0x140>
 8007650:	0018      	movs	r0, r3
 8007652:	e7a3      	b.n	800759c <_printf_i+0x140>
 8007654:	0022      	movs	r2, r4
 8007656:	2301      	movs	r3, #1
 8007658:	9906      	ldr	r1, [sp, #24]
 800765a:	9805      	ldr	r0, [sp, #20]
 800765c:	9e07      	ldr	r6, [sp, #28]
 800765e:	3219      	adds	r2, #25
 8007660:	47b0      	blx	r6
 8007662:	1c43      	adds	r3, r0, #1
 8007664:	d098      	beq.n	8007598 <_printf_i+0x13c>
 8007666:	3501      	adds	r5, #1
 8007668:	68e3      	ldr	r3, [r4, #12]
 800766a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800766c:	1a9b      	subs	r3, r3, r2
 800766e:	42ab      	cmp	r3, r5
 8007670:	dcf0      	bgt.n	8007654 <_printf_i+0x1f8>
 8007672:	e7e9      	b.n	8007648 <_printf_i+0x1ec>
 8007674:	2500      	movs	r5, #0
 8007676:	e7f7      	b.n	8007668 <_printf_i+0x20c>
 8007678:	0800a1be 	.word	0x0800a1be
 800767c:	0800a1cf 	.word	0x0800a1cf

08007680 <iprintf>:
 8007680:	b40f      	push	{r0, r1, r2, r3}
 8007682:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <iprintf+0x30>)
 8007684:	b513      	push	{r0, r1, r4, lr}
 8007686:	681c      	ldr	r4, [r3, #0]
 8007688:	2c00      	cmp	r4, #0
 800768a:	d005      	beq.n	8007698 <iprintf+0x18>
 800768c:	69a3      	ldr	r3, [r4, #24]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d102      	bne.n	8007698 <iprintf+0x18>
 8007692:	0020      	movs	r0, r4
 8007694:	f001 fa2c 	bl	8008af0 <__sinit>
 8007698:	ab05      	add	r3, sp, #20
 800769a:	0020      	movs	r0, r4
 800769c:	9a04      	ldr	r2, [sp, #16]
 800769e:	68a1      	ldr	r1, [r4, #8]
 80076a0:	9301      	str	r3, [sp, #4]
 80076a2:	f002 f98b 	bl	80099bc <_vfiprintf_r>
 80076a6:	bc16      	pop	{r1, r2, r4}
 80076a8:	bc08      	pop	{r3}
 80076aa:	b004      	add	sp, #16
 80076ac:	4718      	bx	r3
 80076ae:	46c0      	nop			; (mov r8, r8)
 80076b0:	20000064 	.word	0x20000064

080076b4 <_puts_r>:
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	0005      	movs	r5, r0
 80076b8:	000e      	movs	r6, r1
 80076ba:	2800      	cmp	r0, #0
 80076bc:	d004      	beq.n	80076c8 <_puts_r+0x14>
 80076be:	6983      	ldr	r3, [r0, #24]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <_puts_r+0x14>
 80076c4:	f001 fa14 	bl	8008af0 <__sinit>
 80076c8:	69ab      	ldr	r3, [r5, #24]
 80076ca:	68ac      	ldr	r4, [r5, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d102      	bne.n	80076d6 <_puts_r+0x22>
 80076d0:	0028      	movs	r0, r5
 80076d2:	f001 fa0d 	bl	8008af0 <__sinit>
 80076d6:	4b2d      	ldr	r3, [pc, #180]	; (800778c <_puts_r+0xd8>)
 80076d8:	429c      	cmp	r4, r3
 80076da:	d122      	bne.n	8007722 <_puts_r+0x6e>
 80076dc:	686c      	ldr	r4, [r5, #4]
 80076de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076e0:	07db      	lsls	r3, r3, #31
 80076e2:	d405      	bmi.n	80076f0 <_puts_r+0x3c>
 80076e4:	89a3      	ldrh	r3, [r4, #12]
 80076e6:	059b      	lsls	r3, r3, #22
 80076e8:	d402      	bmi.n	80076f0 <_puts_r+0x3c>
 80076ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076ec:	f001 faa5 	bl	8008c3a <__retarget_lock_acquire_recursive>
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	071b      	lsls	r3, r3, #28
 80076f4:	d502      	bpl.n	80076fc <_puts_r+0x48>
 80076f6:	6923      	ldr	r3, [r4, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d129      	bne.n	8007750 <_puts_r+0x9c>
 80076fc:	0021      	movs	r1, r4
 80076fe:	0028      	movs	r0, r5
 8007700:	f000 f9aa 	bl	8007a58 <__swsetup_r>
 8007704:	2800      	cmp	r0, #0
 8007706:	d023      	beq.n	8007750 <_puts_r+0x9c>
 8007708:	2501      	movs	r5, #1
 800770a:	426d      	negs	r5, r5
 800770c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800770e:	07db      	lsls	r3, r3, #31
 8007710:	d405      	bmi.n	800771e <_puts_r+0x6a>
 8007712:	89a3      	ldrh	r3, [r4, #12]
 8007714:	059b      	lsls	r3, r3, #22
 8007716:	d402      	bmi.n	800771e <_puts_r+0x6a>
 8007718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800771a:	f001 fa8f 	bl	8008c3c <__retarget_lock_release_recursive>
 800771e:	0028      	movs	r0, r5
 8007720:	bd70      	pop	{r4, r5, r6, pc}
 8007722:	4b1b      	ldr	r3, [pc, #108]	; (8007790 <_puts_r+0xdc>)
 8007724:	429c      	cmp	r4, r3
 8007726:	d101      	bne.n	800772c <_puts_r+0x78>
 8007728:	68ac      	ldr	r4, [r5, #8]
 800772a:	e7d8      	b.n	80076de <_puts_r+0x2a>
 800772c:	4b19      	ldr	r3, [pc, #100]	; (8007794 <_puts_r+0xe0>)
 800772e:	429c      	cmp	r4, r3
 8007730:	d1d5      	bne.n	80076de <_puts_r+0x2a>
 8007732:	68ec      	ldr	r4, [r5, #12]
 8007734:	e7d3      	b.n	80076de <_puts_r+0x2a>
 8007736:	3601      	adds	r6, #1
 8007738:	60a3      	str	r3, [r4, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	da04      	bge.n	8007748 <_puts_r+0x94>
 800773e:	69a2      	ldr	r2, [r4, #24]
 8007740:	429a      	cmp	r2, r3
 8007742:	dc16      	bgt.n	8007772 <_puts_r+0xbe>
 8007744:	290a      	cmp	r1, #10
 8007746:	d014      	beq.n	8007772 <_puts_r+0xbe>
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	6022      	str	r2, [r4, #0]
 800774e:	7019      	strb	r1, [r3, #0]
 8007750:	68a3      	ldr	r3, [r4, #8]
 8007752:	7831      	ldrb	r1, [r6, #0]
 8007754:	3b01      	subs	r3, #1
 8007756:	2900      	cmp	r1, #0
 8007758:	d1ed      	bne.n	8007736 <_puts_r+0x82>
 800775a:	60a3      	str	r3, [r4, #8]
 800775c:	2b00      	cmp	r3, #0
 800775e:	da0f      	bge.n	8007780 <_puts_r+0xcc>
 8007760:	0028      	movs	r0, r5
 8007762:	0022      	movs	r2, r4
 8007764:	310a      	adds	r1, #10
 8007766:	f000 f921 	bl	80079ac <__swbuf_r>
 800776a:	250a      	movs	r5, #10
 800776c:	1c43      	adds	r3, r0, #1
 800776e:	d1cd      	bne.n	800770c <_puts_r+0x58>
 8007770:	e7ca      	b.n	8007708 <_puts_r+0x54>
 8007772:	0022      	movs	r2, r4
 8007774:	0028      	movs	r0, r5
 8007776:	f000 f919 	bl	80079ac <__swbuf_r>
 800777a:	1c43      	adds	r3, r0, #1
 800777c:	d1e8      	bne.n	8007750 <_puts_r+0x9c>
 800777e:	e7c3      	b.n	8007708 <_puts_r+0x54>
 8007780:	250a      	movs	r5, #10
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	6022      	str	r2, [r4, #0]
 8007788:	701d      	strb	r5, [r3, #0]
 800778a:	e7bf      	b.n	800770c <_puts_r+0x58>
 800778c:	0800a290 	.word	0x0800a290
 8007790:	0800a2b0 	.word	0x0800a2b0
 8007794:	0800a270 	.word	0x0800a270

08007798 <puts>:
 8007798:	b510      	push	{r4, lr}
 800779a:	4b03      	ldr	r3, [pc, #12]	; (80077a8 <puts+0x10>)
 800779c:	0001      	movs	r1, r0
 800779e:	6818      	ldr	r0, [r3, #0]
 80077a0:	f7ff ff88 	bl	80076b4 <_puts_r>
 80077a4:	bd10      	pop	{r4, pc}
 80077a6:	46c0      	nop			; (mov r8, r8)
 80077a8:	20000064 	.word	0x20000064

080077ac <setvbuf>:
 80077ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ae:	001d      	movs	r5, r3
 80077b0:	4b5d      	ldr	r3, [pc, #372]	; (8007928 <setvbuf+0x17c>)
 80077b2:	b085      	sub	sp, #20
 80077b4:	681e      	ldr	r6, [r3, #0]
 80077b6:	0004      	movs	r4, r0
 80077b8:	000f      	movs	r7, r1
 80077ba:	9200      	str	r2, [sp, #0]
 80077bc:	2e00      	cmp	r6, #0
 80077be:	d005      	beq.n	80077cc <setvbuf+0x20>
 80077c0:	69b3      	ldr	r3, [r6, #24]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d102      	bne.n	80077cc <setvbuf+0x20>
 80077c6:	0030      	movs	r0, r6
 80077c8:	f001 f992 	bl	8008af0 <__sinit>
 80077cc:	4b57      	ldr	r3, [pc, #348]	; (800792c <setvbuf+0x180>)
 80077ce:	429c      	cmp	r4, r3
 80077d0:	d161      	bne.n	8007896 <setvbuf+0xea>
 80077d2:	6874      	ldr	r4, [r6, #4]
 80077d4:	9b00      	ldr	r3, [sp, #0]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d005      	beq.n	80077e6 <setvbuf+0x3a>
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d900      	bls.n	80077e0 <setvbuf+0x34>
 80077de:	e09d      	b.n	800791c <setvbuf+0x170>
 80077e0:	2d00      	cmp	r5, #0
 80077e2:	da00      	bge.n	80077e6 <setvbuf+0x3a>
 80077e4:	e09a      	b.n	800791c <setvbuf+0x170>
 80077e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077e8:	07db      	lsls	r3, r3, #31
 80077ea:	d405      	bmi.n	80077f8 <setvbuf+0x4c>
 80077ec:	89a3      	ldrh	r3, [r4, #12]
 80077ee:	059b      	lsls	r3, r3, #22
 80077f0:	d402      	bmi.n	80077f8 <setvbuf+0x4c>
 80077f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077f4:	f001 fa21 	bl	8008c3a <__retarget_lock_acquire_recursive>
 80077f8:	0021      	movs	r1, r4
 80077fa:	0030      	movs	r0, r6
 80077fc:	f001 f8d6 	bl	80089ac <_fflush_r>
 8007800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007802:	2900      	cmp	r1, #0
 8007804:	d008      	beq.n	8007818 <setvbuf+0x6c>
 8007806:	0023      	movs	r3, r4
 8007808:	3344      	adds	r3, #68	; 0x44
 800780a:	4299      	cmp	r1, r3
 800780c:	d002      	beq.n	8007814 <setvbuf+0x68>
 800780e:	0030      	movs	r0, r6
 8007810:	f001 fe68 	bl	80094e4 <_free_r>
 8007814:	2300      	movs	r3, #0
 8007816:	6363      	str	r3, [r4, #52]	; 0x34
 8007818:	2300      	movs	r3, #0
 800781a:	61a3      	str	r3, [r4, #24]
 800781c:	6063      	str	r3, [r4, #4]
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	061b      	lsls	r3, r3, #24
 8007822:	d503      	bpl.n	800782c <setvbuf+0x80>
 8007824:	0030      	movs	r0, r6
 8007826:	6921      	ldr	r1, [r4, #16]
 8007828:	f001 fe5c 	bl	80094e4 <_free_r>
 800782c:	89a3      	ldrh	r3, [r4, #12]
 800782e:	4a40      	ldr	r2, [pc, #256]	; (8007930 <setvbuf+0x184>)
 8007830:	4013      	ands	r3, r2
 8007832:	81a3      	strh	r3, [r4, #12]
 8007834:	9b00      	ldr	r3, [sp, #0]
 8007836:	2b02      	cmp	r3, #2
 8007838:	d100      	bne.n	800783c <setvbuf+0x90>
 800783a:	e069      	b.n	8007910 <setvbuf+0x164>
 800783c:	ab03      	add	r3, sp, #12
 800783e:	0021      	movs	r1, r4
 8007840:	0030      	movs	r0, r6
 8007842:	aa02      	add	r2, sp, #8
 8007844:	f001 f9fc 	bl	8008c40 <__swhatbuf_r>
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	4303      	orrs	r3, r0
 800784c:	81a3      	strh	r3, [r4, #12]
 800784e:	2d00      	cmp	r5, #0
 8007850:	d12b      	bne.n	80078aa <setvbuf+0xfe>
 8007852:	9d02      	ldr	r5, [sp, #8]
 8007854:	0028      	movs	r0, r5
 8007856:	f001 fa5f 	bl	8008d18 <malloc>
 800785a:	1e07      	subs	r7, r0, #0
 800785c:	d153      	bne.n	8007906 <setvbuf+0x15a>
 800785e:	9b02      	ldr	r3, [sp, #8]
 8007860:	9301      	str	r3, [sp, #4]
 8007862:	42ab      	cmp	r3, r5
 8007864:	d149      	bne.n	80078fa <setvbuf+0x14e>
 8007866:	2501      	movs	r5, #1
 8007868:	426d      	negs	r5, r5
 800786a:	2302      	movs	r3, #2
 800786c:	89a2      	ldrh	r2, [r4, #12]
 800786e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007870:	4313      	orrs	r3, r2
 8007872:	2200      	movs	r2, #0
 8007874:	60a2      	str	r2, [r4, #8]
 8007876:	0022      	movs	r2, r4
 8007878:	3247      	adds	r2, #71	; 0x47
 800787a:	6022      	str	r2, [r4, #0]
 800787c:	6122      	str	r2, [r4, #16]
 800787e:	2201      	movs	r2, #1
 8007880:	b21b      	sxth	r3, r3
 8007882:	81a3      	strh	r3, [r4, #12]
 8007884:	6162      	str	r2, [r4, #20]
 8007886:	4211      	tst	r1, r2
 8007888:	d134      	bne.n	80078f4 <setvbuf+0x148>
 800788a:	059b      	lsls	r3, r3, #22
 800788c:	d432      	bmi.n	80078f4 <setvbuf+0x148>
 800788e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007890:	f001 f9d4 	bl	8008c3c <__retarget_lock_release_recursive>
 8007894:	e02e      	b.n	80078f4 <setvbuf+0x148>
 8007896:	4b27      	ldr	r3, [pc, #156]	; (8007934 <setvbuf+0x188>)
 8007898:	429c      	cmp	r4, r3
 800789a:	d101      	bne.n	80078a0 <setvbuf+0xf4>
 800789c:	68b4      	ldr	r4, [r6, #8]
 800789e:	e799      	b.n	80077d4 <setvbuf+0x28>
 80078a0:	4b25      	ldr	r3, [pc, #148]	; (8007938 <setvbuf+0x18c>)
 80078a2:	429c      	cmp	r4, r3
 80078a4:	d196      	bne.n	80077d4 <setvbuf+0x28>
 80078a6:	68f4      	ldr	r4, [r6, #12]
 80078a8:	e794      	b.n	80077d4 <setvbuf+0x28>
 80078aa:	2f00      	cmp	r7, #0
 80078ac:	d0d2      	beq.n	8007854 <setvbuf+0xa8>
 80078ae:	69b3      	ldr	r3, [r6, #24]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d102      	bne.n	80078ba <setvbuf+0x10e>
 80078b4:	0030      	movs	r0, r6
 80078b6:	f001 f91b 	bl	8008af0 <__sinit>
 80078ba:	9b00      	ldr	r3, [sp, #0]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d102      	bne.n	80078c6 <setvbuf+0x11a>
 80078c0:	89a2      	ldrh	r2, [r4, #12]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	81a3      	strh	r3, [r4, #12]
 80078c6:	89a2      	ldrh	r2, [r4, #12]
 80078c8:	2308      	movs	r3, #8
 80078ca:	0011      	movs	r1, r2
 80078cc:	6027      	str	r7, [r4, #0]
 80078ce:	6127      	str	r7, [r4, #16]
 80078d0:	6165      	str	r5, [r4, #20]
 80078d2:	4019      	ands	r1, r3
 80078d4:	421a      	tst	r2, r3
 80078d6:	d01f      	beq.n	8007918 <setvbuf+0x16c>
 80078d8:	07d3      	lsls	r3, r2, #31
 80078da:	d51b      	bpl.n	8007914 <setvbuf+0x168>
 80078dc:	2300      	movs	r3, #0
 80078de:	426d      	negs	r5, r5
 80078e0:	60a3      	str	r3, [r4, #8]
 80078e2:	61a5      	str	r5, [r4, #24]
 80078e4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80078e6:	2301      	movs	r3, #1
 80078e8:	000d      	movs	r5, r1
 80078ea:	401d      	ands	r5, r3
 80078ec:	4219      	tst	r1, r3
 80078ee:	d118      	bne.n	8007922 <setvbuf+0x176>
 80078f0:	0593      	lsls	r3, r2, #22
 80078f2:	d5cc      	bpl.n	800788e <setvbuf+0xe2>
 80078f4:	0028      	movs	r0, r5
 80078f6:	b005      	add	sp, #20
 80078f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078fa:	9801      	ldr	r0, [sp, #4]
 80078fc:	f001 fa0c 	bl	8008d18 <malloc>
 8007900:	9d01      	ldr	r5, [sp, #4]
 8007902:	1e07      	subs	r7, r0, #0
 8007904:	d0af      	beq.n	8007866 <setvbuf+0xba>
 8007906:	2380      	movs	r3, #128	; 0x80
 8007908:	89a2      	ldrh	r2, [r4, #12]
 800790a:	4313      	orrs	r3, r2
 800790c:	81a3      	strh	r3, [r4, #12]
 800790e:	e7ce      	b.n	80078ae <setvbuf+0x102>
 8007910:	2500      	movs	r5, #0
 8007912:	e7aa      	b.n	800786a <setvbuf+0xbe>
 8007914:	60a5      	str	r5, [r4, #8]
 8007916:	e7e5      	b.n	80078e4 <setvbuf+0x138>
 8007918:	60a1      	str	r1, [r4, #8]
 800791a:	e7e3      	b.n	80078e4 <setvbuf+0x138>
 800791c:	2501      	movs	r5, #1
 800791e:	426d      	negs	r5, r5
 8007920:	e7e8      	b.n	80078f4 <setvbuf+0x148>
 8007922:	2500      	movs	r5, #0
 8007924:	e7e6      	b.n	80078f4 <setvbuf+0x148>
 8007926:	46c0      	nop			; (mov r8, r8)
 8007928:	20000064 	.word	0x20000064
 800792c:	0800a290 	.word	0x0800a290
 8007930:	fffff35c 	.word	0xfffff35c
 8007934:	0800a2b0 	.word	0x0800a2b0
 8007938:	0800a270 	.word	0x0800a270

0800793c <_vsniprintf_r>:
 800793c:	b530      	push	{r4, r5, lr}
 800793e:	0014      	movs	r4, r2
 8007940:	0005      	movs	r5, r0
 8007942:	001a      	movs	r2, r3
 8007944:	b09b      	sub	sp, #108	; 0x6c
 8007946:	2c00      	cmp	r4, #0
 8007948:	da05      	bge.n	8007956 <_vsniprintf_r+0x1a>
 800794a:	238b      	movs	r3, #139	; 0x8b
 800794c:	6003      	str	r3, [r0, #0]
 800794e:	2001      	movs	r0, #1
 8007950:	4240      	negs	r0, r0
 8007952:	b01b      	add	sp, #108	; 0x6c
 8007954:	bd30      	pop	{r4, r5, pc}
 8007956:	2382      	movs	r3, #130	; 0x82
 8007958:	4668      	mov	r0, sp
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	8183      	strh	r3, [r0, #12]
 800795e:	2300      	movs	r3, #0
 8007960:	9100      	str	r1, [sp, #0]
 8007962:	9104      	str	r1, [sp, #16]
 8007964:	429c      	cmp	r4, r3
 8007966:	d000      	beq.n	800796a <_vsniprintf_r+0x2e>
 8007968:	1e63      	subs	r3, r4, #1
 800796a:	9302      	str	r3, [sp, #8]
 800796c:	9305      	str	r3, [sp, #20]
 800796e:	2301      	movs	r3, #1
 8007970:	4669      	mov	r1, sp
 8007972:	425b      	negs	r3, r3
 8007974:	81cb      	strh	r3, [r1, #14]
 8007976:	0028      	movs	r0, r5
 8007978:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800797a:	f001 fef7 	bl	800976c <_svfiprintf_r>
 800797e:	1c43      	adds	r3, r0, #1
 8007980:	da01      	bge.n	8007986 <_vsniprintf_r+0x4a>
 8007982:	238b      	movs	r3, #139	; 0x8b
 8007984:	602b      	str	r3, [r5, #0]
 8007986:	2c00      	cmp	r4, #0
 8007988:	d0e3      	beq.n	8007952 <_vsniprintf_r+0x16>
 800798a:	2300      	movs	r3, #0
 800798c:	9a00      	ldr	r2, [sp, #0]
 800798e:	7013      	strb	r3, [r2, #0]
 8007990:	e7df      	b.n	8007952 <_vsniprintf_r+0x16>
	...

08007994 <vsniprintf>:
 8007994:	b507      	push	{r0, r1, r2, lr}
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	0013      	movs	r3, r2
 800799a:	000a      	movs	r2, r1
 800799c:	0001      	movs	r1, r0
 800799e:	4802      	ldr	r0, [pc, #8]	; (80079a8 <vsniprintf+0x14>)
 80079a0:	6800      	ldr	r0, [r0, #0]
 80079a2:	f7ff ffcb 	bl	800793c <_vsniprintf_r>
 80079a6:	bd0e      	pop	{r1, r2, r3, pc}
 80079a8:	20000064 	.word	0x20000064

080079ac <__swbuf_r>:
 80079ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ae:	0005      	movs	r5, r0
 80079b0:	000e      	movs	r6, r1
 80079b2:	0014      	movs	r4, r2
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d004      	beq.n	80079c2 <__swbuf_r+0x16>
 80079b8:	6983      	ldr	r3, [r0, #24]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <__swbuf_r+0x16>
 80079be:	f001 f897 	bl	8008af0 <__sinit>
 80079c2:	4b22      	ldr	r3, [pc, #136]	; (8007a4c <__swbuf_r+0xa0>)
 80079c4:	429c      	cmp	r4, r3
 80079c6:	d12e      	bne.n	8007a26 <__swbuf_r+0x7a>
 80079c8:	686c      	ldr	r4, [r5, #4]
 80079ca:	69a3      	ldr	r3, [r4, #24]
 80079cc:	60a3      	str	r3, [r4, #8]
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	071b      	lsls	r3, r3, #28
 80079d2:	d532      	bpl.n	8007a3a <__swbuf_r+0x8e>
 80079d4:	6923      	ldr	r3, [r4, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d02f      	beq.n	8007a3a <__swbuf_r+0x8e>
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	6922      	ldr	r2, [r4, #16]
 80079de:	b2f7      	uxtb	r7, r6
 80079e0:	1a98      	subs	r0, r3, r2
 80079e2:	6963      	ldr	r3, [r4, #20]
 80079e4:	b2f6      	uxtb	r6, r6
 80079e6:	4283      	cmp	r3, r0
 80079e8:	dc05      	bgt.n	80079f6 <__swbuf_r+0x4a>
 80079ea:	0021      	movs	r1, r4
 80079ec:	0028      	movs	r0, r5
 80079ee:	f000 ffdd 	bl	80089ac <_fflush_r>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d127      	bne.n	8007a46 <__swbuf_r+0x9a>
 80079f6:	68a3      	ldr	r3, [r4, #8]
 80079f8:	3001      	adds	r0, #1
 80079fa:	3b01      	subs	r3, #1
 80079fc:	60a3      	str	r3, [r4, #8]
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	6022      	str	r2, [r4, #0]
 8007a04:	701f      	strb	r7, [r3, #0]
 8007a06:	6963      	ldr	r3, [r4, #20]
 8007a08:	4283      	cmp	r3, r0
 8007a0a:	d004      	beq.n	8007a16 <__swbuf_r+0x6a>
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	07db      	lsls	r3, r3, #31
 8007a10:	d507      	bpl.n	8007a22 <__swbuf_r+0x76>
 8007a12:	2e0a      	cmp	r6, #10
 8007a14:	d105      	bne.n	8007a22 <__swbuf_r+0x76>
 8007a16:	0021      	movs	r1, r4
 8007a18:	0028      	movs	r0, r5
 8007a1a:	f000 ffc7 	bl	80089ac <_fflush_r>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	d111      	bne.n	8007a46 <__swbuf_r+0x9a>
 8007a22:	0030      	movs	r0, r6
 8007a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a26:	4b0a      	ldr	r3, [pc, #40]	; (8007a50 <__swbuf_r+0xa4>)
 8007a28:	429c      	cmp	r4, r3
 8007a2a:	d101      	bne.n	8007a30 <__swbuf_r+0x84>
 8007a2c:	68ac      	ldr	r4, [r5, #8]
 8007a2e:	e7cc      	b.n	80079ca <__swbuf_r+0x1e>
 8007a30:	4b08      	ldr	r3, [pc, #32]	; (8007a54 <__swbuf_r+0xa8>)
 8007a32:	429c      	cmp	r4, r3
 8007a34:	d1c9      	bne.n	80079ca <__swbuf_r+0x1e>
 8007a36:	68ec      	ldr	r4, [r5, #12]
 8007a38:	e7c7      	b.n	80079ca <__swbuf_r+0x1e>
 8007a3a:	0021      	movs	r1, r4
 8007a3c:	0028      	movs	r0, r5
 8007a3e:	f000 f80b 	bl	8007a58 <__swsetup_r>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d0c9      	beq.n	80079da <__swbuf_r+0x2e>
 8007a46:	2601      	movs	r6, #1
 8007a48:	4276      	negs	r6, r6
 8007a4a:	e7ea      	b.n	8007a22 <__swbuf_r+0x76>
 8007a4c:	0800a290 	.word	0x0800a290
 8007a50:	0800a2b0 	.word	0x0800a2b0
 8007a54:	0800a270 	.word	0x0800a270

08007a58 <__swsetup_r>:
 8007a58:	4b37      	ldr	r3, [pc, #220]	; (8007b38 <__swsetup_r+0xe0>)
 8007a5a:	b570      	push	{r4, r5, r6, lr}
 8007a5c:	681d      	ldr	r5, [r3, #0]
 8007a5e:	0006      	movs	r6, r0
 8007a60:	000c      	movs	r4, r1
 8007a62:	2d00      	cmp	r5, #0
 8007a64:	d005      	beq.n	8007a72 <__swsetup_r+0x1a>
 8007a66:	69ab      	ldr	r3, [r5, #24]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d102      	bne.n	8007a72 <__swsetup_r+0x1a>
 8007a6c:	0028      	movs	r0, r5
 8007a6e:	f001 f83f 	bl	8008af0 <__sinit>
 8007a72:	4b32      	ldr	r3, [pc, #200]	; (8007b3c <__swsetup_r+0xe4>)
 8007a74:	429c      	cmp	r4, r3
 8007a76:	d10f      	bne.n	8007a98 <__swsetup_r+0x40>
 8007a78:	686c      	ldr	r4, [r5, #4]
 8007a7a:	230c      	movs	r3, #12
 8007a7c:	5ee2      	ldrsh	r2, [r4, r3]
 8007a7e:	b293      	uxth	r3, r2
 8007a80:	0711      	lsls	r1, r2, #28
 8007a82:	d42d      	bmi.n	8007ae0 <__swsetup_r+0x88>
 8007a84:	06d9      	lsls	r1, r3, #27
 8007a86:	d411      	bmi.n	8007aac <__swsetup_r+0x54>
 8007a88:	2309      	movs	r3, #9
 8007a8a:	2001      	movs	r0, #1
 8007a8c:	6033      	str	r3, [r6, #0]
 8007a8e:	3337      	adds	r3, #55	; 0x37
 8007a90:	4313      	orrs	r3, r2
 8007a92:	81a3      	strh	r3, [r4, #12]
 8007a94:	4240      	negs	r0, r0
 8007a96:	bd70      	pop	{r4, r5, r6, pc}
 8007a98:	4b29      	ldr	r3, [pc, #164]	; (8007b40 <__swsetup_r+0xe8>)
 8007a9a:	429c      	cmp	r4, r3
 8007a9c:	d101      	bne.n	8007aa2 <__swsetup_r+0x4a>
 8007a9e:	68ac      	ldr	r4, [r5, #8]
 8007aa0:	e7eb      	b.n	8007a7a <__swsetup_r+0x22>
 8007aa2:	4b28      	ldr	r3, [pc, #160]	; (8007b44 <__swsetup_r+0xec>)
 8007aa4:	429c      	cmp	r4, r3
 8007aa6:	d1e8      	bne.n	8007a7a <__swsetup_r+0x22>
 8007aa8:	68ec      	ldr	r4, [r5, #12]
 8007aaa:	e7e6      	b.n	8007a7a <__swsetup_r+0x22>
 8007aac:	075b      	lsls	r3, r3, #29
 8007aae:	d513      	bpl.n	8007ad8 <__swsetup_r+0x80>
 8007ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ab2:	2900      	cmp	r1, #0
 8007ab4:	d008      	beq.n	8007ac8 <__swsetup_r+0x70>
 8007ab6:	0023      	movs	r3, r4
 8007ab8:	3344      	adds	r3, #68	; 0x44
 8007aba:	4299      	cmp	r1, r3
 8007abc:	d002      	beq.n	8007ac4 <__swsetup_r+0x6c>
 8007abe:	0030      	movs	r0, r6
 8007ac0:	f001 fd10 	bl	80094e4 <_free_r>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	6363      	str	r3, [r4, #52]	; 0x34
 8007ac8:	2224      	movs	r2, #36	; 0x24
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	4393      	bics	r3, r2
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	6063      	str	r3, [r4, #4]
 8007ad4:	6923      	ldr	r3, [r4, #16]
 8007ad6:	6023      	str	r3, [r4, #0]
 8007ad8:	2308      	movs	r3, #8
 8007ada:	89a2      	ldrh	r2, [r4, #12]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	81a3      	strh	r3, [r4, #12]
 8007ae0:	6923      	ldr	r3, [r4, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10b      	bne.n	8007afe <__swsetup_r+0xa6>
 8007ae6:	21a0      	movs	r1, #160	; 0xa0
 8007ae8:	2280      	movs	r2, #128	; 0x80
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	0089      	lsls	r1, r1, #2
 8007aee:	0092      	lsls	r2, r2, #2
 8007af0:	400b      	ands	r3, r1
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d003      	beq.n	8007afe <__swsetup_r+0xa6>
 8007af6:	0021      	movs	r1, r4
 8007af8:	0030      	movs	r0, r6
 8007afa:	f001 f8c9 	bl	8008c90 <__smakebuf_r>
 8007afe:	220c      	movs	r2, #12
 8007b00:	5ea3      	ldrsh	r3, [r4, r2]
 8007b02:	2001      	movs	r0, #1
 8007b04:	001a      	movs	r2, r3
 8007b06:	b299      	uxth	r1, r3
 8007b08:	4002      	ands	r2, r0
 8007b0a:	4203      	tst	r3, r0
 8007b0c:	d00f      	beq.n	8007b2e <__swsetup_r+0xd6>
 8007b0e:	2200      	movs	r2, #0
 8007b10:	60a2      	str	r2, [r4, #8]
 8007b12:	6962      	ldr	r2, [r4, #20]
 8007b14:	4252      	negs	r2, r2
 8007b16:	61a2      	str	r2, [r4, #24]
 8007b18:	2000      	movs	r0, #0
 8007b1a:	6922      	ldr	r2, [r4, #16]
 8007b1c:	4282      	cmp	r2, r0
 8007b1e:	d1ba      	bne.n	8007a96 <__swsetup_r+0x3e>
 8007b20:	060a      	lsls	r2, r1, #24
 8007b22:	d5b8      	bpl.n	8007a96 <__swsetup_r+0x3e>
 8007b24:	2240      	movs	r2, #64	; 0x40
 8007b26:	4313      	orrs	r3, r2
 8007b28:	81a3      	strh	r3, [r4, #12]
 8007b2a:	3801      	subs	r0, #1
 8007b2c:	e7b3      	b.n	8007a96 <__swsetup_r+0x3e>
 8007b2e:	0788      	lsls	r0, r1, #30
 8007b30:	d400      	bmi.n	8007b34 <__swsetup_r+0xdc>
 8007b32:	6962      	ldr	r2, [r4, #20]
 8007b34:	60a2      	str	r2, [r4, #8]
 8007b36:	e7ef      	b.n	8007b18 <__swsetup_r+0xc0>
 8007b38:	20000064 	.word	0x20000064
 8007b3c:	0800a290 	.word	0x0800a290
 8007b40:	0800a2b0 	.word	0x0800a2b0
 8007b44:	0800a270 	.word	0x0800a270

08007b48 <quorem>:
 8007b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b4a:	0006      	movs	r6, r0
 8007b4c:	690b      	ldr	r3, [r1, #16]
 8007b4e:	6932      	ldr	r2, [r6, #16]
 8007b50:	b087      	sub	sp, #28
 8007b52:	2000      	movs	r0, #0
 8007b54:	9103      	str	r1, [sp, #12]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	db65      	blt.n	8007c26 <quorem+0xde>
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	009c      	lsls	r4, r3, #2
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	000b      	movs	r3, r1
 8007b62:	3314      	adds	r3, #20
 8007b64:	9305      	str	r3, [sp, #20]
 8007b66:	191b      	adds	r3, r3, r4
 8007b68:	9304      	str	r3, [sp, #16]
 8007b6a:	0033      	movs	r3, r6
 8007b6c:	3314      	adds	r3, #20
 8007b6e:	9302      	str	r3, [sp, #8]
 8007b70:	191c      	adds	r4, r3, r4
 8007b72:	9b04      	ldr	r3, [sp, #16]
 8007b74:	6827      	ldr	r7, [r4, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	0038      	movs	r0, r7
 8007b7a:	1c5d      	adds	r5, r3, #1
 8007b7c:	0029      	movs	r1, r5
 8007b7e:	9301      	str	r3, [sp, #4]
 8007b80:	f7f8 fadc 	bl	800013c <__udivsi3>
 8007b84:	9001      	str	r0, [sp, #4]
 8007b86:	42af      	cmp	r7, r5
 8007b88:	d324      	bcc.n	8007bd4 <quorem+0x8c>
 8007b8a:	2500      	movs	r5, #0
 8007b8c:	46ac      	mov	ip, r5
 8007b8e:	9802      	ldr	r0, [sp, #8]
 8007b90:	9f05      	ldr	r7, [sp, #20]
 8007b92:	cf08      	ldmia	r7!, {r3}
 8007b94:	9a01      	ldr	r2, [sp, #4]
 8007b96:	b299      	uxth	r1, r3
 8007b98:	4351      	muls	r1, r2
 8007b9a:	0c1b      	lsrs	r3, r3, #16
 8007b9c:	4353      	muls	r3, r2
 8007b9e:	1949      	adds	r1, r1, r5
 8007ba0:	0c0a      	lsrs	r2, r1, #16
 8007ba2:	189b      	adds	r3, r3, r2
 8007ba4:	6802      	ldr	r2, [r0, #0]
 8007ba6:	b289      	uxth	r1, r1
 8007ba8:	b292      	uxth	r2, r2
 8007baa:	4462      	add	r2, ip
 8007bac:	1a52      	subs	r2, r2, r1
 8007bae:	6801      	ldr	r1, [r0, #0]
 8007bb0:	0c1d      	lsrs	r5, r3, #16
 8007bb2:	0c09      	lsrs	r1, r1, #16
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	1acb      	subs	r3, r1, r3
 8007bb8:	1411      	asrs	r1, r2, #16
 8007bba:	185b      	adds	r3, r3, r1
 8007bbc:	1419      	asrs	r1, r3, #16
 8007bbe:	b292      	uxth	r2, r2
 8007bc0:	041b      	lsls	r3, r3, #16
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	9b04      	ldr	r3, [sp, #16]
 8007bc6:	468c      	mov	ip, r1
 8007bc8:	c004      	stmia	r0!, {r2}
 8007bca:	42bb      	cmp	r3, r7
 8007bcc:	d2e1      	bcs.n	8007b92 <quorem+0x4a>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d030      	beq.n	8007c36 <quorem+0xee>
 8007bd4:	0030      	movs	r0, r6
 8007bd6:	9903      	ldr	r1, [sp, #12]
 8007bd8:	f001 fb40 	bl	800925c <__mcmp>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	db21      	blt.n	8007c24 <quorem+0xdc>
 8007be0:	0030      	movs	r0, r6
 8007be2:	2400      	movs	r4, #0
 8007be4:	9b01      	ldr	r3, [sp, #4]
 8007be6:	9903      	ldr	r1, [sp, #12]
 8007be8:	3301      	adds	r3, #1
 8007bea:	9301      	str	r3, [sp, #4]
 8007bec:	3014      	adds	r0, #20
 8007bee:	3114      	adds	r1, #20
 8007bf0:	6803      	ldr	r3, [r0, #0]
 8007bf2:	c920      	ldmia	r1!, {r5}
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	1914      	adds	r4, r2, r4
 8007bf8:	b2aa      	uxth	r2, r5
 8007bfa:	1aa2      	subs	r2, r4, r2
 8007bfc:	0c1b      	lsrs	r3, r3, #16
 8007bfe:	0c2d      	lsrs	r5, r5, #16
 8007c00:	1414      	asrs	r4, r2, #16
 8007c02:	1b5b      	subs	r3, r3, r5
 8007c04:	191b      	adds	r3, r3, r4
 8007c06:	141c      	asrs	r4, r3, #16
 8007c08:	b292      	uxth	r2, r2
 8007c0a:	041b      	lsls	r3, r3, #16
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	c008      	stmia	r0!, {r3}
 8007c10:	9b04      	ldr	r3, [sp, #16]
 8007c12:	428b      	cmp	r3, r1
 8007c14:	d2ec      	bcs.n	8007bf0 <quorem+0xa8>
 8007c16:	9b00      	ldr	r3, [sp, #0]
 8007c18:	9a02      	ldr	r2, [sp, #8]
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	18d3      	adds	r3, r2, r3
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	2a00      	cmp	r2, #0
 8007c22:	d015      	beq.n	8007c50 <quorem+0x108>
 8007c24:	9801      	ldr	r0, [sp, #4]
 8007c26:	b007      	add	sp, #28
 8007c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d106      	bne.n	8007c3e <quorem+0xf6>
 8007c30:	9b00      	ldr	r3, [sp, #0]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	9b02      	ldr	r3, [sp, #8]
 8007c38:	3c04      	subs	r4, #4
 8007c3a:	42a3      	cmp	r3, r4
 8007c3c:	d3f5      	bcc.n	8007c2a <quorem+0xe2>
 8007c3e:	9b00      	ldr	r3, [sp, #0]
 8007c40:	6133      	str	r3, [r6, #16]
 8007c42:	e7c7      	b.n	8007bd4 <quorem+0x8c>
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	2a00      	cmp	r2, #0
 8007c48:	d106      	bne.n	8007c58 <quorem+0x110>
 8007c4a:	9a00      	ldr	r2, [sp, #0]
 8007c4c:	3a01      	subs	r2, #1
 8007c4e:	9200      	str	r2, [sp, #0]
 8007c50:	9a02      	ldr	r2, [sp, #8]
 8007c52:	3b04      	subs	r3, #4
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d3f5      	bcc.n	8007c44 <quorem+0xfc>
 8007c58:	9b00      	ldr	r3, [sp, #0]
 8007c5a:	6133      	str	r3, [r6, #16]
 8007c5c:	e7e2      	b.n	8007c24 <quorem+0xdc>
	...

08007c60 <_dtoa_r>:
 8007c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c62:	b09d      	sub	sp, #116	; 0x74
 8007c64:	9202      	str	r2, [sp, #8]
 8007c66:	9303      	str	r3, [sp, #12]
 8007c68:	9b02      	ldr	r3, [sp, #8]
 8007c6a:	9c03      	ldr	r4, [sp, #12]
 8007c6c:	9308      	str	r3, [sp, #32]
 8007c6e:	9409      	str	r4, [sp, #36]	; 0x24
 8007c70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c72:	0007      	movs	r7, r0
 8007c74:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007c76:	2c00      	cmp	r4, #0
 8007c78:	d10e      	bne.n	8007c98 <_dtoa_r+0x38>
 8007c7a:	2010      	movs	r0, #16
 8007c7c:	f001 f84c 	bl	8008d18 <malloc>
 8007c80:	1e02      	subs	r2, r0, #0
 8007c82:	6278      	str	r0, [r7, #36]	; 0x24
 8007c84:	d104      	bne.n	8007c90 <_dtoa_r+0x30>
 8007c86:	21ea      	movs	r1, #234	; 0xea
 8007c88:	4bc7      	ldr	r3, [pc, #796]	; (8007fa8 <_dtoa_r+0x348>)
 8007c8a:	48c8      	ldr	r0, [pc, #800]	; (8007fac <_dtoa_r+0x34c>)
 8007c8c:	f002 f842 	bl	8009d14 <__assert_func>
 8007c90:	6044      	str	r4, [r0, #4]
 8007c92:	6084      	str	r4, [r0, #8]
 8007c94:	6004      	str	r4, [r0, #0]
 8007c96:	60c4      	str	r4, [r0, #12]
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	6819      	ldr	r1, [r3, #0]
 8007c9c:	2900      	cmp	r1, #0
 8007c9e:	d00a      	beq.n	8007cb6 <_dtoa_r+0x56>
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	4093      	lsls	r3, r2
 8007ca6:	604a      	str	r2, [r1, #4]
 8007ca8:	608b      	str	r3, [r1, #8]
 8007caa:	0038      	movs	r0, r7
 8007cac:	f001 f896 	bl	8008ddc <_Bfree>
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	9b03      	ldr	r3, [sp, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	da20      	bge.n	8007cfe <_dtoa_r+0x9e>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	602b      	str	r3, [r5, #0]
 8007cc0:	9b03      	ldr	r3, [sp, #12]
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	085b      	lsrs	r3, r3, #1
 8007cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007cca:	4bb9      	ldr	r3, [pc, #740]	; (8007fb0 <_dtoa_r+0x350>)
 8007ccc:	4ab8      	ldr	r2, [pc, #736]	; (8007fb0 <_dtoa_r+0x350>)
 8007cce:	402b      	ands	r3, r5
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d117      	bne.n	8007d04 <_dtoa_r+0xa4>
 8007cd4:	4bb7      	ldr	r3, [pc, #732]	; (8007fb4 <_dtoa_r+0x354>)
 8007cd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007cd8:	0328      	lsls	r0, r5, #12
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	9b02      	ldr	r3, [sp, #8]
 8007cde:	0b00      	lsrs	r0, r0, #12
 8007ce0:	4318      	orrs	r0, r3
 8007ce2:	d101      	bne.n	8007ce8 <_dtoa_r+0x88>
 8007ce4:	f000 fdbf 	bl	8008866 <_dtoa_r+0xc06>
 8007ce8:	48b3      	ldr	r0, [pc, #716]	; (8007fb8 <_dtoa_r+0x358>)
 8007cea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cec:	9006      	str	r0, [sp, #24]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <_dtoa_r+0x98>
 8007cf2:	4bb2      	ldr	r3, [pc, #712]	; (8007fbc <_dtoa_r+0x35c>)
 8007cf4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	9806      	ldr	r0, [sp, #24]
 8007cfa:	b01d      	add	sp, #116	; 0x74
 8007cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cfe:	2300      	movs	r3, #0
 8007d00:	602b      	str	r3, [r5, #0]
 8007d02:	e7e1      	b.n	8007cc8 <_dtoa_r+0x68>
 8007d04:	9b08      	ldr	r3, [sp, #32]
 8007d06:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007d08:	9312      	str	r3, [sp, #72]	; 0x48
 8007d0a:	9413      	str	r4, [sp, #76]	; 0x4c
 8007d0c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d0e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d10:	2200      	movs	r2, #0
 8007d12:	2300      	movs	r3, #0
 8007d14:	f7f8 fb98 	bl	8000448 <__aeabi_dcmpeq>
 8007d18:	1e04      	subs	r4, r0, #0
 8007d1a:	d009      	beq.n	8007d30 <_dtoa_r+0xd0>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d20:	6013      	str	r3, [r2, #0]
 8007d22:	4ba7      	ldr	r3, [pc, #668]	; (8007fc0 <_dtoa_r+0x360>)
 8007d24:	9306      	str	r3, [sp, #24]
 8007d26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d0e5      	beq.n	8007cf8 <_dtoa_r+0x98>
 8007d2c:	4ba5      	ldr	r3, [pc, #660]	; (8007fc4 <_dtoa_r+0x364>)
 8007d2e:	e7e1      	b.n	8007cf4 <_dtoa_r+0x94>
 8007d30:	ab1a      	add	r3, sp, #104	; 0x68
 8007d32:	9301      	str	r3, [sp, #4]
 8007d34:	ab1b      	add	r3, sp, #108	; 0x6c
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	0038      	movs	r0, r7
 8007d3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d3e:	f001 fb41 	bl	80093c4 <__d2b>
 8007d42:	006e      	lsls	r6, r5, #1
 8007d44:	9005      	str	r0, [sp, #20]
 8007d46:	0d76      	lsrs	r6, r6, #21
 8007d48:	d100      	bne.n	8007d4c <_dtoa_r+0xec>
 8007d4a:	e07c      	b.n	8007e46 <_dtoa_r+0x1e6>
 8007d4c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d4e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d52:	4a9d      	ldr	r2, [pc, #628]	; (8007fc8 <_dtoa_r+0x368>)
 8007d54:	031b      	lsls	r3, r3, #12
 8007d56:	0b1b      	lsrs	r3, r3, #12
 8007d58:	431a      	orrs	r2, r3
 8007d5a:	0011      	movs	r1, r2
 8007d5c:	4b9b      	ldr	r3, [pc, #620]	; (8007fcc <_dtoa_r+0x36c>)
 8007d5e:	9418      	str	r4, [sp, #96]	; 0x60
 8007d60:	18f6      	adds	r6, r6, r3
 8007d62:	2200      	movs	r2, #0
 8007d64:	4b9a      	ldr	r3, [pc, #616]	; (8007fd0 <_dtoa_r+0x370>)
 8007d66:	f7f9 fe33 	bl	80019d0 <__aeabi_dsub>
 8007d6a:	4a9a      	ldr	r2, [pc, #616]	; (8007fd4 <_dtoa_r+0x374>)
 8007d6c:	4b9a      	ldr	r3, [pc, #616]	; (8007fd8 <_dtoa_r+0x378>)
 8007d6e:	f7f9 fbc3 	bl	80014f8 <__aeabi_dmul>
 8007d72:	4a9a      	ldr	r2, [pc, #616]	; (8007fdc <_dtoa_r+0x37c>)
 8007d74:	4b9a      	ldr	r3, [pc, #616]	; (8007fe0 <_dtoa_r+0x380>)
 8007d76:	f7f8 fc81 	bl	800067c <__aeabi_dadd>
 8007d7a:	0004      	movs	r4, r0
 8007d7c:	0030      	movs	r0, r6
 8007d7e:	000d      	movs	r5, r1
 8007d80:	f7fa fa0c 	bl	800219c <__aeabi_i2d>
 8007d84:	4a97      	ldr	r2, [pc, #604]	; (8007fe4 <_dtoa_r+0x384>)
 8007d86:	4b98      	ldr	r3, [pc, #608]	; (8007fe8 <_dtoa_r+0x388>)
 8007d88:	f7f9 fbb6 	bl	80014f8 <__aeabi_dmul>
 8007d8c:	0002      	movs	r2, r0
 8007d8e:	000b      	movs	r3, r1
 8007d90:	0020      	movs	r0, r4
 8007d92:	0029      	movs	r1, r5
 8007d94:	f7f8 fc72 	bl	800067c <__aeabi_dadd>
 8007d98:	0004      	movs	r4, r0
 8007d9a:	000d      	movs	r5, r1
 8007d9c:	f7fa f9c8 	bl	8002130 <__aeabi_d2iz>
 8007da0:	2200      	movs	r2, #0
 8007da2:	9002      	str	r0, [sp, #8]
 8007da4:	2300      	movs	r3, #0
 8007da6:	0020      	movs	r0, r4
 8007da8:	0029      	movs	r1, r5
 8007daa:	f7f8 fb53 	bl	8000454 <__aeabi_dcmplt>
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d00b      	beq.n	8007dca <_dtoa_r+0x16a>
 8007db2:	9802      	ldr	r0, [sp, #8]
 8007db4:	f7fa f9f2 	bl	800219c <__aeabi_i2d>
 8007db8:	002b      	movs	r3, r5
 8007dba:	0022      	movs	r2, r4
 8007dbc:	f7f8 fb44 	bl	8000448 <__aeabi_dcmpeq>
 8007dc0:	4243      	negs	r3, r0
 8007dc2:	4158      	adcs	r0, r3
 8007dc4:	9b02      	ldr	r3, [sp, #8]
 8007dc6:	1a1b      	subs	r3, r3, r0
 8007dc8:	9302      	str	r3, [sp, #8]
 8007dca:	2301      	movs	r3, #1
 8007dcc:	9316      	str	r3, [sp, #88]	; 0x58
 8007dce:	9b02      	ldr	r3, [sp, #8]
 8007dd0:	2b16      	cmp	r3, #22
 8007dd2:	d80f      	bhi.n	8007df4 <_dtoa_r+0x194>
 8007dd4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007dd6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007dd8:	00da      	lsls	r2, r3, #3
 8007dda:	4b84      	ldr	r3, [pc, #528]	; (8007fec <_dtoa_r+0x38c>)
 8007ddc:	189b      	adds	r3, r3, r2
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f7f8 fb37 	bl	8000454 <__aeabi_dcmplt>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	d049      	beq.n	8007e7e <_dtoa_r+0x21e>
 8007dea:	9b02      	ldr	r3, [sp, #8]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	9302      	str	r3, [sp, #8]
 8007df0:	2300      	movs	r3, #0
 8007df2:	9316      	str	r3, [sp, #88]	; 0x58
 8007df4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007df6:	1b9e      	subs	r6, r3, r6
 8007df8:	2300      	movs	r3, #0
 8007dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8007dfc:	0033      	movs	r3, r6
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	930d      	str	r3, [sp, #52]	; 0x34
 8007e02:	d504      	bpl.n	8007e0e <_dtoa_r+0x1ae>
 8007e04:	2301      	movs	r3, #1
 8007e06:	1b9b      	subs	r3, r3, r6
 8007e08:	930a      	str	r3, [sp, #40]	; 0x28
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	930d      	str	r3, [sp, #52]	; 0x34
 8007e0e:	9b02      	ldr	r3, [sp, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	db36      	blt.n	8007e82 <_dtoa_r+0x222>
 8007e14:	9a02      	ldr	r2, [sp, #8]
 8007e16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e18:	4694      	mov	ip, r2
 8007e1a:	4463      	add	r3, ip
 8007e1c:	930d      	str	r3, [sp, #52]	; 0x34
 8007e1e:	2300      	movs	r3, #0
 8007e20:	9215      	str	r2, [sp, #84]	; 0x54
 8007e22:	930e      	str	r3, [sp, #56]	; 0x38
 8007e24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e26:	2401      	movs	r4, #1
 8007e28:	2b09      	cmp	r3, #9
 8007e2a:	d864      	bhi.n	8007ef6 <_dtoa_r+0x296>
 8007e2c:	2b05      	cmp	r3, #5
 8007e2e:	dd02      	ble.n	8007e36 <_dtoa_r+0x1d6>
 8007e30:	2400      	movs	r4, #0
 8007e32:	3b04      	subs	r3, #4
 8007e34:	9322      	str	r3, [sp, #136]	; 0x88
 8007e36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e38:	1e98      	subs	r0, r3, #2
 8007e3a:	2803      	cmp	r0, #3
 8007e3c:	d864      	bhi.n	8007f08 <_dtoa_r+0x2a8>
 8007e3e:	f7f8 f969 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007e42:	3829      	.short	0x3829
 8007e44:	5836      	.short	0x5836
 8007e46:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007e48:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007e4a:	189e      	adds	r6, r3, r2
 8007e4c:	4b68      	ldr	r3, [pc, #416]	; (8007ff0 <_dtoa_r+0x390>)
 8007e4e:	18f2      	adds	r2, r6, r3
 8007e50:	2a20      	cmp	r2, #32
 8007e52:	dd0f      	ble.n	8007e74 <_dtoa_r+0x214>
 8007e54:	2340      	movs	r3, #64	; 0x40
 8007e56:	1a9b      	subs	r3, r3, r2
 8007e58:	409d      	lsls	r5, r3
 8007e5a:	4b66      	ldr	r3, [pc, #408]	; (8007ff4 <_dtoa_r+0x394>)
 8007e5c:	9802      	ldr	r0, [sp, #8]
 8007e5e:	18f3      	adds	r3, r6, r3
 8007e60:	40d8      	lsrs	r0, r3
 8007e62:	4328      	orrs	r0, r5
 8007e64:	f7fa f9ca 	bl	80021fc <__aeabi_ui2d>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	4c63      	ldr	r4, [pc, #396]	; (8007ff8 <_dtoa_r+0x398>)
 8007e6c:	3e01      	subs	r6, #1
 8007e6e:	1909      	adds	r1, r1, r4
 8007e70:	9318      	str	r3, [sp, #96]	; 0x60
 8007e72:	e776      	b.n	8007d62 <_dtoa_r+0x102>
 8007e74:	2320      	movs	r3, #32
 8007e76:	9802      	ldr	r0, [sp, #8]
 8007e78:	1a9b      	subs	r3, r3, r2
 8007e7a:	4098      	lsls	r0, r3
 8007e7c:	e7f2      	b.n	8007e64 <_dtoa_r+0x204>
 8007e7e:	9016      	str	r0, [sp, #88]	; 0x58
 8007e80:	e7b8      	b.n	8007df4 <_dtoa_r+0x194>
 8007e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e84:	9a02      	ldr	r2, [sp, #8]
 8007e86:	1a9b      	subs	r3, r3, r2
 8007e88:	930a      	str	r3, [sp, #40]	; 0x28
 8007e8a:	4253      	negs	r3, r2
 8007e8c:	930e      	str	r3, [sp, #56]	; 0x38
 8007e8e:	2300      	movs	r3, #0
 8007e90:	9315      	str	r3, [sp, #84]	; 0x54
 8007e92:	e7c7      	b.n	8007e24 <_dtoa_r+0x1c4>
 8007e94:	2300      	movs	r3, #0
 8007e96:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e9a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e9c:	9307      	str	r3, [sp, #28]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	dc13      	bgt.n	8007eca <_dtoa_r+0x26a>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	001a      	movs	r2, r3
 8007ea6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ea8:	9307      	str	r3, [sp, #28]
 8007eaa:	9223      	str	r2, [sp, #140]	; 0x8c
 8007eac:	e00d      	b.n	8007eca <_dtoa_r+0x26a>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e7f1      	b.n	8007e96 <_dtoa_r+0x236>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007eb8:	4694      	mov	ip, r2
 8007eba:	9b02      	ldr	r3, [sp, #8]
 8007ebc:	4463      	add	r3, ip
 8007ebe:	930c      	str	r3, [sp, #48]	; 0x30
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	9307      	str	r3, [sp, #28]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	dc00      	bgt.n	8007eca <_dtoa_r+0x26a>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	2200      	movs	r2, #0
 8007ecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ece:	6042      	str	r2, [r0, #4]
 8007ed0:	3204      	adds	r2, #4
 8007ed2:	0015      	movs	r5, r2
 8007ed4:	3514      	adds	r5, #20
 8007ed6:	6841      	ldr	r1, [r0, #4]
 8007ed8:	429d      	cmp	r5, r3
 8007eda:	d919      	bls.n	8007f10 <_dtoa_r+0x2b0>
 8007edc:	0038      	movs	r0, r7
 8007ede:	f000 ff39 	bl	8008d54 <_Balloc>
 8007ee2:	9006      	str	r0, [sp, #24]
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	d117      	bne.n	8007f18 <_dtoa_r+0x2b8>
 8007ee8:	21d5      	movs	r1, #213	; 0xd5
 8007eea:	0002      	movs	r2, r0
 8007eec:	4b43      	ldr	r3, [pc, #268]	; (8007ffc <_dtoa_r+0x39c>)
 8007eee:	0049      	lsls	r1, r1, #1
 8007ef0:	e6cb      	b.n	8007c8a <_dtoa_r+0x2a>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e7de      	b.n	8007eb4 <_dtoa_r+0x254>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	940f      	str	r4, [sp, #60]	; 0x3c
 8007efa:	9322      	str	r3, [sp, #136]	; 0x88
 8007efc:	3b01      	subs	r3, #1
 8007efe:	930c      	str	r3, [sp, #48]	; 0x30
 8007f00:	9307      	str	r3, [sp, #28]
 8007f02:	2200      	movs	r2, #0
 8007f04:	3313      	adds	r3, #19
 8007f06:	e7d0      	b.n	8007eaa <_dtoa_r+0x24a>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f0c:	3b02      	subs	r3, #2
 8007f0e:	e7f6      	b.n	8007efe <_dtoa_r+0x29e>
 8007f10:	3101      	adds	r1, #1
 8007f12:	6041      	str	r1, [r0, #4]
 8007f14:	0052      	lsls	r2, r2, #1
 8007f16:	e7dc      	b.n	8007ed2 <_dtoa_r+0x272>
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	9a06      	ldr	r2, [sp, #24]
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	9b07      	ldr	r3, [sp, #28]
 8007f20:	2b0e      	cmp	r3, #14
 8007f22:	d900      	bls.n	8007f26 <_dtoa_r+0x2c6>
 8007f24:	e0eb      	b.n	80080fe <_dtoa_r+0x49e>
 8007f26:	2c00      	cmp	r4, #0
 8007f28:	d100      	bne.n	8007f2c <_dtoa_r+0x2cc>
 8007f2a:	e0e8      	b.n	80080fe <_dtoa_r+0x49e>
 8007f2c:	9b02      	ldr	r3, [sp, #8]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	dd68      	ble.n	8008004 <_dtoa_r+0x3a4>
 8007f32:	001a      	movs	r2, r3
 8007f34:	210f      	movs	r1, #15
 8007f36:	4b2d      	ldr	r3, [pc, #180]	; (8007fec <_dtoa_r+0x38c>)
 8007f38:	400a      	ands	r2, r1
 8007f3a:	00d2      	lsls	r2, r2, #3
 8007f3c:	189b      	adds	r3, r3, r2
 8007f3e:	681d      	ldr	r5, [r3, #0]
 8007f40:	685e      	ldr	r6, [r3, #4]
 8007f42:	9b02      	ldr	r3, [sp, #8]
 8007f44:	111c      	asrs	r4, r3, #4
 8007f46:	2302      	movs	r3, #2
 8007f48:	9310      	str	r3, [sp, #64]	; 0x40
 8007f4a:	9b02      	ldr	r3, [sp, #8]
 8007f4c:	05db      	lsls	r3, r3, #23
 8007f4e:	d50b      	bpl.n	8007f68 <_dtoa_r+0x308>
 8007f50:	4b2b      	ldr	r3, [pc, #172]	; (8008000 <_dtoa_r+0x3a0>)
 8007f52:	400c      	ands	r4, r1
 8007f54:	6a1a      	ldr	r2, [r3, #32]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f58:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007f5a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f5c:	f7f8 feca 	bl	8000cf4 <__aeabi_ddiv>
 8007f60:	2303      	movs	r3, #3
 8007f62:	9008      	str	r0, [sp, #32]
 8007f64:	9109      	str	r1, [sp, #36]	; 0x24
 8007f66:	9310      	str	r3, [sp, #64]	; 0x40
 8007f68:	4b25      	ldr	r3, [pc, #148]	; (8008000 <_dtoa_r+0x3a0>)
 8007f6a:	9314      	str	r3, [sp, #80]	; 0x50
 8007f6c:	2c00      	cmp	r4, #0
 8007f6e:	d108      	bne.n	8007f82 <_dtoa_r+0x322>
 8007f70:	9808      	ldr	r0, [sp, #32]
 8007f72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f74:	002a      	movs	r2, r5
 8007f76:	0033      	movs	r3, r6
 8007f78:	f7f8 febc 	bl	8000cf4 <__aeabi_ddiv>
 8007f7c:	9008      	str	r0, [sp, #32]
 8007f7e:	9109      	str	r1, [sp, #36]	; 0x24
 8007f80:	e05c      	b.n	800803c <_dtoa_r+0x3dc>
 8007f82:	2301      	movs	r3, #1
 8007f84:	421c      	tst	r4, r3
 8007f86:	d00b      	beq.n	8007fa0 <_dtoa_r+0x340>
 8007f88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f8a:	0028      	movs	r0, r5
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	9310      	str	r3, [sp, #64]	; 0x40
 8007f90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f92:	0031      	movs	r1, r6
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f7f9 faae 	bl	80014f8 <__aeabi_dmul>
 8007f9c:	0005      	movs	r5, r0
 8007f9e:	000e      	movs	r6, r1
 8007fa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fa2:	1064      	asrs	r4, r4, #1
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	e7e0      	b.n	8007f6a <_dtoa_r+0x30a>
 8007fa8:	0800a1ed 	.word	0x0800a1ed
 8007fac:	0800a204 	.word	0x0800a204
 8007fb0:	7ff00000 	.word	0x7ff00000
 8007fb4:	0000270f 	.word	0x0000270f
 8007fb8:	0800a1e9 	.word	0x0800a1e9
 8007fbc:	0800a1ec 	.word	0x0800a1ec
 8007fc0:	0800a1bc 	.word	0x0800a1bc
 8007fc4:	0800a1bd 	.word	0x0800a1bd
 8007fc8:	3ff00000 	.word	0x3ff00000
 8007fcc:	fffffc01 	.word	0xfffffc01
 8007fd0:	3ff80000 	.word	0x3ff80000
 8007fd4:	636f4361 	.word	0x636f4361
 8007fd8:	3fd287a7 	.word	0x3fd287a7
 8007fdc:	8b60c8b3 	.word	0x8b60c8b3
 8007fe0:	3fc68a28 	.word	0x3fc68a28
 8007fe4:	509f79fb 	.word	0x509f79fb
 8007fe8:	3fd34413 	.word	0x3fd34413
 8007fec:	0800a358 	.word	0x0800a358
 8007ff0:	00000432 	.word	0x00000432
 8007ff4:	00000412 	.word	0x00000412
 8007ff8:	fe100000 	.word	0xfe100000
 8007ffc:	0800a25f 	.word	0x0800a25f
 8008000:	0800a330 	.word	0x0800a330
 8008004:	2302      	movs	r3, #2
 8008006:	9310      	str	r3, [sp, #64]	; 0x40
 8008008:	9b02      	ldr	r3, [sp, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d016      	beq.n	800803c <_dtoa_r+0x3dc>
 800800e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008010:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008012:	425c      	negs	r4, r3
 8008014:	230f      	movs	r3, #15
 8008016:	4ab6      	ldr	r2, [pc, #728]	; (80082f0 <_dtoa_r+0x690>)
 8008018:	4023      	ands	r3, r4
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	18d3      	adds	r3, r2, r3
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f7f9 fa69 	bl	80014f8 <__aeabi_dmul>
 8008026:	2601      	movs	r6, #1
 8008028:	2300      	movs	r3, #0
 800802a:	9008      	str	r0, [sp, #32]
 800802c:	9109      	str	r1, [sp, #36]	; 0x24
 800802e:	4db1      	ldr	r5, [pc, #708]	; (80082f4 <_dtoa_r+0x694>)
 8008030:	1124      	asrs	r4, r4, #4
 8008032:	2c00      	cmp	r4, #0
 8008034:	d000      	beq.n	8008038 <_dtoa_r+0x3d8>
 8008036:	e094      	b.n	8008162 <_dtoa_r+0x502>
 8008038:	2b00      	cmp	r3, #0
 800803a:	d19f      	bne.n	8007f7c <_dtoa_r+0x31c>
 800803c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800803e:	2b00      	cmp	r3, #0
 8008040:	d100      	bne.n	8008044 <_dtoa_r+0x3e4>
 8008042:	e09b      	b.n	800817c <_dtoa_r+0x51c>
 8008044:	9c08      	ldr	r4, [sp, #32]
 8008046:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008048:	2200      	movs	r2, #0
 800804a:	0020      	movs	r0, r4
 800804c:	0029      	movs	r1, r5
 800804e:	4baa      	ldr	r3, [pc, #680]	; (80082f8 <_dtoa_r+0x698>)
 8008050:	f7f8 fa00 	bl	8000454 <__aeabi_dcmplt>
 8008054:	2800      	cmp	r0, #0
 8008056:	d100      	bne.n	800805a <_dtoa_r+0x3fa>
 8008058:	e090      	b.n	800817c <_dtoa_r+0x51c>
 800805a:	9b07      	ldr	r3, [sp, #28]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d100      	bne.n	8008062 <_dtoa_r+0x402>
 8008060:	e08c      	b.n	800817c <_dtoa_r+0x51c>
 8008062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008064:	2b00      	cmp	r3, #0
 8008066:	dd46      	ble.n	80080f6 <_dtoa_r+0x496>
 8008068:	9b02      	ldr	r3, [sp, #8]
 800806a:	2200      	movs	r2, #0
 800806c:	0020      	movs	r0, r4
 800806e:	0029      	movs	r1, r5
 8008070:	1e5e      	subs	r6, r3, #1
 8008072:	4ba2      	ldr	r3, [pc, #648]	; (80082fc <_dtoa_r+0x69c>)
 8008074:	f7f9 fa40 	bl	80014f8 <__aeabi_dmul>
 8008078:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800807a:	9008      	str	r0, [sp, #32]
 800807c:	9109      	str	r1, [sp, #36]	; 0x24
 800807e:	3301      	adds	r3, #1
 8008080:	9310      	str	r3, [sp, #64]	; 0x40
 8008082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008084:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008086:	9c08      	ldr	r4, [sp, #32]
 8008088:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800808a:	9314      	str	r3, [sp, #80]	; 0x50
 800808c:	f7fa f886 	bl	800219c <__aeabi_i2d>
 8008090:	0022      	movs	r2, r4
 8008092:	002b      	movs	r3, r5
 8008094:	f7f9 fa30 	bl	80014f8 <__aeabi_dmul>
 8008098:	2200      	movs	r2, #0
 800809a:	4b99      	ldr	r3, [pc, #612]	; (8008300 <_dtoa_r+0x6a0>)
 800809c:	f7f8 faee 	bl	800067c <__aeabi_dadd>
 80080a0:	9010      	str	r0, [sp, #64]	; 0x40
 80080a2:	9111      	str	r1, [sp, #68]	; 0x44
 80080a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080a8:	9208      	str	r2, [sp, #32]
 80080aa:	9309      	str	r3, [sp, #36]	; 0x24
 80080ac:	4a95      	ldr	r2, [pc, #596]	; (8008304 <_dtoa_r+0x6a4>)
 80080ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080b0:	4694      	mov	ip, r2
 80080b2:	4463      	add	r3, ip
 80080b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80080b6:	9309      	str	r3, [sp, #36]	; 0x24
 80080b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d161      	bne.n	8008182 <_dtoa_r+0x522>
 80080be:	2200      	movs	r2, #0
 80080c0:	0020      	movs	r0, r4
 80080c2:	0029      	movs	r1, r5
 80080c4:	4b90      	ldr	r3, [pc, #576]	; (8008308 <_dtoa_r+0x6a8>)
 80080c6:	f7f9 fc83 	bl	80019d0 <__aeabi_dsub>
 80080ca:	9a08      	ldr	r2, [sp, #32]
 80080cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080ce:	0004      	movs	r4, r0
 80080d0:	000d      	movs	r5, r1
 80080d2:	f7f8 f9d3 	bl	800047c <__aeabi_dcmpgt>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d000      	beq.n	80080dc <_dtoa_r+0x47c>
 80080da:	e2af      	b.n	800863c <_dtoa_r+0x9dc>
 80080dc:	488b      	ldr	r0, [pc, #556]	; (800830c <_dtoa_r+0x6ac>)
 80080de:	9911      	ldr	r1, [sp, #68]	; 0x44
 80080e0:	4684      	mov	ip, r0
 80080e2:	4461      	add	r1, ip
 80080e4:	000b      	movs	r3, r1
 80080e6:	0020      	movs	r0, r4
 80080e8:	0029      	movs	r1, r5
 80080ea:	9a08      	ldr	r2, [sp, #32]
 80080ec:	f7f8 f9b2 	bl	8000454 <__aeabi_dcmplt>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d000      	beq.n	80080f6 <_dtoa_r+0x496>
 80080f4:	e29f      	b.n	8008636 <_dtoa_r+0x9d6>
 80080f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80080fa:	9308      	str	r3, [sp, #32]
 80080fc:	9409      	str	r4, [sp, #36]	; 0x24
 80080fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008100:	2b00      	cmp	r3, #0
 8008102:	da00      	bge.n	8008106 <_dtoa_r+0x4a6>
 8008104:	e172      	b.n	80083ec <_dtoa_r+0x78c>
 8008106:	9a02      	ldr	r2, [sp, #8]
 8008108:	2a0e      	cmp	r2, #14
 800810a:	dd00      	ble.n	800810e <_dtoa_r+0x4ae>
 800810c:	e16e      	b.n	80083ec <_dtoa_r+0x78c>
 800810e:	4b78      	ldr	r3, [pc, #480]	; (80082f0 <_dtoa_r+0x690>)
 8008110:	00d2      	lsls	r2, r2, #3
 8008112:	189b      	adds	r3, r3, r2
 8008114:	685c      	ldr	r4, [r3, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	930a      	str	r3, [sp, #40]	; 0x28
 800811a:	940b      	str	r4, [sp, #44]	; 0x2c
 800811c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800811e:	2b00      	cmp	r3, #0
 8008120:	db00      	blt.n	8008124 <_dtoa_r+0x4c4>
 8008122:	e0f7      	b.n	8008314 <_dtoa_r+0x6b4>
 8008124:	9b07      	ldr	r3, [sp, #28]
 8008126:	2b00      	cmp	r3, #0
 8008128:	dd00      	ble.n	800812c <_dtoa_r+0x4cc>
 800812a:	e0f3      	b.n	8008314 <_dtoa_r+0x6b4>
 800812c:	d000      	beq.n	8008130 <_dtoa_r+0x4d0>
 800812e:	e282      	b.n	8008636 <_dtoa_r+0x9d6>
 8008130:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008132:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008134:	2200      	movs	r2, #0
 8008136:	4b74      	ldr	r3, [pc, #464]	; (8008308 <_dtoa_r+0x6a8>)
 8008138:	f7f9 f9de 	bl	80014f8 <__aeabi_dmul>
 800813c:	9a08      	ldr	r2, [sp, #32]
 800813e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008140:	f7f8 f9a6 	bl	8000490 <__aeabi_dcmpge>
 8008144:	9e07      	ldr	r6, [sp, #28]
 8008146:	0035      	movs	r5, r6
 8008148:	2800      	cmp	r0, #0
 800814a:	d000      	beq.n	800814e <_dtoa_r+0x4ee>
 800814c:	e259      	b.n	8008602 <_dtoa_r+0x9a2>
 800814e:	9b06      	ldr	r3, [sp, #24]
 8008150:	9a06      	ldr	r2, [sp, #24]
 8008152:	3301      	adds	r3, #1
 8008154:	9308      	str	r3, [sp, #32]
 8008156:	2331      	movs	r3, #49	; 0x31
 8008158:	7013      	strb	r3, [r2, #0]
 800815a:	9b02      	ldr	r3, [sp, #8]
 800815c:	3301      	adds	r3, #1
 800815e:	9302      	str	r3, [sp, #8]
 8008160:	e254      	b.n	800860c <_dtoa_r+0x9ac>
 8008162:	4234      	tst	r4, r6
 8008164:	d007      	beq.n	8008176 <_dtoa_r+0x516>
 8008166:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008168:	3301      	adds	r3, #1
 800816a:	9310      	str	r3, [sp, #64]	; 0x40
 800816c:	682a      	ldr	r2, [r5, #0]
 800816e:	686b      	ldr	r3, [r5, #4]
 8008170:	f7f9 f9c2 	bl	80014f8 <__aeabi_dmul>
 8008174:	0033      	movs	r3, r6
 8008176:	1064      	asrs	r4, r4, #1
 8008178:	3508      	adds	r5, #8
 800817a:	e75a      	b.n	8008032 <_dtoa_r+0x3d2>
 800817c:	9e02      	ldr	r6, [sp, #8]
 800817e:	9b07      	ldr	r3, [sp, #28]
 8008180:	e780      	b.n	8008084 <_dtoa_r+0x424>
 8008182:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008184:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008186:	1e5a      	subs	r2, r3, #1
 8008188:	4b59      	ldr	r3, [pc, #356]	; (80082f0 <_dtoa_r+0x690>)
 800818a:	00d2      	lsls	r2, r2, #3
 800818c:	189b      	adds	r3, r3, r2
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	2900      	cmp	r1, #0
 8008194:	d051      	beq.n	800823a <_dtoa_r+0x5da>
 8008196:	2000      	movs	r0, #0
 8008198:	495d      	ldr	r1, [pc, #372]	; (8008310 <_dtoa_r+0x6b0>)
 800819a:	f7f8 fdab 	bl	8000cf4 <__aeabi_ddiv>
 800819e:	9a08      	ldr	r2, [sp, #32]
 80081a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a2:	f7f9 fc15 	bl	80019d0 <__aeabi_dsub>
 80081a6:	9a06      	ldr	r2, [sp, #24]
 80081a8:	9b06      	ldr	r3, [sp, #24]
 80081aa:	4694      	mov	ip, r2
 80081ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80081ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081b0:	9010      	str	r0, [sp, #64]	; 0x40
 80081b2:	9111      	str	r1, [sp, #68]	; 0x44
 80081b4:	4463      	add	r3, ip
 80081b6:	9319      	str	r3, [sp, #100]	; 0x64
 80081b8:	0029      	movs	r1, r5
 80081ba:	0020      	movs	r0, r4
 80081bc:	f7f9 ffb8 	bl	8002130 <__aeabi_d2iz>
 80081c0:	9014      	str	r0, [sp, #80]	; 0x50
 80081c2:	f7f9 ffeb 	bl	800219c <__aeabi_i2d>
 80081c6:	0002      	movs	r2, r0
 80081c8:	000b      	movs	r3, r1
 80081ca:	0020      	movs	r0, r4
 80081cc:	0029      	movs	r1, r5
 80081ce:	f7f9 fbff 	bl	80019d0 <__aeabi_dsub>
 80081d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80081d6:	3301      	adds	r3, #1
 80081d8:	9308      	str	r3, [sp, #32]
 80081da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081dc:	0004      	movs	r4, r0
 80081de:	3330      	adds	r3, #48	; 0x30
 80081e0:	7013      	strb	r3, [r2, #0]
 80081e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081e6:	000d      	movs	r5, r1
 80081e8:	f7f8 f934 	bl	8000454 <__aeabi_dcmplt>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d175      	bne.n	80082dc <_dtoa_r+0x67c>
 80081f0:	0022      	movs	r2, r4
 80081f2:	002b      	movs	r3, r5
 80081f4:	2000      	movs	r0, #0
 80081f6:	4940      	ldr	r1, [pc, #256]	; (80082f8 <_dtoa_r+0x698>)
 80081f8:	f7f9 fbea 	bl	80019d0 <__aeabi_dsub>
 80081fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008200:	f7f8 f928 	bl	8000454 <__aeabi_dcmplt>
 8008204:	2800      	cmp	r0, #0
 8008206:	d000      	beq.n	800820a <_dtoa_r+0x5aa>
 8008208:	e0d2      	b.n	80083b0 <_dtoa_r+0x750>
 800820a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800820c:	9a08      	ldr	r2, [sp, #32]
 800820e:	4293      	cmp	r3, r2
 8008210:	d100      	bne.n	8008214 <_dtoa_r+0x5b4>
 8008212:	e770      	b.n	80080f6 <_dtoa_r+0x496>
 8008214:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008216:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008218:	2200      	movs	r2, #0
 800821a:	4b38      	ldr	r3, [pc, #224]	; (80082fc <_dtoa_r+0x69c>)
 800821c:	f7f9 f96c 	bl	80014f8 <__aeabi_dmul>
 8008220:	4b36      	ldr	r3, [pc, #216]	; (80082fc <_dtoa_r+0x69c>)
 8008222:	9010      	str	r0, [sp, #64]	; 0x40
 8008224:	9111      	str	r1, [sp, #68]	; 0x44
 8008226:	2200      	movs	r2, #0
 8008228:	0020      	movs	r0, r4
 800822a:	0029      	movs	r1, r5
 800822c:	f7f9 f964 	bl	80014f8 <__aeabi_dmul>
 8008230:	9b08      	ldr	r3, [sp, #32]
 8008232:	0004      	movs	r4, r0
 8008234:	000d      	movs	r5, r1
 8008236:	9317      	str	r3, [sp, #92]	; 0x5c
 8008238:	e7be      	b.n	80081b8 <_dtoa_r+0x558>
 800823a:	9808      	ldr	r0, [sp, #32]
 800823c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800823e:	f7f9 f95b 	bl	80014f8 <__aeabi_dmul>
 8008242:	9a06      	ldr	r2, [sp, #24]
 8008244:	9b06      	ldr	r3, [sp, #24]
 8008246:	4694      	mov	ip, r2
 8008248:	9308      	str	r3, [sp, #32]
 800824a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800824c:	9010      	str	r0, [sp, #64]	; 0x40
 800824e:	9111      	str	r1, [sp, #68]	; 0x44
 8008250:	4463      	add	r3, ip
 8008252:	9319      	str	r3, [sp, #100]	; 0x64
 8008254:	0029      	movs	r1, r5
 8008256:	0020      	movs	r0, r4
 8008258:	f7f9 ff6a 	bl	8002130 <__aeabi_d2iz>
 800825c:	9017      	str	r0, [sp, #92]	; 0x5c
 800825e:	f7f9 ff9d 	bl	800219c <__aeabi_i2d>
 8008262:	0002      	movs	r2, r0
 8008264:	000b      	movs	r3, r1
 8008266:	0020      	movs	r0, r4
 8008268:	0029      	movs	r1, r5
 800826a:	f7f9 fbb1 	bl	80019d0 <__aeabi_dsub>
 800826e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008270:	9a08      	ldr	r2, [sp, #32]
 8008272:	3330      	adds	r3, #48	; 0x30
 8008274:	7013      	strb	r3, [r2, #0]
 8008276:	0013      	movs	r3, r2
 8008278:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800827a:	3301      	adds	r3, #1
 800827c:	0004      	movs	r4, r0
 800827e:	000d      	movs	r5, r1
 8008280:	9308      	str	r3, [sp, #32]
 8008282:	4293      	cmp	r3, r2
 8008284:	d12c      	bne.n	80082e0 <_dtoa_r+0x680>
 8008286:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008288:	9911      	ldr	r1, [sp, #68]	; 0x44
 800828a:	9a06      	ldr	r2, [sp, #24]
 800828c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800828e:	4694      	mov	ip, r2
 8008290:	4463      	add	r3, ip
 8008292:	2200      	movs	r2, #0
 8008294:	9308      	str	r3, [sp, #32]
 8008296:	4b1e      	ldr	r3, [pc, #120]	; (8008310 <_dtoa_r+0x6b0>)
 8008298:	f7f8 f9f0 	bl	800067c <__aeabi_dadd>
 800829c:	0002      	movs	r2, r0
 800829e:	000b      	movs	r3, r1
 80082a0:	0020      	movs	r0, r4
 80082a2:	0029      	movs	r1, r5
 80082a4:	f7f8 f8ea 	bl	800047c <__aeabi_dcmpgt>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d000      	beq.n	80082ae <_dtoa_r+0x64e>
 80082ac:	e080      	b.n	80083b0 <_dtoa_r+0x750>
 80082ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082b2:	2000      	movs	r0, #0
 80082b4:	4916      	ldr	r1, [pc, #88]	; (8008310 <_dtoa_r+0x6b0>)
 80082b6:	f7f9 fb8b 	bl	80019d0 <__aeabi_dsub>
 80082ba:	0002      	movs	r2, r0
 80082bc:	000b      	movs	r3, r1
 80082be:	0020      	movs	r0, r4
 80082c0:	0029      	movs	r1, r5
 80082c2:	f7f8 f8c7 	bl	8000454 <__aeabi_dcmplt>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d100      	bne.n	80082cc <_dtoa_r+0x66c>
 80082ca:	e714      	b.n	80080f6 <_dtoa_r+0x496>
 80082cc:	9b08      	ldr	r3, [sp, #32]
 80082ce:	001a      	movs	r2, r3
 80082d0:	3a01      	subs	r2, #1
 80082d2:	9208      	str	r2, [sp, #32]
 80082d4:	7812      	ldrb	r2, [r2, #0]
 80082d6:	2a30      	cmp	r2, #48	; 0x30
 80082d8:	d0f8      	beq.n	80082cc <_dtoa_r+0x66c>
 80082da:	9308      	str	r3, [sp, #32]
 80082dc:	9602      	str	r6, [sp, #8]
 80082de:	e055      	b.n	800838c <_dtoa_r+0x72c>
 80082e0:	2200      	movs	r2, #0
 80082e2:	4b06      	ldr	r3, [pc, #24]	; (80082fc <_dtoa_r+0x69c>)
 80082e4:	f7f9 f908 	bl	80014f8 <__aeabi_dmul>
 80082e8:	0004      	movs	r4, r0
 80082ea:	000d      	movs	r5, r1
 80082ec:	e7b2      	b.n	8008254 <_dtoa_r+0x5f4>
 80082ee:	46c0      	nop			; (mov r8, r8)
 80082f0:	0800a358 	.word	0x0800a358
 80082f4:	0800a330 	.word	0x0800a330
 80082f8:	3ff00000 	.word	0x3ff00000
 80082fc:	40240000 	.word	0x40240000
 8008300:	401c0000 	.word	0x401c0000
 8008304:	fcc00000 	.word	0xfcc00000
 8008308:	40140000 	.word	0x40140000
 800830c:	7cc00000 	.word	0x7cc00000
 8008310:	3fe00000 	.word	0x3fe00000
 8008314:	9b07      	ldr	r3, [sp, #28]
 8008316:	9e06      	ldr	r6, [sp, #24]
 8008318:	3b01      	subs	r3, #1
 800831a:	199b      	adds	r3, r3, r6
 800831c:	930c      	str	r3, [sp, #48]	; 0x30
 800831e:	9c08      	ldr	r4, [sp, #32]
 8008320:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008326:	0020      	movs	r0, r4
 8008328:	0029      	movs	r1, r5
 800832a:	f7f8 fce3 	bl	8000cf4 <__aeabi_ddiv>
 800832e:	f7f9 feff 	bl	8002130 <__aeabi_d2iz>
 8008332:	9007      	str	r0, [sp, #28]
 8008334:	f7f9 ff32 	bl	800219c <__aeabi_i2d>
 8008338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800833a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800833c:	f7f9 f8dc 	bl	80014f8 <__aeabi_dmul>
 8008340:	0002      	movs	r2, r0
 8008342:	000b      	movs	r3, r1
 8008344:	0020      	movs	r0, r4
 8008346:	0029      	movs	r1, r5
 8008348:	f7f9 fb42 	bl	80019d0 <__aeabi_dsub>
 800834c:	0033      	movs	r3, r6
 800834e:	9a07      	ldr	r2, [sp, #28]
 8008350:	3601      	adds	r6, #1
 8008352:	3230      	adds	r2, #48	; 0x30
 8008354:	701a      	strb	r2, [r3, #0]
 8008356:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008358:	9608      	str	r6, [sp, #32]
 800835a:	429a      	cmp	r2, r3
 800835c:	d139      	bne.n	80083d2 <_dtoa_r+0x772>
 800835e:	0002      	movs	r2, r0
 8008360:	000b      	movs	r3, r1
 8008362:	f7f8 f98b 	bl	800067c <__aeabi_dadd>
 8008366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800836a:	0004      	movs	r4, r0
 800836c:	000d      	movs	r5, r1
 800836e:	f7f8 f885 	bl	800047c <__aeabi_dcmpgt>
 8008372:	2800      	cmp	r0, #0
 8008374:	d11b      	bne.n	80083ae <_dtoa_r+0x74e>
 8008376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800837a:	0020      	movs	r0, r4
 800837c:	0029      	movs	r1, r5
 800837e:	f7f8 f863 	bl	8000448 <__aeabi_dcmpeq>
 8008382:	2800      	cmp	r0, #0
 8008384:	d002      	beq.n	800838c <_dtoa_r+0x72c>
 8008386:	9b07      	ldr	r3, [sp, #28]
 8008388:	07db      	lsls	r3, r3, #31
 800838a:	d410      	bmi.n	80083ae <_dtoa_r+0x74e>
 800838c:	0038      	movs	r0, r7
 800838e:	9905      	ldr	r1, [sp, #20]
 8008390:	f000 fd24 	bl	8008ddc <_Bfree>
 8008394:	2300      	movs	r3, #0
 8008396:	9a08      	ldr	r2, [sp, #32]
 8008398:	9802      	ldr	r0, [sp, #8]
 800839a:	7013      	strb	r3, [r2, #0]
 800839c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800839e:	3001      	adds	r0, #1
 80083a0:	6018      	str	r0, [r3, #0]
 80083a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d100      	bne.n	80083aa <_dtoa_r+0x74a>
 80083a8:	e4a6      	b.n	8007cf8 <_dtoa_r+0x98>
 80083aa:	601a      	str	r2, [r3, #0]
 80083ac:	e4a4      	b.n	8007cf8 <_dtoa_r+0x98>
 80083ae:	9e02      	ldr	r6, [sp, #8]
 80083b0:	9b08      	ldr	r3, [sp, #32]
 80083b2:	9308      	str	r3, [sp, #32]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	781a      	ldrb	r2, [r3, #0]
 80083b8:	2a39      	cmp	r2, #57	; 0x39
 80083ba:	d106      	bne.n	80083ca <_dtoa_r+0x76a>
 80083bc:	9a06      	ldr	r2, [sp, #24]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d1f7      	bne.n	80083b2 <_dtoa_r+0x752>
 80083c2:	2230      	movs	r2, #48	; 0x30
 80083c4:	9906      	ldr	r1, [sp, #24]
 80083c6:	3601      	adds	r6, #1
 80083c8:	700a      	strb	r2, [r1, #0]
 80083ca:	781a      	ldrb	r2, [r3, #0]
 80083cc:	3201      	adds	r2, #1
 80083ce:	701a      	strb	r2, [r3, #0]
 80083d0:	e784      	b.n	80082dc <_dtoa_r+0x67c>
 80083d2:	2200      	movs	r2, #0
 80083d4:	4baa      	ldr	r3, [pc, #680]	; (8008680 <_dtoa_r+0xa20>)
 80083d6:	f7f9 f88f 	bl	80014f8 <__aeabi_dmul>
 80083da:	2200      	movs	r2, #0
 80083dc:	2300      	movs	r3, #0
 80083de:	0004      	movs	r4, r0
 80083e0:	000d      	movs	r5, r1
 80083e2:	f7f8 f831 	bl	8000448 <__aeabi_dcmpeq>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d09b      	beq.n	8008322 <_dtoa_r+0x6c2>
 80083ea:	e7cf      	b.n	800838c <_dtoa_r+0x72c>
 80083ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80083ee:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80083f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80083f2:	2d00      	cmp	r5, #0
 80083f4:	d012      	beq.n	800841c <_dtoa_r+0x7bc>
 80083f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80083f8:	2a01      	cmp	r2, #1
 80083fa:	dc66      	bgt.n	80084ca <_dtoa_r+0x86a>
 80083fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80083fe:	2a00      	cmp	r2, #0
 8008400:	d05d      	beq.n	80084be <_dtoa_r+0x85e>
 8008402:	4aa0      	ldr	r2, [pc, #640]	; (8008684 <_dtoa_r+0xa24>)
 8008404:	189b      	adds	r3, r3, r2
 8008406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008408:	2101      	movs	r1, #1
 800840a:	18d2      	adds	r2, r2, r3
 800840c:	920a      	str	r2, [sp, #40]	; 0x28
 800840e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008410:	0038      	movs	r0, r7
 8008412:	18d3      	adds	r3, r2, r3
 8008414:	930d      	str	r3, [sp, #52]	; 0x34
 8008416:	f000 fd91 	bl	8008f3c <__i2b>
 800841a:	0005      	movs	r5, r0
 800841c:	2c00      	cmp	r4, #0
 800841e:	dd0e      	ble.n	800843e <_dtoa_r+0x7de>
 8008420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008422:	2b00      	cmp	r3, #0
 8008424:	dd0b      	ble.n	800843e <_dtoa_r+0x7de>
 8008426:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008428:	0023      	movs	r3, r4
 800842a:	4294      	cmp	r4, r2
 800842c:	dd00      	ble.n	8008430 <_dtoa_r+0x7d0>
 800842e:	0013      	movs	r3, r2
 8008430:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008432:	1ae4      	subs	r4, r4, r3
 8008434:	1ad2      	subs	r2, r2, r3
 8008436:	920a      	str	r2, [sp, #40]	; 0x28
 8008438:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	930d      	str	r3, [sp, #52]	; 0x34
 800843e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008440:	2b00      	cmp	r3, #0
 8008442:	d01f      	beq.n	8008484 <_dtoa_r+0x824>
 8008444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008446:	2b00      	cmp	r3, #0
 8008448:	d054      	beq.n	80084f4 <_dtoa_r+0x894>
 800844a:	2e00      	cmp	r6, #0
 800844c:	dd11      	ble.n	8008472 <_dtoa_r+0x812>
 800844e:	0029      	movs	r1, r5
 8008450:	0032      	movs	r2, r6
 8008452:	0038      	movs	r0, r7
 8008454:	f000 fe38 	bl	80090c8 <__pow5mult>
 8008458:	9a05      	ldr	r2, [sp, #20]
 800845a:	0001      	movs	r1, r0
 800845c:	0005      	movs	r5, r0
 800845e:	0038      	movs	r0, r7
 8008460:	f000 fd82 	bl	8008f68 <__multiply>
 8008464:	9905      	ldr	r1, [sp, #20]
 8008466:	9014      	str	r0, [sp, #80]	; 0x50
 8008468:	0038      	movs	r0, r7
 800846a:	f000 fcb7 	bl	8008ddc <_Bfree>
 800846e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008470:	9305      	str	r3, [sp, #20]
 8008472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008474:	1b9a      	subs	r2, r3, r6
 8008476:	42b3      	cmp	r3, r6
 8008478:	d004      	beq.n	8008484 <_dtoa_r+0x824>
 800847a:	0038      	movs	r0, r7
 800847c:	9905      	ldr	r1, [sp, #20]
 800847e:	f000 fe23 	bl	80090c8 <__pow5mult>
 8008482:	9005      	str	r0, [sp, #20]
 8008484:	2101      	movs	r1, #1
 8008486:	0038      	movs	r0, r7
 8008488:	f000 fd58 	bl	8008f3c <__i2b>
 800848c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800848e:	0006      	movs	r6, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	dd31      	ble.n	80084f8 <_dtoa_r+0x898>
 8008494:	001a      	movs	r2, r3
 8008496:	0001      	movs	r1, r0
 8008498:	0038      	movs	r0, r7
 800849a:	f000 fe15 	bl	80090c8 <__pow5mult>
 800849e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084a0:	0006      	movs	r6, r0
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	dd2d      	ble.n	8008502 <_dtoa_r+0x8a2>
 80084a6:	2300      	movs	r3, #0
 80084a8:	930e      	str	r3, [sp, #56]	; 0x38
 80084aa:	6933      	ldr	r3, [r6, #16]
 80084ac:	3303      	adds	r3, #3
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	18f3      	adds	r3, r6, r3
 80084b2:	6858      	ldr	r0, [r3, #4]
 80084b4:	f000 fcfa 	bl	8008eac <__hi0bits>
 80084b8:	2320      	movs	r3, #32
 80084ba:	1a18      	subs	r0, r3, r0
 80084bc:	e039      	b.n	8008532 <_dtoa_r+0x8d2>
 80084be:	2336      	movs	r3, #54	; 0x36
 80084c0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80084c2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80084c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084c6:	1a9b      	subs	r3, r3, r2
 80084c8:	e79d      	b.n	8008406 <_dtoa_r+0x7a6>
 80084ca:	9b07      	ldr	r3, [sp, #28]
 80084cc:	1e5e      	subs	r6, r3, #1
 80084ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084d0:	42b3      	cmp	r3, r6
 80084d2:	db07      	blt.n	80084e4 <_dtoa_r+0x884>
 80084d4:	1b9e      	subs	r6, r3, r6
 80084d6:	9b07      	ldr	r3, [sp, #28]
 80084d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084da:	2b00      	cmp	r3, #0
 80084dc:	da93      	bge.n	8008406 <_dtoa_r+0x7a6>
 80084de:	1ae4      	subs	r4, r4, r3
 80084e0:	2300      	movs	r3, #0
 80084e2:	e790      	b.n	8008406 <_dtoa_r+0x7a6>
 80084e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80084e8:	1af3      	subs	r3, r6, r3
 80084ea:	18d3      	adds	r3, r2, r3
 80084ec:	960e      	str	r6, [sp, #56]	; 0x38
 80084ee:	9315      	str	r3, [sp, #84]	; 0x54
 80084f0:	2600      	movs	r6, #0
 80084f2:	e7f0      	b.n	80084d6 <_dtoa_r+0x876>
 80084f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084f6:	e7c0      	b.n	800847a <_dtoa_r+0x81a>
 80084f8:	2300      	movs	r3, #0
 80084fa:	930e      	str	r3, [sp, #56]	; 0x38
 80084fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084fe:	2b01      	cmp	r3, #1
 8008500:	dc13      	bgt.n	800852a <_dtoa_r+0x8ca>
 8008502:	2300      	movs	r3, #0
 8008504:	930e      	str	r3, [sp, #56]	; 0x38
 8008506:	9b08      	ldr	r3, [sp, #32]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10e      	bne.n	800852a <_dtoa_r+0x8ca>
 800850c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800850e:	031b      	lsls	r3, r3, #12
 8008510:	d10b      	bne.n	800852a <_dtoa_r+0x8ca>
 8008512:	4b5d      	ldr	r3, [pc, #372]	; (8008688 <_dtoa_r+0xa28>)
 8008514:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008516:	4213      	tst	r3, r2
 8008518:	d007      	beq.n	800852a <_dtoa_r+0x8ca>
 800851a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800851c:	3301      	adds	r3, #1
 800851e:	930a      	str	r3, [sp, #40]	; 0x28
 8008520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008522:	3301      	adds	r3, #1
 8008524:	930d      	str	r3, [sp, #52]	; 0x34
 8008526:	2301      	movs	r3, #1
 8008528:	930e      	str	r3, [sp, #56]	; 0x38
 800852a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800852c:	2001      	movs	r0, #1
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1bb      	bne.n	80084aa <_dtoa_r+0x84a>
 8008532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008534:	221f      	movs	r2, #31
 8008536:	1818      	adds	r0, r3, r0
 8008538:	0003      	movs	r3, r0
 800853a:	4013      	ands	r3, r2
 800853c:	4210      	tst	r0, r2
 800853e:	d046      	beq.n	80085ce <_dtoa_r+0x96e>
 8008540:	3201      	adds	r2, #1
 8008542:	1ad2      	subs	r2, r2, r3
 8008544:	2a04      	cmp	r2, #4
 8008546:	dd3f      	ble.n	80085c8 <_dtoa_r+0x968>
 8008548:	221c      	movs	r2, #28
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800854e:	18e4      	adds	r4, r4, r3
 8008550:	18d2      	adds	r2, r2, r3
 8008552:	920a      	str	r2, [sp, #40]	; 0x28
 8008554:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008556:	18d3      	adds	r3, r2, r3
 8008558:	930d      	str	r3, [sp, #52]	; 0x34
 800855a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800855c:	2b00      	cmp	r3, #0
 800855e:	dd05      	ble.n	800856c <_dtoa_r+0x90c>
 8008560:	001a      	movs	r2, r3
 8008562:	0038      	movs	r0, r7
 8008564:	9905      	ldr	r1, [sp, #20]
 8008566:	f000 fe0b 	bl	8009180 <__lshift>
 800856a:	9005      	str	r0, [sp, #20]
 800856c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800856e:	2b00      	cmp	r3, #0
 8008570:	dd05      	ble.n	800857e <_dtoa_r+0x91e>
 8008572:	0031      	movs	r1, r6
 8008574:	001a      	movs	r2, r3
 8008576:	0038      	movs	r0, r7
 8008578:	f000 fe02 	bl	8009180 <__lshift>
 800857c:	0006      	movs	r6, r0
 800857e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008580:	2b00      	cmp	r3, #0
 8008582:	d026      	beq.n	80085d2 <_dtoa_r+0x972>
 8008584:	0031      	movs	r1, r6
 8008586:	9805      	ldr	r0, [sp, #20]
 8008588:	f000 fe68 	bl	800925c <__mcmp>
 800858c:	2800      	cmp	r0, #0
 800858e:	da20      	bge.n	80085d2 <_dtoa_r+0x972>
 8008590:	9b02      	ldr	r3, [sp, #8]
 8008592:	220a      	movs	r2, #10
 8008594:	3b01      	subs	r3, #1
 8008596:	9302      	str	r3, [sp, #8]
 8008598:	0038      	movs	r0, r7
 800859a:	2300      	movs	r3, #0
 800859c:	9905      	ldr	r1, [sp, #20]
 800859e:	f000 fc41 	bl	8008e24 <__multadd>
 80085a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085a4:	9005      	str	r0, [sp, #20]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d100      	bne.n	80085ac <_dtoa_r+0x94c>
 80085aa:	e166      	b.n	800887a <_dtoa_r+0xc1a>
 80085ac:	2300      	movs	r3, #0
 80085ae:	0029      	movs	r1, r5
 80085b0:	220a      	movs	r2, #10
 80085b2:	0038      	movs	r0, r7
 80085b4:	f000 fc36 	bl	8008e24 <__multadd>
 80085b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085ba:	0005      	movs	r5, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	dc47      	bgt.n	8008650 <_dtoa_r+0x9f0>
 80085c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	dc0d      	bgt.n	80085e2 <_dtoa_r+0x982>
 80085c6:	e043      	b.n	8008650 <_dtoa_r+0x9f0>
 80085c8:	2a04      	cmp	r2, #4
 80085ca:	d0c6      	beq.n	800855a <_dtoa_r+0x8fa>
 80085cc:	0013      	movs	r3, r2
 80085ce:	331c      	adds	r3, #28
 80085d0:	e7bc      	b.n	800854c <_dtoa_r+0x8ec>
 80085d2:	9b07      	ldr	r3, [sp, #28]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	dc35      	bgt.n	8008644 <_dtoa_r+0x9e4>
 80085d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085da:	2b02      	cmp	r3, #2
 80085dc:	dd32      	ble.n	8008644 <_dtoa_r+0x9e4>
 80085de:	9b07      	ldr	r3, [sp, #28]
 80085e0:	930c      	str	r3, [sp, #48]	; 0x30
 80085e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10c      	bne.n	8008602 <_dtoa_r+0x9a2>
 80085e8:	0031      	movs	r1, r6
 80085ea:	2205      	movs	r2, #5
 80085ec:	0038      	movs	r0, r7
 80085ee:	f000 fc19 	bl	8008e24 <__multadd>
 80085f2:	0006      	movs	r6, r0
 80085f4:	0001      	movs	r1, r0
 80085f6:	9805      	ldr	r0, [sp, #20]
 80085f8:	f000 fe30 	bl	800925c <__mcmp>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	dd00      	ble.n	8008602 <_dtoa_r+0x9a2>
 8008600:	e5a5      	b.n	800814e <_dtoa_r+0x4ee>
 8008602:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008604:	43db      	mvns	r3, r3
 8008606:	9302      	str	r3, [sp, #8]
 8008608:	9b06      	ldr	r3, [sp, #24]
 800860a:	9308      	str	r3, [sp, #32]
 800860c:	2400      	movs	r4, #0
 800860e:	0031      	movs	r1, r6
 8008610:	0038      	movs	r0, r7
 8008612:	f000 fbe3 	bl	8008ddc <_Bfree>
 8008616:	2d00      	cmp	r5, #0
 8008618:	d100      	bne.n	800861c <_dtoa_r+0x9bc>
 800861a:	e6b7      	b.n	800838c <_dtoa_r+0x72c>
 800861c:	2c00      	cmp	r4, #0
 800861e:	d005      	beq.n	800862c <_dtoa_r+0x9cc>
 8008620:	42ac      	cmp	r4, r5
 8008622:	d003      	beq.n	800862c <_dtoa_r+0x9cc>
 8008624:	0021      	movs	r1, r4
 8008626:	0038      	movs	r0, r7
 8008628:	f000 fbd8 	bl	8008ddc <_Bfree>
 800862c:	0029      	movs	r1, r5
 800862e:	0038      	movs	r0, r7
 8008630:	f000 fbd4 	bl	8008ddc <_Bfree>
 8008634:	e6aa      	b.n	800838c <_dtoa_r+0x72c>
 8008636:	2600      	movs	r6, #0
 8008638:	0035      	movs	r5, r6
 800863a:	e7e2      	b.n	8008602 <_dtoa_r+0x9a2>
 800863c:	9602      	str	r6, [sp, #8]
 800863e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008640:	0035      	movs	r5, r6
 8008642:	e584      	b.n	800814e <_dtoa_r+0x4ee>
 8008644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008646:	2b00      	cmp	r3, #0
 8008648:	d100      	bne.n	800864c <_dtoa_r+0x9ec>
 800864a:	e0ce      	b.n	80087ea <_dtoa_r+0xb8a>
 800864c:	9b07      	ldr	r3, [sp, #28]
 800864e:	930c      	str	r3, [sp, #48]	; 0x30
 8008650:	2c00      	cmp	r4, #0
 8008652:	dd05      	ble.n	8008660 <_dtoa_r+0xa00>
 8008654:	0029      	movs	r1, r5
 8008656:	0022      	movs	r2, r4
 8008658:	0038      	movs	r0, r7
 800865a:	f000 fd91 	bl	8009180 <__lshift>
 800865e:	0005      	movs	r5, r0
 8008660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008662:	0028      	movs	r0, r5
 8008664:	2b00      	cmp	r3, #0
 8008666:	d022      	beq.n	80086ae <_dtoa_r+0xa4e>
 8008668:	0038      	movs	r0, r7
 800866a:	6869      	ldr	r1, [r5, #4]
 800866c:	f000 fb72 	bl	8008d54 <_Balloc>
 8008670:	1e04      	subs	r4, r0, #0
 8008672:	d10f      	bne.n	8008694 <_dtoa_r+0xa34>
 8008674:	0002      	movs	r2, r0
 8008676:	4b05      	ldr	r3, [pc, #20]	; (800868c <_dtoa_r+0xa2c>)
 8008678:	4905      	ldr	r1, [pc, #20]	; (8008690 <_dtoa_r+0xa30>)
 800867a:	f7ff fb06 	bl	8007c8a <_dtoa_r+0x2a>
 800867e:	46c0      	nop			; (mov r8, r8)
 8008680:	40240000 	.word	0x40240000
 8008684:	00000433 	.word	0x00000433
 8008688:	7ff00000 	.word	0x7ff00000
 800868c:	0800a25f 	.word	0x0800a25f
 8008690:	000002ea 	.word	0x000002ea
 8008694:	0029      	movs	r1, r5
 8008696:	692b      	ldr	r3, [r5, #16]
 8008698:	310c      	adds	r1, #12
 800869a:	1c9a      	adds	r2, r3, #2
 800869c:	0092      	lsls	r2, r2, #2
 800869e:	300c      	adds	r0, #12
 80086a0:	f000 fb4f 	bl	8008d42 <memcpy>
 80086a4:	2201      	movs	r2, #1
 80086a6:	0021      	movs	r1, r4
 80086a8:	0038      	movs	r0, r7
 80086aa:	f000 fd69 	bl	8009180 <__lshift>
 80086ae:	9b06      	ldr	r3, [sp, #24]
 80086b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086b2:	930a      	str	r3, [sp, #40]	; 0x28
 80086b4:	3b01      	subs	r3, #1
 80086b6:	189b      	adds	r3, r3, r2
 80086b8:	2201      	movs	r2, #1
 80086ba:	002c      	movs	r4, r5
 80086bc:	0005      	movs	r5, r0
 80086be:	9314      	str	r3, [sp, #80]	; 0x50
 80086c0:	9b08      	ldr	r3, [sp, #32]
 80086c2:	4013      	ands	r3, r2
 80086c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80086c6:	0031      	movs	r1, r6
 80086c8:	9805      	ldr	r0, [sp, #20]
 80086ca:	f7ff fa3d 	bl	8007b48 <quorem>
 80086ce:	0003      	movs	r3, r0
 80086d0:	0021      	movs	r1, r4
 80086d2:	3330      	adds	r3, #48	; 0x30
 80086d4:	900d      	str	r0, [sp, #52]	; 0x34
 80086d6:	9805      	ldr	r0, [sp, #20]
 80086d8:	9307      	str	r3, [sp, #28]
 80086da:	f000 fdbf 	bl	800925c <__mcmp>
 80086de:	002a      	movs	r2, r5
 80086e0:	900e      	str	r0, [sp, #56]	; 0x38
 80086e2:	0031      	movs	r1, r6
 80086e4:	0038      	movs	r0, r7
 80086e6:	f000 fdd5 	bl	8009294 <__mdiff>
 80086ea:	68c3      	ldr	r3, [r0, #12]
 80086ec:	9008      	str	r0, [sp, #32]
 80086ee:	9310      	str	r3, [sp, #64]	; 0x40
 80086f0:	2301      	movs	r3, #1
 80086f2:	930c      	str	r3, [sp, #48]	; 0x30
 80086f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d104      	bne.n	8008704 <_dtoa_r+0xaa4>
 80086fa:	0001      	movs	r1, r0
 80086fc:	9805      	ldr	r0, [sp, #20]
 80086fe:	f000 fdad 	bl	800925c <__mcmp>
 8008702:	900c      	str	r0, [sp, #48]	; 0x30
 8008704:	0038      	movs	r0, r7
 8008706:	9908      	ldr	r1, [sp, #32]
 8008708:	f000 fb68 	bl	8008ddc <_Bfree>
 800870c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800870e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008710:	3301      	adds	r3, #1
 8008712:	9308      	str	r3, [sp, #32]
 8008714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008716:	4313      	orrs	r3, r2
 8008718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800871a:	4313      	orrs	r3, r2
 800871c:	d10c      	bne.n	8008738 <_dtoa_r+0xad8>
 800871e:	9b07      	ldr	r3, [sp, #28]
 8008720:	2b39      	cmp	r3, #57	; 0x39
 8008722:	d026      	beq.n	8008772 <_dtoa_r+0xb12>
 8008724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008726:	2b00      	cmp	r3, #0
 8008728:	dd02      	ble.n	8008730 <_dtoa_r+0xad0>
 800872a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800872c:	3331      	adds	r3, #49	; 0x31
 800872e:	9307      	str	r3, [sp, #28]
 8008730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008732:	9a07      	ldr	r2, [sp, #28]
 8008734:	701a      	strb	r2, [r3, #0]
 8008736:	e76a      	b.n	800860e <_dtoa_r+0x9ae>
 8008738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800873a:	2b00      	cmp	r3, #0
 800873c:	db04      	blt.n	8008748 <_dtoa_r+0xae8>
 800873e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008740:	4313      	orrs	r3, r2
 8008742:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008744:	4313      	orrs	r3, r2
 8008746:	d11f      	bne.n	8008788 <_dtoa_r+0xb28>
 8008748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800874a:	2b00      	cmp	r3, #0
 800874c:	ddf0      	ble.n	8008730 <_dtoa_r+0xad0>
 800874e:	9905      	ldr	r1, [sp, #20]
 8008750:	2201      	movs	r2, #1
 8008752:	0038      	movs	r0, r7
 8008754:	f000 fd14 	bl	8009180 <__lshift>
 8008758:	0031      	movs	r1, r6
 800875a:	9005      	str	r0, [sp, #20]
 800875c:	f000 fd7e 	bl	800925c <__mcmp>
 8008760:	2800      	cmp	r0, #0
 8008762:	dc03      	bgt.n	800876c <_dtoa_r+0xb0c>
 8008764:	d1e4      	bne.n	8008730 <_dtoa_r+0xad0>
 8008766:	9b07      	ldr	r3, [sp, #28]
 8008768:	07db      	lsls	r3, r3, #31
 800876a:	d5e1      	bpl.n	8008730 <_dtoa_r+0xad0>
 800876c:	9b07      	ldr	r3, [sp, #28]
 800876e:	2b39      	cmp	r3, #57	; 0x39
 8008770:	d1db      	bne.n	800872a <_dtoa_r+0xaca>
 8008772:	2339      	movs	r3, #57	; 0x39
 8008774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008776:	7013      	strb	r3, [r2, #0]
 8008778:	9b08      	ldr	r3, [sp, #32]
 800877a:	9308      	str	r3, [sp, #32]
 800877c:	3b01      	subs	r3, #1
 800877e:	781a      	ldrb	r2, [r3, #0]
 8008780:	2a39      	cmp	r2, #57	; 0x39
 8008782:	d068      	beq.n	8008856 <_dtoa_r+0xbf6>
 8008784:	3201      	adds	r2, #1
 8008786:	e7d5      	b.n	8008734 <_dtoa_r+0xad4>
 8008788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800878a:	2b00      	cmp	r3, #0
 800878c:	dd07      	ble.n	800879e <_dtoa_r+0xb3e>
 800878e:	9b07      	ldr	r3, [sp, #28]
 8008790:	2b39      	cmp	r3, #57	; 0x39
 8008792:	d0ee      	beq.n	8008772 <_dtoa_r+0xb12>
 8008794:	9b07      	ldr	r3, [sp, #28]
 8008796:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008798:	3301      	adds	r3, #1
 800879a:	7013      	strb	r3, [r2, #0]
 800879c:	e737      	b.n	800860e <_dtoa_r+0x9ae>
 800879e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a0:	9a07      	ldr	r2, [sp, #28]
 80087a2:	701a      	strb	r2, [r3, #0]
 80087a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d03e      	beq.n	800882a <_dtoa_r+0xbca>
 80087ac:	2300      	movs	r3, #0
 80087ae:	220a      	movs	r2, #10
 80087b0:	9905      	ldr	r1, [sp, #20]
 80087b2:	0038      	movs	r0, r7
 80087b4:	f000 fb36 	bl	8008e24 <__multadd>
 80087b8:	2300      	movs	r3, #0
 80087ba:	9005      	str	r0, [sp, #20]
 80087bc:	220a      	movs	r2, #10
 80087be:	0021      	movs	r1, r4
 80087c0:	0038      	movs	r0, r7
 80087c2:	42ac      	cmp	r4, r5
 80087c4:	d106      	bne.n	80087d4 <_dtoa_r+0xb74>
 80087c6:	f000 fb2d 	bl	8008e24 <__multadd>
 80087ca:	0004      	movs	r4, r0
 80087cc:	0005      	movs	r5, r0
 80087ce:	9b08      	ldr	r3, [sp, #32]
 80087d0:	930a      	str	r3, [sp, #40]	; 0x28
 80087d2:	e778      	b.n	80086c6 <_dtoa_r+0xa66>
 80087d4:	f000 fb26 	bl	8008e24 <__multadd>
 80087d8:	0029      	movs	r1, r5
 80087da:	0004      	movs	r4, r0
 80087dc:	2300      	movs	r3, #0
 80087de:	220a      	movs	r2, #10
 80087e0:	0038      	movs	r0, r7
 80087e2:	f000 fb1f 	bl	8008e24 <__multadd>
 80087e6:	0005      	movs	r5, r0
 80087e8:	e7f1      	b.n	80087ce <_dtoa_r+0xb6e>
 80087ea:	9b07      	ldr	r3, [sp, #28]
 80087ec:	930c      	str	r3, [sp, #48]	; 0x30
 80087ee:	2400      	movs	r4, #0
 80087f0:	0031      	movs	r1, r6
 80087f2:	9805      	ldr	r0, [sp, #20]
 80087f4:	f7ff f9a8 	bl	8007b48 <quorem>
 80087f8:	9b06      	ldr	r3, [sp, #24]
 80087fa:	3030      	adds	r0, #48	; 0x30
 80087fc:	5518      	strb	r0, [r3, r4]
 80087fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008800:	3401      	adds	r4, #1
 8008802:	9007      	str	r0, [sp, #28]
 8008804:	42a3      	cmp	r3, r4
 8008806:	dd07      	ble.n	8008818 <_dtoa_r+0xbb8>
 8008808:	2300      	movs	r3, #0
 800880a:	220a      	movs	r2, #10
 800880c:	0038      	movs	r0, r7
 800880e:	9905      	ldr	r1, [sp, #20]
 8008810:	f000 fb08 	bl	8008e24 <__multadd>
 8008814:	9005      	str	r0, [sp, #20]
 8008816:	e7eb      	b.n	80087f0 <_dtoa_r+0xb90>
 8008818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800881a:	2001      	movs	r0, #1
 800881c:	2b00      	cmp	r3, #0
 800881e:	dd00      	ble.n	8008822 <_dtoa_r+0xbc2>
 8008820:	0018      	movs	r0, r3
 8008822:	2400      	movs	r4, #0
 8008824:	9b06      	ldr	r3, [sp, #24]
 8008826:	181b      	adds	r3, r3, r0
 8008828:	9308      	str	r3, [sp, #32]
 800882a:	9905      	ldr	r1, [sp, #20]
 800882c:	2201      	movs	r2, #1
 800882e:	0038      	movs	r0, r7
 8008830:	f000 fca6 	bl	8009180 <__lshift>
 8008834:	0031      	movs	r1, r6
 8008836:	9005      	str	r0, [sp, #20]
 8008838:	f000 fd10 	bl	800925c <__mcmp>
 800883c:	2800      	cmp	r0, #0
 800883e:	dc9b      	bgt.n	8008778 <_dtoa_r+0xb18>
 8008840:	d102      	bne.n	8008848 <_dtoa_r+0xbe8>
 8008842:	9b07      	ldr	r3, [sp, #28]
 8008844:	07db      	lsls	r3, r3, #31
 8008846:	d497      	bmi.n	8008778 <_dtoa_r+0xb18>
 8008848:	9b08      	ldr	r3, [sp, #32]
 800884a:	9308      	str	r3, [sp, #32]
 800884c:	3b01      	subs	r3, #1
 800884e:	781a      	ldrb	r2, [r3, #0]
 8008850:	2a30      	cmp	r2, #48	; 0x30
 8008852:	d0fa      	beq.n	800884a <_dtoa_r+0xbea>
 8008854:	e6db      	b.n	800860e <_dtoa_r+0x9ae>
 8008856:	9a06      	ldr	r2, [sp, #24]
 8008858:	429a      	cmp	r2, r3
 800885a:	d18e      	bne.n	800877a <_dtoa_r+0xb1a>
 800885c:	9b02      	ldr	r3, [sp, #8]
 800885e:	3301      	adds	r3, #1
 8008860:	9302      	str	r3, [sp, #8]
 8008862:	2331      	movs	r3, #49	; 0x31
 8008864:	e799      	b.n	800879a <_dtoa_r+0xb3a>
 8008866:	4b09      	ldr	r3, [pc, #36]	; (800888c <_dtoa_r+0xc2c>)
 8008868:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800886a:	9306      	str	r3, [sp, #24]
 800886c:	4b08      	ldr	r3, [pc, #32]	; (8008890 <_dtoa_r+0xc30>)
 800886e:	2a00      	cmp	r2, #0
 8008870:	d001      	beq.n	8008876 <_dtoa_r+0xc16>
 8008872:	f7ff fa3f 	bl	8007cf4 <_dtoa_r+0x94>
 8008876:	f7ff fa3f 	bl	8007cf8 <_dtoa_r+0x98>
 800887a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800887c:	2b00      	cmp	r3, #0
 800887e:	dcb6      	bgt.n	80087ee <_dtoa_r+0xb8e>
 8008880:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008882:	2b02      	cmp	r3, #2
 8008884:	dd00      	ble.n	8008888 <_dtoa_r+0xc28>
 8008886:	e6ac      	b.n	80085e2 <_dtoa_r+0x982>
 8008888:	e7b1      	b.n	80087ee <_dtoa_r+0xb8e>
 800888a:	46c0      	nop			; (mov r8, r8)
 800888c:	0800a1e0 	.word	0x0800a1e0
 8008890:	0800a1e8 	.word	0x0800a1e8

08008894 <__sflush_r>:
 8008894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008896:	898b      	ldrh	r3, [r1, #12]
 8008898:	0005      	movs	r5, r0
 800889a:	000c      	movs	r4, r1
 800889c:	071a      	lsls	r2, r3, #28
 800889e:	d45f      	bmi.n	8008960 <__sflush_r+0xcc>
 80088a0:	684a      	ldr	r2, [r1, #4]
 80088a2:	2a00      	cmp	r2, #0
 80088a4:	dc04      	bgt.n	80088b0 <__sflush_r+0x1c>
 80088a6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80088a8:	2a00      	cmp	r2, #0
 80088aa:	dc01      	bgt.n	80088b0 <__sflush_r+0x1c>
 80088ac:	2000      	movs	r0, #0
 80088ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088b0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80088b2:	2f00      	cmp	r7, #0
 80088b4:	d0fa      	beq.n	80088ac <__sflush_r+0x18>
 80088b6:	2200      	movs	r2, #0
 80088b8:	2180      	movs	r1, #128	; 0x80
 80088ba:	682e      	ldr	r6, [r5, #0]
 80088bc:	602a      	str	r2, [r5, #0]
 80088be:	001a      	movs	r2, r3
 80088c0:	0149      	lsls	r1, r1, #5
 80088c2:	400a      	ands	r2, r1
 80088c4:	420b      	tst	r3, r1
 80088c6:	d034      	beq.n	8008932 <__sflush_r+0x9e>
 80088c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088ca:	89a3      	ldrh	r3, [r4, #12]
 80088cc:	075b      	lsls	r3, r3, #29
 80088ce:	d506      	bpl.n	80088de <__sflush_r+0x4a>
 80088d0:	6863      	ldr	r3, [r4, #4]
 80088d2:	1ac0      	subs	r0, r0, r3
 80088d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <__sflush_r+0x4a>
 80088da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088dc:	1ac0      	subs	r0, r0, r3
 80088de:	0002      	movs	r2, r0
 80088e0:	6a21      	ldr	r1, [r4, #32]
 80088e2:	2300      	movs	r3, #0
 80088e4:	0028      	movs	r0, r5
 80088e6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80088e8:	47b8      	blx	r7
 80088ea:	89a1      	ldrh	r1, [r4, #12]
 80088ec:	1c43      	adds	r3, r0, #1
 80088ee:	d106      	bne.n	80088fe <__sflush_r+0x6a>
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	2b1d      	cmp	r3, #29
 80088f4:	d831      	bhi.n	800895a <__sflush_r+0xc6>
 80088f6:	4a2c      	ldr	r2, [pc, #176]	; (80089a8 <__sflush_r+0x114>)
 80088f8:	40da      	lsrs	r2, r3
 80088fa:	07d3      	lsls	r3, r2, #31
 80088fc:	d52d      	bpl.n	800895a <__sflush_r+0xc6>
 80088fe:	2300      	movs	r3, #0
 8008900:	6063      	str	r3, [r4, #4]
 8008902:	6923      	ldr	r3, [r4, #16]
 8008904:	6023      	str	r3, [r4, #0]
 8008906:	04cb      	lsls	r3, r1, #19
 8008908:	d505      	bpl.n	8008916 <__sflush_r+0x82>
 800890a:	1c43      	adds	r3, r0, #1
 800890c:	d102      	bne.n	8008914 <__sflush_r+0x80>
 800890e:	682b      	ldr	r3, [r5, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d100      	bne.n	8008916 <__sflush_r+0x82>
 8008914:	6560      	str	r0, [r4, #84]	; 0x54
 8008916:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008918:	602e      	str	r6, [r5, #0]
 800891a:	2900      	cmp	r1, #0
 800891c:	d0c6      	beq.n	80088ac <__sflush_r+0x18>
 800891e:	0023      	movs	r3, r4
 8008920:	3344      	adds	r3, #68	; 0x44
 8008922:	4299      	cmp	r1, r3
 8008924:	d002      	beq.n	800892c <__sflush_r+0x98>
 8008926:	0028      	movs	r0, r5
 8008928:	f000 fddc 	bl	80094e4 <_free_r>
 800892c:	2000      	movs	r0, #0
 800892e:	6360      	str	r0, [r4, #52]	; 0x34
 8008930:	e7bd      	b.n	80088ae <__sflush_r+0x1a>
 8008932:	2301      	movs	r3, #1
 8008934:	0028      	movs	r0, r5
 8008936:	6a21      	ldr	r1, [r4, #32]
 8008938:	47b8      	blx	r7
 800893a:	1c43      	adds	r3, r0, #1
 800893c:	d1c5      	bne.n	80088ca <__sflush_r+0x36>
 800893e:	682b      	ldr	r3, [r5, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d0c2      	beq.n	80088ca <__sflush_r+0x36>
 8008944:	2b1d      	cmp	r3, #29
 8008946:	d001      	beq.n	800894c <__sflush_r+0xb8>
 8008948:	2b16      	cmp	r3, #22
 800894a:	d101      	bne.n	8008950 <__sflush_r+0xbc>
 800894c:	602e      	str	r6, [r5, #0]
 800894e:	e7ad      	b.n	80088ac <__sflush_r+0x18>
 8008950:	2340      	movs	r3, #64	; 0x40
 8008952:	89a2      	ldrh	r2, [r4, #12]
 8008954:	4313      	orrs	r3, r2
 8008956:	81a3      	strh	r3, [r4, #12]
 8008958:	e7a9      	b.n	80088ae <__sflush_r+0x1a>
 800895a:	2340      	movs	r3, #64	; 0x40
 800895c:	430b      	orrs	r3, r1
 800895e:	e7fa      	b.n	8008956 <__sflush_r+0xc2>
 8008960:	690f      	ldr	r7, [r1, #16]
 8008962:	2f00      	cmp	r7, #0
 8008964:	d0a2      	beq.n	80088ac <__sflush_r+0x18>
 8008966:	680a      	ldr	r2, [r1, #0]
 8008968:	600f      	str	r7, [r1, #0]
 800896a:	1bd2      	subs	r2, r2, r7
 800896c:	9201      	str	r2, [sp, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	079b      	lsls	r3, r3, #30
 8008972:	d100      	bne.n	8008976 <__sflush_r+0xe2>
 8008974:	694a      	ldr	r2, [r1, #20]
 8008976:	60a2      	str	r2, [r4, #8]
 8008978:	9b01      	ldr	r3, [sp, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	dc00      	bgt.n	8008980 <__sflush_r+0xec>
 800897e:	e795      	b.n	80088ac <__sflush_r+0x18>
 8008980:	003a      	movs	r2, r7
 8008982:	0028      	movs	r0, r5
 8008984:	9b01      	ldr	r3, [sp, #4]
 8008986:	6a21      	ldr	r1, [r4, #32]
 8008988:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800898a:	47b0      	blx	r6
 800898c:	2800      	cmp	r0, #0
 800898e:	dc06      	bgt.n	800899e <__sflush_r+0x10a>
 8008990:	2340      	movs	r3, #64	; 0x40
 8008992:	2001      	movs	r0, #1
 8008994:	89a2      	ldrh	r2, [r4, #12]
 8008996:	4240      	negs	r0, r0
 8008998:	4313      	orrs	r3, r2
 800899a:	81a3      	strh	r3, [r4, #12]
 800899c:	e787      	b.n	80088ae <__sflush_r+0x1a>
 800899e:	9b01      	ldr	r3, [sp, #4]
 80089a0:	183f      	adds	r7, r7, r0
 80089a2:	1a1b      	subs	r3, r3, r0
 80089a4:	9301      	str	r3, [sp, #4]
 80089a6:	e7e7      	b.n	8008978 <__sflush_r+0xe4>
 80089a8:	20400001 	.word	0x20400001

080089ac <_fflush_r>:
 80089ac:	690b      	ldr	r3, [r1, #16]
 80089ae:	b570      	push	{r4, r5, r6, lr}
 80089b0:	0005      	movs	r5, r0
 80089b2:	000c      	movs	r4, r1
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d102      	bne.n	80089be <_fflush_r+0x12>
 80089b8:	2500      	movs	r5, #0
 80089ba:	0028      	movs	r0, r5
 80089bc:	bd70      	pop	{r4, r5, r6, pc}
 80089be:	2800      	cmp	r0, #0
 80089c0:	d004      	beq.n	80089cc <_fflush_r+0x20>
 80089c2:	6983      	ldr	r3, [r0, #24]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <_fflush_r+0x20>
 80089c8:	f000 f892 	bl	8008af0 <__sinit>
 80089cc:	4b14      	ldr	r3, [pc, #80]	; (8008a20 <_fflush_r+0x74>)
 80089ce:	429c      	cmp	r4, r3
 80089d0:	d11b      	bne.n	8008a0a <_fflush_r+0x5e>
 80089d2:	686c      	ldr	r4, [r5, #4]
 80089d4:	220c      	movs	r2, #12
 80089d6:	5ea3      	ldrsh	r3, [r4, r2]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d0ed      	beq.n	80089b8 <_fflush_r+0xc>
 80089dc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089de:	07d2      	lsls	r2, r2, #31
 80089e0:	d404      	bmi.n	80089ec <_fflush_r+0x40>
 80089e2:	059b      	lsls	r3, r3, #22
 80089e4:	d402      	bmi.n	80089ec <_fflush_r+0x40>
 80089e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089e8:	f000 f927 	bl	8008c3a <__retarget_lock_acquire_recursive>
 80089ec:	0028      	movs	r0, r5
 80089ee:	0021      	movs	r1, r4
 80089f0:	f7ff ff50 	bl	8008894 <__sflush_r>
 80089f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089f6:	0005      	movs	r5, r0
 80089f8:	07db      	lsls	r3, r3, #31
 80089fa:	d4de      	bmi.n	80089ba <_fflush_r+0xe>
 80089fc:	89a3      	ldrh	r3, [r4, #12]
 80089fe:	059b      	lsls	r3, r3, #22
 8008a00:	d4db      	bmi.n	80089ba <_fflush_r+0xe>
 8008a02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a04:	f000 f91a 	bl	8008c3c <__retarget_lock_release_recursive>
 8008a08:	e7d7      	b.n	80089ba <_fflush_r+0xe>
 8008a0a:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <_fflush_r+0x78>)
 8008a0c:	429c      	cmp	r4, r3
 8008a0e:	d101      	bne.n	8008a14 <_fflush_r+0x68>
 8008a10:	68ac      	ldr	r4, [r5, #8]
 8008a12:	e7df      	b.n	80089d4 <_fflush_r+0x28>
 8008a14:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <_fflush_r+0x7c>)
 8008a16:	429c      	cmp	r4, r3
 8008a18:	d1dc      	bne.n	80089d4 <_fflush_r+0x28>
 8008a1a:	68ec      	ldr	r4, [r5, #12]
 8008a1c:	e7da      	b.n	80089d4 <_fflush_r+0x28>
 8008a1e:	46c0      	nop			; (mov r8, r8)
 8008a20:	0800a290 	.word	0x0800a290
 8008a24:	0800a2b0 	.word	0x0800a2b0
 8008a28:	0800a270 	.word	0x0800a270

08008a2c <std>:
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	b510      	push	{r4, lr}
 8008a30:	0004      	movs	r4, r0
 8008a32:	6003      	str	r3, [r0, #0]
 8008a34:	6043      	str	r3, [r0, #4]
 8008a36:	6083      	str	r3, [r0, #8]
 8008a38:	8181      	strh	r1, [r0, #12]
 8008a3a:	6643      	str	r3, [r0, #100]	; 0x64
 8008a3c:	0019      	movs	r1, r3
 8008a3e:	81c2      	strh	r2, [r0, #14]
 8008a40:	6103      	str	r3, [r0, #16]
 8008a42:	6143      	str	r3, [r0, #20]
 8008a44:	6183      	str	r3, [r0, #24]
 8008a46:	2208      	movs	r2, #8
 8008a48:	305c      	adds	r0, #92	; 0x5c
 8008a4a:	f7fe f9a3 	bl	8006d94 <memset>
 8008a4e:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <std+0x38>)
 8008a50:	6224      	str	r4, [r4, #32]
 8008a52:	6263      	str	r3, [r4, #36]	; 0x24
 8008a54:	4b04      	ldr	r3, [pc, #16]	; (8008a68 <std+0x3c>)
 8008a56:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a58:	4b04      	ldr	r3, [pc, #16]	; (8008a6c <std+0x40>)
 8008a5a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a5c:	4b04      	ldr	r3, [pc, #16]	; (8008a70 <std+0x44>)
 8008a5e:	6323      	str	r3, [r4, #48]	; 0x30
 8008a60:	bd10      	pop	{r4, pc}
 8008a62:	46c0      	nop			; (mov r8, r8)
 8008a64:	08009c55 	.word	0x08009c55
 8008a68:	08009c7d 	.word	0x08009c7d
 8008a6c:	08009cb5 	.word	0x08009cb5
 8008a70:	08009ce1 	.word	0x08009ce1

08008a74 <_cleanup_r>:
 8008a74:	b510      	push	{r4, lr}
 8008a76:	4902      	ldr	r1, [pc, #8]	; (8008a80 <_cleanup_r+0xc>)
 8008a78:	f000 f8ba 	bl	8008bf0 <_fwalk_reent>
 8008a7c:	bd10      	pop	{r4, pc}
 8008a7e:	46c0      	nop			; (mov r8, r8)
 8008a80:	080089ad 	.word	0x080089ad

08008a84 <__sfmoreglue>:
 8008a84:	b570      	push	{r4, r5, r6, lr}
 8008a86:	2568      	movs	r5, #104	; 0x68
 8008a88:	1e4a      	subs	r2, r1, #1
 8008a8a:	4355      	muls	r5, r2
 8008a8c:	000e      	movs	r6, r1
 8008a8e:	0029      	movs	r1, r5
 8008a90:	3174      	adds	r1, #116	; 0x74
 8008a92:	f000 fd93 	bl	80095bc <_malloc_r>
 8008a96:	1e04      	subs	r4, r0, #0
 8008a98:	d008      	beq.n	8008aac <__sfmoreglue+0x28>
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	002a      	movs	r2, r5
 8008a9e:	6001      	str	r1, [r0, #0]
 8008aa0:	6046      	str	r6, [r0, #4]
 8008aa2:	300c      	adds	r0, #12
 8008aa4:	60a0      	str	r0, [r4, #8]
 8008aa6:	3268      	adds	r2, #104	; 0x68
 8008aa8:	f7fe f974 	bl	8006d94 <memset>
 8008aac:	0020      	movs	r0, r4
 8008aae:	bd70      	pop	{r4, r5, r6, pc}

08008ab0 <__sfp_lock_acquire>:
 8008ab0:	b510      	push	{r4, lr}
 8008ab2:	4802      	ldr	r0, [pc, #8]	; (8008abc <__sfp_lock_acquire+0xc>)
 8008ab4:	f000 f8c1 	bl	8008c3a <__retarget_lock_acquire_recursive>
 8008ab8:	bd10      	pop	{r4, pc}
 8008aba:	46c0      	nop			; (mov r8, r8)
 8008abc:	200003e9 	.word	0x200003e9

08008ac0 <__sfp_lock_release>:
 8008ac0:	b510      	push	{r4, lr}
 8008ac2:	4802      	ldr	r0, [pc, #8]	; (8008acc <__sfp_lock_release+0xc>)
 8008ac4:	f000 f8ba 	bl	8008c3c <__retarget_lock_release_recursive>
 8008ac8:	bd10      	pop	{r4, pc}
 8008aca:	46c0      	nop			; (mov r8, r8)
 8008acc:	200003e9 	.word	0x200003e9

08008ad0 <__sinit_lock_acquire>:
 8008ad0:	b510      	push	{r4, lr}
 8008ad2:	4802      	ldr	r0, [pc, #8]	; (8008adc <__sinit_lock_acquire+0xc>)
 8008ad4:	f000 f8b1 	bl	8008c3a <__retarget_lock_acquire_recursive>
 8008ad8:	bd10      	pop	{r4, pc}
 8008ada:	46c0      	nop			; (mov r8, r8)
 8008adc:	200003ea 	.word	0x200003ea

08008ae0 <__sinit_lock_release>:
 8008ae0:	b510      	push	{r4, lr}
 8008ae2:	4802      	ldr	r0, [pc, #8]	; (8008aec <__sinit_lock_release+0xc>)
 8008ae4:	f000 f8aa 	bl	8008c3c <__retarget_lock_release_recursive>
 8008ae8:	bd10      	pop	{r4, pc}
 8008aea:	46c0      	nop			; (mov r8, r8)
 8008aec:	200003ea 	.word	0x200003ea

08008af0 <__sinit>:
 8008af0:	b513      	push	{r0, r1, r4, lr}
 8008af2:	0004      	movs	r4, r0
 8008af4:	f7ff ffec 	bl	8008ad0 <__sinit_lock_acquire>
 8008af8:	69a3      	ldr	r3, [r4, #24]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d002      	beq.n	8008b04 <__sinit+0x14>
 8008afe:	f7ff ffef 	bl	8008ae0 <__sinit_lock_release>
 8008b02:	bd13      	pop	{r0, r1, r4, pc}
 8008b04:	64a3      	str	r3, [r4, #72]	; 0x48
 8008b06:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008b08:	6523      	str	r3, [r4, #80]	; 0x50
 8008b0a:	4b13      	ldr	r3, [pc, #76]	; (8008b58 <__sinit+0x68>)
 8008b0c:	4a13      	ldr	r2, [pc, #76]	; (8008b5c <__sinit+0x6c>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b12:	9301      	str	r3, [sp, #4]
 8008b14:	42a3      	cmp	r3, r4
 8008b16:	d101      	bne.n	8008b1c <__sinit+0x2c>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	61a3      	str	r3, [r4, #24]
 8008b1c:	0020      	movs	r0, r4
 8008b1e:	f000 f81f 	bl	8008b60 <__sfp>
 8008b22:	6060      	str	r0, [r4, #4]
 8008b24:	0020      	movs	r0, r4
 8008b26:	f000 f81b 	bl	8008b60 <__sfp>
 8008b2a:	60a0      	str	r0, [r4, #8]
 8008b2c:	0020      	movs	r0, r4
 8008b2e:	f000 f817 	bl	8008b60 <__sfp>
 8008b32:	2200      	movs	r2, #0
 8008b34:	2104      	movs	r1, #4
 8008b36:	60e0      	str	r0, [r4, #12]
 8008b38:	6860      	ldr	r0, [r4, #4]
 8008b3a:	f7ff ff77 	bl	8008a2c <std>
 8008b3e:	2201      	movs	r2, #1
 8008b40:	2109      	movs	r1, #9
 8008b42:	68a0      	ldr	r0, [r4, #8]
 8008b44:	f7ff ff72 	bl	8008a2c <std>
 8008b48:	2202      	movs	r2, #2
 8008b4a:	2112      	movs	r1, #18
 8008b4c:	68e0      	ldr	r0, [r4, #12]
 8008b4e:	f7ff ff6d 	bl	8008a2c <std>
 8008b52:	2301      	movs	r3, #1
 8008b54:	61a3      	str	r3, [r4, #24]
 8008b56:	e7d2      	b.n	8008afe <__sinit+0xe>
 8008b58:	0800a1a8 	.word	0x0800a1a8
 8008b5c:	08008a75 	.word	0x08008a75

08008b60 <__sfp>:
 8008b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b62:	0007      	movs	r7, r0
 8008b64:	f7ff ffa4 	bl	8008ab0 <__sfp_lock_acquire>
 8008b68:	4b1f      	ldr	r3, [pc, #124]	; (8008be8 <__sfp+0x88>)
 8008b6a:	681e      	ldr	r6, [r3, #0]
 8008b6c:	69b3      	ldr	r3, [r6, #24]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d102      	bne.n	8008b78 <__sfp+0x18>
 8008b72:	0030      	movs	r0, r6
 8008b74:	f7ff ffbc 	bl	8008af0 <__sinit>
 8008b78:	3648      	adds	r6, #72	; 0x48
 8008b7a:	68b4      	ldr	r4, [r6, #8]
 8008b7c:	6873      	ldr	r3, [r6, #4]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	d504      	bpl.n	8008b8c <__sfp+0x2c>
 8008b82:	6833      	ldr	r3, [r6, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d022      	beq.n	8008bce <__sfp+0x6e>
 8008b88:	6836      	ldr	r6, [r6, #0]
 8008b8a:	e7f6      	b.n	8008b7a <__sfp+0x1a>
 8008b8c:	220c      	movs	r2, #12
 8008b8e:	5ea5      	ldrsh	r5, [r4, r2]
 8008b90:	2d00      	cmp	r5, #0
 8008b92:	d11a      	bne.n	8008bca <__sfp+0x6a>
 8008b94:	0020      	movs	r0, r4
 8008b96:	4b15      	ldr	r3, [pc, #84]	; (8008bec <__sfp+0x8c>)
 8008b98:	3058      	adds	r0, #88	; 0x58
 8008b9a:	60e3      	str	r3, [r4, #12]
 8008b9c:	6665      	str	r5, [r4, #100]	; 0x64
 8008b9e:	f000 f84b 	bl	8008c38 <__retarget_lock_init_recursive>
 8008ba2:	f7ff ff8d 	bl	8008ac0 <__sfp_lock_release>
 8008ba6:	0020      	movs	r0, r4
 8008ba8:	2208      	movs	r2, #8
 8008baa:	0029      	movs	r1, r5
 8008bac:	6025      	str	r5, [r4, #0]
 8008bae:	60a5      	str	r5, [r4, #8]
 8008bb0:	6065      	str	r5, [r4, #4]
 8008bb2:	6125      	str	r5, [r4, #16]
 8008bb4:	6165      	str	r5, [r4, #20]
 8008bb6:	61a5      	str	r5, [r4, #24]
 8008bb8:	305c      	adds	r0, #92	; 0x5c
 8008bba:	f7fe f8eb 	bl	8006d94 <memset>
 8008bbe:	6365      	str	r5, [r4, #52]	; 0x34
 8008bc0:	63a5      	str	r5, [r4, #56]	; 0x38
 8008bc2:	64a5      	str	r5, [r4, #72]	; 0x48
 8008bc4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008bc6:	0020      	movs	r0, r4
 8008bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bca:	3468      	adds	r4, #104	; 0x68
 8008bcc:	e7d7      	b.n	8008b7e <__sfp+0x1e>
 8008bce:	2104      	movs	r1, #4
 8008bd0:	0038      	movs	r0, r7
 8008bd2:	f7ff ff57 	bl	8008a84 <__sfmoreglue>
 8008bd6:	1e04      	subs	r4, r0, #0
 8008bd8:	6030      	str	r0, [r6, #0]
 8008bda:	d1d5      	bne.n	8008b88 <__sfp+0x28>
 8008bdc:	f7ff ff70 	bl	8008ac0 <__sfp_lock_release>
 8008be0:	230c      	movs	r3, #12
 8008be2:	603b      	str	r3, [r7, #0]
 8008be4:	e7ef      	b.n	8008bc6 <__sfp+0x66>
 8008be6:	46c0      	nop			; (mov r8, r8)
 8008be8:	0800a1a8 	.word	0x0800a1a8
 8008bec:	ffff0001 	.word	0xffff0001

08008bf0 <_fwalk_reent>:
 8008bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bf2:	0004      	movs	r4, r0
 8008bf4:	0006      	movs	r6, r0
 8008bf6:	2700      	movs	r7, #0
 8008bf8:	9101      	str	r1, [sp, #4]
 8008bfa:	3448      	adds	r4, #72	; 0x48
 8008bfc:	6863      	ldr	r3, [r4, #4]
 8008bfe:	68a5      	ldr	r5, [r4, #8]
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	9b00      	ldr	r3, [sp, #0]
 8008c04:	3b01      	subs	r3, #1
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	d504      	bpl.n	8008c14 <_fwalk_reent+0x24>
 8008c0a:	6824      	ldr	r4, [r4, #0]
 8008c0c:	2c00      	cmp	r4, #0
 8008c0e:	d1f5      	bne.n	8008bfc <_fwalk_reent+0xc>
 8008c10:	0038      	movs	r0, r7
 8008c12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c14:	89ab      	ldrh	r3, [r5, #12]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d908      	bls.n	8008c2c <_fwalk_reent+0x3c>
 8008c1a:	220e      	movs	r2, #14
 8008c1c:	5eab      	ldrsh	r3, [r5, r2]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	d004      	beq.n	8008c2c <_fwalk_reent+0x3c>
 8008c22:	0029      	movs	r1, r5
 8008c24:	0030      	movs	r0, r6
 8008c26:	9b01      	ldr	r3, [sp, #4]
 8008c28:	4798      	blx	r3
 8008c2a:	4307      	orrs	r7, r0
 8008c2c:	3568      	adds	r5, #104	; 0x68
 8008c2e:	e7e8      	b.n	8008c02 <_fwalk_reent+0x12>

08008c30 <_localeconv_r>:
 8008c30:	4800      	ldr	r0, [pc, #0]	; (8008c34 <_localeconv_r+0x4>)
 8008c32:	4770      	bx	lr
 8008c34:	200001b8 	.word	0x200001b8

08008c38 <__retarget_lock_init_recursive>:
 8008c38:	4770      	bx	lr

08008c3a <__retarget_lock_acquire_recursive>:
 8008c3a:	4770      	bx	lr

08008c3c <__retarget_lock_release_recursive>:
 8008c3c:	4770      	bx	lr
	...

08008c40 <__swhatbuf_r>:
 8008c40:	b570      	push	{r4, r5, r6, lr}
 8008c42:	000e      	movs	r6, r1
 8008c44:	001d      	movs	r5, r3
 8008c46:	230e      	movs	r3, #14
 8008c48:	5ec9      	ldrsh	r1, [r1, r3]
 8008c4a:	0014      	movs	r4, r2
 8008c4c:	b096      	sub	sp, #88	; 0x58
 8008c4e:	2900      	cmp	r1, #0
 8008c50:	da08      	bge.n	8008c64 <__swhatbuf_r+0x24>
 8008c52:	220c      	movs	r2, #12
 8008c54:	5eb3      	ldrsh	r3, [r6, r2]
 8008c56:	2200      	movs	r2, #0
 8008c58:	602a      	str	r2, [r5, #0]
 8008c5a:	061b      	lsls	r3, r3, #24
 8008c5c:	d411      	bmi.n	8008c82 <__swhatbuf_r+0x42>
 8008c5e:	2380      	movs	r3, #128	; 0x80
 8008c60:	00db      	lsls	r3, r3, #3
 8008c62:	e00f      	b.n	8008c84 <__swhatbuf_r+0x44>
 8008c64:	466a      	mov	r2, sp
 8008c66:	f001 f895 	bl	8009d94 <_fstat_r>
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	dbf1      	blt.n	8008c52 <__swhatbuf_r+0x12>
 8008c6e:	23f0      	movs	r3, #240	; 0xf0
 8008c70:	9901      	ldr	r1, [sp, #4]
 8008c72:	021b      	lsls	r3, r3, #8
 8008c74:	4019      	ands	r1, r3
 8008c76:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <__swhatbuf_r+0x4c>)
 8008c78:	18c9      	adds	r1, r1, r3
 8008c7a:	424b      	negs	r3, r1
 8008c7c:	4159      	adcs	r1, r3
 8008c7e:	6029      	str	r1, [r5, #0]
 8008c80:	e7ed      	b.n	8008c5e <__swhatbuf_r+0x1e>
 8008c82:	2340      	movs	r3, #64	; 0x40
 8008c84:	2000      	movs	r0, #0
 8008c86:	6023      	str	r3, [r4, #0]
 8008c88:	b016      	add	sp, #88	; 0x58
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}
 8008c8c:	ffffe000 	.word	0xffffe000

08008c90 <__smakebuf_r>:
 8008c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c92:	2602      	movs	r6, #2
 8008c94:	898b      	ldrh	r3, [r1, #12]
 8008c96:	0005      	movs	r5, r0
 8008c98:	000c      	movs	r4, r1
 8008c9a:	4233      	tst	r3, r6
 8008c9c:	d006      	beq.n	8008cac <__smakebuf_r+0x1c>
 8008c9e:	0023      	movs	r3, r4
 8008ca0:	3347      	adds	r3, #71	; 0x47
 8008ca2:	6023      	str	r3, [r4, #0]
 8008ca4:	6123      	str	r3, [r4, #16]
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	6163      	str	r3, [r4, #20]
 8008caa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008cac:	466a      	mov	r2, sp
 8008cae:	ab01      	add	r3, sp, #4
 8008cb0:	f7ff ffc6 	bl	8008c40 <__swhatbuf_r>
 8008cb4:	9900      	ldr	r1, [sp, #0]
 8008cb6:	0007      	movs	r7, r0
 8008cb8:	0028      	movs	r0, r5
 8008cba:	f000 fc7f 	bl	80095bc <_malloc_r>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d108      	bne.n	8008cd4 <__smakebuf_r+0x44>
 8008cc2:	220c      	movs	r2, #12
 8008cc4:	5ea3      	ldrsh	r3, [r4, r2]
 8008cc6:	059a      	lsls	r2, r3, #22
 8008cc8:	d4ef      	bmi.n	8008caa <__smakebuf_r+0x1a>
 8008cca:	2203      	movs	r2, #3
 8008ccc:	4393      	bics	r3, r2
 8008cce:	431e      	orrs	r6, r3
 8008cd0:	81a6      	strh	r6, [r4, #12]
 8008cd2:	e7e4      	b.n	8008c9e <__smakebuf_r+0xe>
 8008cd4:	4b0f      	ldr	r3, [pc, #60]	; (8008d14 <__smakebuf_r+0x84>)
 8008cd6:	62ab      	str	r3, [r5, #40]	; 0x28
 8008cd8:	2380      	movs	r3, #128	; 0x80
 8008cda:	89a2      	ldrh	r2, [r4, #12]
 8008cdc:	6020      	str	r0, [r4, #0]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	81a3      	strh	r3, [r4, #12]
 8008ce2:	9b00      	ldr	r3, [sp, #0]
 8008ce4:	6120      	str	r0, [r4, #16]
 8008ce6:	6163      	str	r3, [r4, #20]
 8008ce8:	9b01      	ldr	r3, [sp, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00d      	beq.n	8008d0a <__smakebuf_r+0x7a>
 8008cee:	0028      	movs	r0, r5
 8008cf0:	230e      	movs	r3, #14
 8008cf2:	5ee1      	ldrsh	r1, [r4, r3]
 8008cf4:	f001 f860 	bl	8009db8 <_isatty_r>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d006      	beq.n	8008d0a <__smakebuf_r+0x7a>
 8008cfc:	2203      	movs	r2, #3
 8008cfe:	89a3      	ldrh	r3, [r4, #12]
 8008d00:	4393      	bics	r3, r2
 8008d02:	001a      	movs	r2, r3
 8008d04:	2301      	movs	r3, #1
 8008d06:	4313      	orrs	r3, r2
 8008d08:	81a3      	strh	r3, [r4, #12]
 8008d0a:	89a0      	ldrh	r0, [r4, #12]
 8008d0c:	4307      	orrs	r7, r0
 8008d0e:	81a7      	strh	r7, [r4, #12]
 8008d10:	e7cb      	b.n	8008caa <__smakebuf_r+0x1a>
 8008d12:	46c0      	nop			; (mov r8, r8)
 8008d14:	08008a75 	.word	0x08008a75

08008d18 <malloc>:
 8008d18:	b510      	push	{r4, lr}
 8008d1a:	4b03      	ldr	r3, [pc, #12]	; (8008d28 <malloc+0x10>)
 8008d1c:	0001      	movs	r1, r0
 8008d1e:	6818      	ldr	r0, [r3, #0]
 8008d20:	f000 fc4c 	bl	80095bc <_malloc_r>
 8008d24:	bd10      	pop	{r4, pc}
 8008d26:	46c0      	nop			; (mov r8, r8)
 8008d28:	20000064 	.word	0x20000064

08008d2c <memchr>:
 8008d2c:	b2c9      	uxtb	r1, r1
 8008d2e:	1882      	adds	r2, r0, r2
 8008d30:	4290      	cmp	r0, r2
 8008d32:	d101      	bne.n	8008d38 <memchr+0xc>
 8008d34:	2000      	movs	r0, #0
 8008d36:	4770      	bx	lr
 8008d38:	7803      	ldrb	r3, [r0, #0]
 8008d3a:	428b      	cmp	r3, r1
 8008d3c:	d0fb      	beq.n	8008d36 <memchr+0xa>
 8008d3e:	3001      	adds	r0, #1
 8008d40:	e7f6      	b.n	8008d30 <memchr+0x4>

08008d42 <memcpy>:
 8008d42:	2300      	movs	r3, #0
 8008d44:	b510      	push	{r4, lr}
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d100      	bne.n	8008d4c <memcpy+0xa>
 8008d4a:	bd10      	pop	{r4, pc}
 8008d4c:	5ccc      	ldrb	r4, [r1, r3]
 8008d4e:	54c4      	strb	r4, [r0, r3]
 8008d50:	3301      	adds	r3, #1
 8008d52:	e7f8      	b.n	8008d46 <memcpy+0x4>

08008d54 <_Balloc>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d58:	0006      	movs	r6, r0
 8008d5a:	000c      	movs	r4, r1
 8008d5c:	2d00      	cmp	r5, #0
 8008d5e:	d10e      	bne.n	8008d7e <_Balloc+0x2a>
 8008d60:	2010      	movs	r0, #16
 8008d62:	f7ff ffd9 	bl	8008d18 <malloc>
 8008d66:	1e02      	subs	r2, r0, #0
 8008d68:	6270      	str	r0, [r6, #36]	; 0x24
 8008d6a:	d104      	bne.n	8008d76 <_Balloc+0x22>
 8008d6c:	2166      	movs	r1, #102	; 0x66
 8008d6e:	4b19      	ldr	r3, [pc, #100]	; (8008dd4 <_Balloc+0x80>)
 8008d70:	4819      	ldr	r0, [pc, #100]	; (8008dd8 <_Balloc+0x84>)
 8008d72:	f000 ffcf 	bl	8009d14 <__assert_func>
 8008d76:	6045      	str	r5, [r0, #4]
 8008d78:	6085      	str	r5, [r0, #8]
 8008d7a:	6005      	str	r5, [r0, #0]
 8008d7c:	60c5      	str	r5, [r0, #12]
 8008d7e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008d80:	68eb      	ldr	r3, [r5, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d013      	beq.n	8008dae <_Balloc+0x5a>
 8008d86:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008d88:	00a2      	lsls	r2, r4, #2
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	189b      	adds	r3, r3, r2
 8008d8e:	6818      	ldr	r0, [r3, #0]
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d118      	bne.n	8008dc6 <_Balloc+0x72>
 8008d94:	2101      	movs	r1, #1
 8008d96:	000d      	movs	r5, r1
 8008d98:	40a5      	lsls	r5, r4
 8008d9a:	1d6a      	adds	r2, r5, #5
 8008d9c:	0030      	movs	r0, r6
 8008d9e:	0092      	lsls	r2, r2, #2
 8008da0:	f000 fb74 	bl	800948c <_calloc_r>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d00c      	beq.n	8008dc2 <_Balloc+0x6e>
 8008da8:	6044      	str	r4, [r0, #4]
 8008daa:	6085      	str	r5, [r0, #8]
 8008dac:	e00d      	b.n	8008dca <_Balloc+0x76>
 8008dae:	2221      	movs	r2, #33	; 0x21
 8008db0:	2104      	movs	r1, #4
 8008db2:	0030      	movs	r0, r6
 8008db4:	f000 fb6a 	bl	800948c <_calloc_r>
 8008db8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008dba:	60e8      	str	r0, [r5, #12]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1e1      	bne.n	8008d86 <_Balloc+0x32>
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	bd70      	pop	{r4, r5, r6, pc}
 8008dc6:	6802      	ldr	r2, [r0, #0]
 8008dc8:	601a      	str	r2, [r3, #0]
 8008dca:	2300      	movs	r3, #0
 8008dcc:	6103      	str	r3, [r0, #16]
 8008dce:	60c3      	str	r3, [r0, #12]
 8008dd0:	e7f8      	b.n	8008dc4 <_Balloc+0x70>
 8008dd2:	46c0      	nop			; (mov r8, r8)
 8008dd4:	0800a1ed 	.word	0x0800a1ed
 8008dd8:	0800a2d0 	.word	0x0800a2d0

08008ddc <_Bfree>:
 8008ddc:	b570      	push	{r4, r5, r6, lr}
 8008dde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008de0:	0005      	movs	r5, r0
 8008de2:	000c      	movs	r4, r1
 8008de4:	2e00      	cmp	r6, #0
 8008de6:	d10e      	bne.n	8008e06 <_Bfree+0x2a>
 8008de8:	2010      	movs	r0, #16
 8008dea:	f7ff ff95 	bl	8008d18 <malloc>
 8008dee:	1e02      	subs	r2, r0, #0
 8008df0:	6268      	str	r0, [r5, #36]	; 0x24
 8008df2:	d104      	bne.n	8008dfe <_Bfree+0x22>
 8008df4:	218a      	movs	r1, #138	; 0x8a
 8008df6:	4b09      	ldr	r3, [pc, #36]	; (8008e1c <_Bfree+0x40>)
 8008df8:	4809      	ldr	r0, [pc, #36]	; (8008e20 <_Bfree+0x44>)
 8008dfa:	f000 ff8b 	bl	8009d14 <__assert_func>
 8008dfe:	6046      	str	r6, [r0, #4]
 8008e00:	6086      	str	r6, [r0, #8]
 8008e02:	6006      	str	r6, [r0, #0]
 8008e04:	60c6      	str	r6, [r0, #12]
 8008e06:	2c00      	cmp	r4, #0
 8008e08:	d007      	beq.n	8008e1a <_Bfree+0x3e>
 8008e0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e0c:	6862      	ldr	r2, [r4, #4]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	0092      	lsls	r2, r2, #2
 8008e12:	189b      	adds	r3, r3, r2
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	6022      	str	r2, [r4, #0]
 8008e18:	601c      	str	r4, [r3, #0]
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	0800a1ed 	.word	0x0800a1ed
 8008e20:	0800a2d0 	.word	0x0800a2d0

08008e24 <__multadd>:
 8008e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e26:	000e      	movs	r6, r1
 8008e28:	9001      	str	r0, [sp, #4]
 8008e2a:	000c      	movs	r4, r1
 8008e2c:	001d      	movs	r5, r3
 8008e2e:	2000      	movs	r0, #0
 8008e30:	690f      	ldr	r7, [r1, #16]
 8008e32:	3614      	adds	r6, #20
 8008e34:	6833      	ldr	r3, [r6, #0]
 8008e36:	3001      	adds	r0, #1
 8008e38:	b299      	uxth	r1, r3
 8008e3a:	4351      	muls	r1, r2
 8008e3c:	0c1b      	lsrs	r3, r3, #16
 8008e3e:	4353      	muls	r3, r2
 8008e40:	1949      	adds	r1, r1, r5
 8008e42:	0c0d      	lsrs	r5, r1, #16
 8008e44:	195b      	adds	r3, r3, r5
 8008e46:	0c1d      	lsrs	r5, r3, #16
 8008e48:	b289      	uxth	r1, r1
 8008e4a:	041b      	lsls	r3, r3, #16
 8008e4c:	185b      	adds	r3, r3, r1
 8008e4e:	c608      	stmia	r6!, {r3}
 8008e50:	4287      	cmp	r7, r0
 8008e52:	dcef      	bgt.n	8008e34 <__multadd+0x10>
 8008e54:	2d00      	cmp	r5, #0
 8008e56:	d022      	beq.n	8008e9e <__multadd+0x7a>
 8008e58:	68a3      	ldr	r3, [r4, #8]
 8008e5a:	42bb      	cmp	r3, r7
 8008e5c:	dc19      	bgt.n	8008e92 <__multadd+0x6e>
 8008e5e:	6863      	ldr	r3, [r4, #4]
 8008e60:	9801      	ldr	r0, [sp, #4]
 8008e62:	1c59      	adds	r1, r3, #1
 8008e64:	f7ff ff76 	bl	8008d54 <_Balloc>
 8008e68:	1e06      	subs	r6, r0, #0
 8008e6a:	d105      	bne.n	8008e78 <__multadd+0x54>
 8008e6c:	0002      	movs	r2, r0
 8008e6e:	21b5      	movs	r1, #181	; 0xb5
 8008e70:	4b0c      	ldr	r3, [pc, #48]	; (8008ea4 <__multadd+0x80>)
 8008e72:	480d      	ldr	r0, [pc, #52]	; (8008ea8 <__multadd+0x84>)
 8008e74:	f000 ff4e 	bl	8009d14 <__assert_func>
 8008e78:	0021      	movs	r1, r4
 8008e7a:	6923      	ldr	r3, [r4, #16]
 8008e7c:	310c      	adds	r1, #12
 8008e7e:	1c9a      	adds	r2, r3, #2
 8008e80:	0092      	lsls	r2, r2, #2
 8008e82:	300c      	adds	r0, #12
 8008e84:	f7ff ff5d 	bl	8008d42 <memcpy>
 8008e88:	0021      	movs	r1, r4
 8008e8a:	9801      	ldr	r0, [sp, #4]
 8008e8c:	f7ff ffa6 	bl	8008ddc <_Bfree>
 8008e90:	0034      	movs	r4, r6
 8008e92:	1d3b      	adds	r3, r7, #4
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	18e3      	adds	r3, r4, r3
 8008e98:	605d      	str	r5, [r3, #4]
 8008e9a:	1c7b      	adds	r3, r7, #1
 8008e9c:	6123      	str	r3, [r4, #16]
 8008e9e:	0020      	movs	r0, r4
 8008ea0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ea2:	46c0      	nop			; (mov r8, r8)
 8008ea4:	0800a25f 	.word	0x0800a25f
 8008ea8:	0800a2d0 	.word	0x0800a2d0

08008eac <__hi0bits>:
 8008eac:	0003      	movs	r3, r0
 8008eae:	0c02      	lsrs	r2, r0, #16
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	4282      	cmp	r2, r0
 8008eb4:	d101      	bne.n	8008eba <__hi0bits+0xe>
 8008eb6:	041b      	lsls	r3, r3, #16
 8008eb8:	3010      	adds	r0, #16
 8008eba:	0e1a      	lsrs	r2, r3, #24
 8008ebc:	d101      	bne.n	8008ec2 <__hi0bits+0x16>
 8008ebe:	3008      	adds	r0, #8
 8008ec0:	021b      	lsls	r3, r3, #8
 8008ec2:	0f1a      	lsrs	r2, r3, #28
 8008ec4:	d101      	bne.n	8008eca <__hi0bits+0x1e>
 8008ec6:	3004      	adds	r0, #4
 8008ec8:	011b      	lsls	r3, r3, #4
 8008eca:	0f9a      	lsrs	r2, r3, #30
 8008ecc:	d101      	bne.n	8008ed2 <__hi0bits+0x26>
 8008ece:	3002      	adds	r0, #2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	db03      	blt.n	8008ede <__hi0bits+0x32>
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	005b      	lsls	r3, r3, #1
 8008eda:	d400      	bmi.n	8008ede <__hi0bits+0x32>
 8008edc:	2020      	movs	r0, #32
 8008ede:	4770      	bx	lr

08008ee0 <__lo0bits>:
 8008ee0:	6803      	ldr	r3, [r0, #0]
 8008ee2:	0002      	movs	r2, r0
 8008ee4:	2107      	movs	r1, #7
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	4008      	ands	r0, r1
 8008eea:	420b      	tst	r3, r1
 8008eec:	d00d      	beq.n	8008f0a <__lo0bits+0x2a>
 8008eee:	3906      	subs	r1, #6
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	420b      	tst	r3, r1
 8008ef4:	d105      	bne.n	8008f02 <__lo0bits+0x22>
 8008ef6:	3002      	adds	r0, #2
 8008ef8:	4203      	tst	r3, r0
 8008efa:	d003      	beq.n	8008f04 <__lo0bits+0x24>
 8008efc:	40cb      	lsrs	r3, r1
 8008efe:	0008      	movs	r0, r1
 8008f00:	6013      	str	r3, [r2, #0]
 8008f02:	4770      	bx	lr
 8008f04:	089b      	lsrs	r3, r3, #2
 8008f06:	6013      	str	r3, [r2, #0]
 8008f08:	e7fb      	b.n	8008f02 <__lo0bits+0x22>
 8008f0a:	b299      	uxth	r1, r3
 8008f0c:	2900      	cmp	r1, #0
 8008f0e:	d101      	bne.n	8008f14 <__lo0bits+0x34>
 8008f10:	2010      	movs	r0, #16
 8008f12:	0c1b      	lsrs	r3, r3, #16
 8008f14:	b2d9      	uxtb	r1, r3
 8008f16:	2900      	cmp	r1, #0
 8008f18:	d101      	bne.n	8008f1e <__lo0bits+0x3e>
 8008f1a:	3008      	adds	r0, #8
 8008f1c:	0a1b      	lsrs	r3, r3, #8
 8008f1e:	0719      	lsls	r1, r3, #28
 8008f20:	d101      	bne.n	8008f26 <__lo0bits+0x46>
 8008f22:	3004      	adds	r0, #4
 8008f24:	091b      	lsrs	r3, r3, #4
 8008f26:	0799      	lsls	r1, r3, #30
 8008f28:	d101      	bne.n	8008f2e <__lo0bits+0x4e>
 8008f2a:	3002      	adds	r0, #2
 8008f2c:	089b      	lsrs	r3, r3, #2
 8008f2e:	07d9      	lsls	r1, r3, #31
 8008f30:	d4e9      	bmi.n	8008f06 <__lo0bits+0x26>
 8008f32:	3001      	adds	r0, #1
 8008f34:	085b      	lsrs	r3, r3, #1
 8008f36:	d1e6      	bne.n	8008f06 <__lo0bits+0x26>
 8008f38:	2020      	movs	r0, #32
 8008f3a:	e7e2      	b.n	8008f02 <__lo0bits+0x22>

08008f3c <__i2b>:
 8008f3c:	b510      	push	{r4, lr}
 8008f3e:	000c      	movs	r4, r1
 8008f40:	2101      	movs	r1, #1
 8008f42:	f7ff ff07 	bl	8008d54 <_Balloc>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d106      	bne.n	8008f58 <__i2b+0x1c>
 8008f4a:	21a0      	movs	r1, #160	; 0xa0
 8008f4c:	0002      	movs	r2, r0
 8008f4e:	4b04      	ldr	r3, [pc, #16]	; (8008f60 <__i2b+0x24>)
 8008f50:	4804      	ldr	r0, [pc, #16]	; (8008f64 <__i2b+0x28>)
 8008f52:	0049      	lsls	r1, r1, #1
 8008f54:	f000 fede 	bl	8009d14 <__assert_func>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	6144      	str	r4, [r0, #20]
 8008f5c:	6103      	str	r3, [r0, #16]
 8008f5e:	bd10      	pop	{r4, pc}
 8008f60:	0800a25f 	.word	0x0800a25f
 8008f64:	0800a2d0 	.word	0x0800a2d0

08008f68 <__multiply>:
 8008f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f6a:	690b      	ldr	r3, [r1, #16]
 8008f6c:	0014      	movs	r4, r2
 8008f6e:	6912      	ldr	r2, [r2, #16]
 8008f70:	000d      	movs	r5, r1
 8008f72:	b089      	sub	sp, #36	; 0x24
 8008f74:	4293      	cmp	r3, r2
 8008f76:	da01      	bge.n	8008f7c <__multiply+0x14>
 8008f78:	0025      	movs	r5, r4
 8008f7a:	000c      	movs	r4, r1
 8008f7c:	692f      	ldr	r7, [r5, #16]
 8008f7e:	6926      	ldr	r6, [r4, #16]
 8008f80:	6869      	ldr	r1, [r5, #4]
 8008f82:	19bb      	adds	r3, r7, r6
 8008f84:	9302      	str	r3, [sp, #8]
 8008f86:	68ab      	ldr	r3, [r5, #8]
 8008f88:	19ba      	adds	r2, r7, r6
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	da00      	bge.n	8008f90 <__multiply+0x28>
 8008f8e:	3101      	adds	r1, #1
 8008f90:	f7ff fee0 	bl	8008d54 <_Balloc>
 8008f94:	9001      	str	r0, [sp, #4]
 8008f96:	2800      	cmp	r0, #0
 8008f98:	d106      	bne.n	8008fa8 <__multiply+0x40>
 8008f9a:	215e      	movs	r1, #94	; 0x5e
 8008f9c:	0002      	movs	r2, r0
 8008f9e:	4b48      	ldr	r3, [pc, #288]	; (80090c0 <__multiply+0x158>)
 8008fa0:	4848      	ldr	r0, [pc, #288]	; (80090c4 <__multiply+0x15c>)
 8008fa2:	31ff      	adds	r1, #255	; 0xff
 8008fa4:	f000 feb6 	bl	8009d14 <__assert_func>
 8008fa8:	9b01      	ldr	r3, [sp, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	3314      	adds	r3, #20
 8008fae:	469c      	mov	ip, r3
 8008fb0:	19bb      	adds	r3, r7, r6
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4463      	add	r3, ip
 8008fb6:	9303      	str	r3, [sp, #12]
 8008fb8:	4663      	mov	r3, ip
 8008fba:	9903      	ldr	r1, [sp, #12]
 8008fbc:	428b      	cmp	r3, r1
 8008fbe:	d32c      	bcc.n	800901a <__multiply+0xb2>
 8008fc0:	002b      	movs	r3, r5
 8008fc2:	0022      	movs	r2, r4
 8008fc4:	3314      	adds	r3, #20
 8008fc6:	00bf      	lsls	r7, r7, #2
 8008fc8:	3214      	adds	r2, #20
 8008fca:	9306      	str	r3, [sp, #24]
 8008fcc:	00b6      	lsls	r6, r6, #2
 8008fce:	19db      	adds	r3, r3, r7
 8008fd0:	9304      	str	r3, [sp, #16]
 8008fd2:	1993      	adds	r3, r2, r6
 8008fd4:	9307      	str	r3, [sp, #28]
 8008fd6:	2304      	movs	r3, #4
 8008fd8:	9305      	str	r3, [sp, #20]
 8008fda:	002b      	movs	r3, r5
 8008fdc:	9904      	ldr	r1, [sp, #16]
 8008fde:	3315      	adds	r3, #21
 8008fe0:	9200      	str	r2, [sp, #0]
 8008fe2:	4299      	cmp	r1, r3
 8008fe4:	d305      	bcc.n	8008ff2 <__multiply+0x8a>
 8008fe6:	1b4b      	subs	r3, r1, r5
 8008fe8:	3b15      	subs	r3, #21
 8008fea:	089b      	lsrs	r3, r3, #2
 8008fec:	3301      	adds	r3, #1
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	9305      	str	r3, [sp, #20]
 8008ff2:	9b07      	ldr	r3, [sp, #28]
 8008ff4:	9a00      	ldr	r2, [sp, #0]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d311      	bcc.n	800901e <__multiply+0xb6>
 8008ffa:	9b02      	ldr	r3, [sp, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	dd06      	ble.n	800900e <__multiply+0xa6>
 8009000:	9b03      	ldr	r3, [sp, #12]
 8009002:	3b04      	subs	r3, #4
 8009004:	9303      	str	r3, [sp, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d053      	beq.n	80090b6 <__multiply+0x14e>
 800900e:	9b01      	ldr	r3, [sp, #4]
 8009010:	9a02      	ldr	r2, [sp, #8]
 8009012:	0018      	movs	r0, r3
 8009014:	611a      	str	r2, [r3, #16]
 8009016:	b009      	add	sp, #36	; 0x24
 8009018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800901a:	c304      	stmia	r3!, {r2}
 800901c:	e7cd      	b.n	8008fba <__multiply+0x52>
 800901e:	9b00      	ldr	r3, [sp, #0]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	b298      	uxth	r0, r3
 8009024:	2800      	cmp	r0, #0
 8009026:	d01b      	beq.n	8009060 <__multiply+0xf8>
 8009028:	4667      	mov	r7, ip
 800902a:	2400      	movs	r4, #0
 800902c:	9e06      	ldr	r6, [sp, #24]
 800902e:	ce02      	ldmia	r6!, {r1}
 8009030:	683a      	ldr	r2, [r7, #0]
 8009032:	b28b      	uxth	r3, r1
 8009034:	4343      	muls	r3, r0
 8009036:	b292      	uxth	r2, r2
 8009038:	189b      	adds	r3, r3, r2
 800903a:	191b      	adds	r3, r3, r4
 800903c:	0c0c      	lsrs	r4, r1, #16
 800903e:	4344      	muls	r4, r0
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	0c11      	lsrs	r1, r2, #16
 8009044:	1861      	adds	r1, r4, r1
 8009046:	0c1c      	lsrs	r4, r3, #16
 8009048:	1909      	adds	r1, r1, r4
 800904a:	0c0c      	lsrs	r4, r1, #16
 800904c:	b29b      	uxth	r3, r3
 800904e:	0409      	lsls	r1, r1, #16
 8009050:	430b      	orrs	r3, r1
 8009052:	c708      	stmia	r7!, {r3}
 8009054:	9b04      	ldr	r3, [sp, #16]
 8009056:	42b3      	cmp	r3, r6
 8009058:	d8e9      	bhi.n	800902e <__multiply+0xc6>
 800905a:	4663      	mov	r3, ip
 800905c:	9a05      	ldr	r2, [sp, #20]
 800905e:	509c      	str	r4, [r3, r2]
 8009060:	9b00      	ldr	r3, [sp, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	0c1e      	lsrs	r6, r3, #16
 8009066:	d020      	beq.n	80090aa <__multiply+0x142>
 8009068:	4663      	mov	r3, ip
 800906a:	002c      	movs	r4, r5
 800906c:	4660      	mov	r0, ip
 800906e:	2700      	movs	r7, #0
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3414      	adds	r4, #20
 8009074:	6822      	ldr	r2, [r4, #0]
 8009076:	b29b      	uxth	r3, r3
 8009078:	b291      	uxth	r1, r2
 800907a:	4371      	muls	r1, r6
 800907c:	6802      	ldr	r2, [r0, #0]
 800907e:	0c12      	lsrs	r2, r2, #16
 8009080:	1889      	adds	r1, r1, r2
 8009082:	19cf      	adds	r7, r1, r7
 8009084:	0439      	lsls	r1, r7, #16
 8009086:	430b      	orrs	r3, r1
 8009088:	6003      	str	r3, [r0, #0]
 800908a:	cc02      	ldmia	r4!, {r1}
 800908c:	6843      	ldr	r3, [r0, #4]
 800908e:	0c09      	lsrs	r1, r1, #16
 8009090:	4371      	muls	r1, r6
 8009092:	b29b      	uxth	r3, r3
 8009094:	0c3f      	lsrs	r7, r7, #16
 8009096:	18cb      	adds	r3, r1, r3
 8009098:	9a04      	ldr	r2, [sp, #16]
 800909a:	19db      	adds	r3, r3, r7
 800909c:	0c1f      	lsrs	r7, r3, #16
 800909e:	3004      	adds	r0, #4
 80090a0:	42a2      	cmp	r2, r4
 80090a2:	d8e7      	bhi.n	8009074 <__multiply+0x10c>
 80090a4:	4662      	mov	r2, ip
 80090a6:	9905      	ldr	r1, [sp, #20]
 80090a8:	5053      	str	r3, [r2, r1]
 80090aa:	9b00      	ldr	r3, [sp, #0]
 80090ac:	3304      	adds	r3, #4
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	2304      	movs	r3, #4
 80090b2:	449c      	add	ip, r3
 80090b4:	e79d      	b.n	8008ff2 <__multiply+0x8a>
 80090b6:	9b02      	ldr	r3, [sp, #8]
 80090b8:	3b01      	subs	r3, #1
 80090ba:	9302      	str	r3, [sp, #8]
 80090bc:	e79d      	b.n	8008ffa <__multiply+0x92>
 80090be:	46c0      	nop			; (mov r8, r8)
 80090c0:	0800a25f 	.word	0x0800a25f
 80090c4:	0800a2d0 	.word	0x0800a2d0

080090c8 <__pow5mult>:
 80090c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ca:	2303      	movs	r3, #3
 80090cc:	0015      	movs	r5, r2
 80090ce:	0007      	movs	r7, r0
 80090d0:	000e      	movs	r6, r1
 80090d2:	401a      	ands	r2, r3
 80090d4:	421d      	tst	r5, r3
 80090d6:	d008      	beq.n	80090ea <__pow5mult+0x22>
 80090d8:	4925      	ldr	r1, [pc, #148]	; (8009170 <__pow5mult+0xa8>)
 80090da:	3a01      	subs	r2, #1
 80090dc:	0092      	lsls	r2, r2, #2
 80090de:	5852      	ldr	r2, [r2, r1]
 80090e0:	2300      	movs	r3, #0
 80090e2:	0031      	movs	r1, r6
 80090e4:	f7ff fe9e 	bl	8008e24 <__multadd>
 80090e8:	0006      	movs	r6, r0
 80090ea:	10ad      	asrs	r5, r5, #2
 80090ec:	d03d      	beq.n	800916a <__pow5mult+0xa2>
 80090ee:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80090f0:	2c00      	cmp	r4, #0
 80090f2:	d10f      	bne.n	8009114 <__pow5mult+0x4c>
 80090f4:	2010      	movs	r0, #16
 80090f6:	f7ff fe0f 	bl	8008d18 <malloc>
 80090fa:	1e02      	subs	r2, r0, #0
 80090fc:	6278      	str	r0, [r7, #36]	; 0x24
 80090fe:	d105      	bne.n	800910c <__pow5mult+0x44>
 8009100:	21d7      	movs	r1, #215	; 0xd7
 8009102:	4b1c      	ldr	r3, [pc, #112]	; (8009174 <__pow5mult+0xac>)
 8009104:	481c      	ldr	r0, [pc, #112]	; (8009178 <__pow5mult+0xb0>)
 8009106:	0049      	lsls	r1, r1, #1
 8009108:	f000 fe04 	bl	8009d14 <__assert_func>
 800910c:	6044      	str	r4, [r0, #4]
 800910e:	6084      	str	r4, [r0, #8]
 8009110:	6004      	str	r4, [r0, #0]
 8009112:	60c4      	str	r4, [r0, #12]
 8009114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009116:	689c      	ldr	r4, [r3, #8]
 8009118:	9301      	str	r3, [sp, #4]
 800911a:	2c00      	cmp	r4, #0
 800911c:	d108      	bne.n	8009130 <__pow5mult+0x68>
 800911e:	0038      	movs	r0, r7
 8009120:	4916      	ldr	r1, [pc, #88]	; (800917c <__pow5mult+0xb4>)
 8009122:	f7ff ff0b 	bl	8008f3c <__i2b>
 8009126:	9b01      	ldr	r3, [sp, #4]
 8009128:	0004      	movs	r4, r0
 800912a:	6098      	str	r0, [r3, #8]
 800912c:	2300      	movs	r3, #0
 800912e:	6003      	str	r3, [r0, #0]
 8009130:	2301      	movs	r3, #1
 8009132:	421d      	tst	r5, r3
 8009134:	d00a      	beq.n	800914c <__pow5mult+0x84>
 8009136:	0031      	movs	r1, r6
 8009138:	0022      	movs	r2, r4
 800913a:	0038      	movs	r0, r7
 800913c:	f7ff ff14 	bl	8008f68 <__multiply>
 8009140:	0031      	movs	r1, r6
 8009142:	9001      	str	r0, [sp, #4]
 8009144:	0038      	movs	r0, r7
 8009146:	f7ff fe49 	bl	8008ddc <_Bfree>
 800914a:	9e01      	ldr	r6, [sp, #4]
 800914c:	106d      	asrs	r5, r5, #1
 800914e:	d00c      	beq.n	800916a <__pow5mult+0xa2>
 8009150:	6820      	ldr	r0, [r4, #0]
 8009152:	2800      	cmp	r0, #0
 8009154:	d107      	bne.n	8009166 <__pow5mult+0x9e>
 8009156:	0022      	movs	r2, r4
 8009158:	0021      	movs	r1, r4
 800915a:	0038      	movs	r0, r7
 800915c:	f7ff ff04 	bl	8008f68 <__multiply>
 8009160:	2300      	movs	r3, #0
 8009162:	6020      	str	r0, [r4, #0]
 8009164:	6003      	str	r3, [r0, #0]
 8009166:	0004      	movs	r4, r0
 8009168:	e7e2      	b.n	8009130 <__pow5mult+0x68>
 800916a:	0030      	movs	r0, r6
 800916c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800916e:	46c0      	nop			; (mov r8, r8)
 8009170:	0800a420 	.word	0x0800a420
 8009174:	0800a1ed 	.word	0x0800a1ed
 8009178:	0800a2d0 	.word	0x0800a2d0
 800917c:	00000271 	.word	0x00000271

08009180 <__lshift>:
 8009180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009182:	000c      	movs	r4, r1
 8009184:	0017      	movs	r7, r2
 8009186:	6923      	ldr	r3, [r4, #16]
 8009188:	1155      	asrs	r5, r2, #5
 800918a:	b087      	sub	sp, #28
 800918c:	18eb      	adds	r3, r5, r3
 800918e:	9302      	str	r3, [sp, #8]
 8009190:	3301      	adds	r3, #1
 8009192:	9301      	str	r3, [sp, #4]
 8009194:	6849      	ldr	r1, [r1, #4]
 8009196:	68a3      	ldr	r3, [r4, #8]
 8009198:	9004      	str	r0, [sp, #16]
 800919a:	9a01      	ldr	r2, [sp, #4]
 800919c:	4293      	cmp	r3, r2
 800919e:	db10      	blt.n	80091c2 <__lshift+0x42>
 80091a0:	9804      	ldr	r0, [sp, #16]
 80091a2:	f7ff fdd7 	bl	8008d54 <_Balloc>
 80091a6:	2300      	movs	r3, #0
 80091a8:	0002      	movs	r2, r0
 80091aa:	0006      	movs	r6, r0
 80091ac:	0019      	movs	r1, r3
 80091ae:	3214      	adds	r2, #20
 80091b0:	4298      	cmp	r0, r3
 80091b2:	d10c      	bne.n	80091ce <__lshift+0x4e>
 80091b4:	21da      	movs	r1, #218	; 0xda
 80091b6:	0002      	movs	r2, r0
 80091b8:	4b26      	ldr	r3, [pc, #152]	; (8009254 <__lshift+0xd4>)
 80091ba:	4827      	ldr	r0, [pc, #156]	; (8009258 <__lshift+0xd8>)
 80091bc:	31ff      	adds	r1, #255	; 0xff
 80091be:	f000 fda9 	bl	8009d14 <__assert_func>
 80091c2:	3101      	adds	r1, #1
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	e7e8      	b.n	800919a <__lshift+0x1a>
 80091c8:	0098      	lsls	r0, r3, #2
 80091ca:	5011      	str	r1, [r2, r0]
 80091cc:	3301      	adds	r3, #1
 80091ce:	42ab      	cmp	r3, r5
 80091d0:	dbfa      	blt.n	80091c8 <__lshift+0x48>
 80091d2:	43eb      	mvns	r3, r5
 80091d4:	17db      	asrs	r3, r3, #31
 80091d6:	401d      	ands	r5, r3
 80091d8:	211f      	movs	r1, #31
 80091da:	0023      	movs	r3, r4
 80091dc:	0038      	movs	r0, r7
 80091de:	00ad      	lsls	r5, r5, #2
 80091e0:	1955      	adds	r5, r2, r5
 80091e2:	6922      	ldr	r2, [r4, #16]
 80091e4:	3314      	adds	r3, #20
 80091e6:	0092      	lsls	r2, r2, #2
 80091e8:	4008      	ands	r0, r1
 80091ea:	4684      	mov	ip, r0
 80091ec:	189a      	adds	r2, r3, r2
 80091ee:	420f      	tst	r7, r1
 80091f0:	d02a      	beq.n	8009248 <__lshift+0xc8>
 80091f2:	3101      	adds	r1, #1
 80091f4:	1a09      	subs	r1, r1, r0
 80091f6:	9105      	str	r1, [sp, #20]
 80091f8:	2100      	movs	r1, #0
 80091fa:	9503      	str	r5, [sp, #12]
 80091fc:	4667      	mov	r7, ip
 80091fe:	6818      	ldr	r0, [r3, #0]
 8009200:	40b8      	lsls	r0, r7
 8009202:	4301      	orrs	r1, r0
 8009204:	9803      	ldr	r0, [sp, #12]
 8009206:	c002      	stmia	r0!, {r1}
 8009208:	cb02      	ldmia	r3!, {r1}
 800920a:	9003      	str	r0, [sp, #12]
 800920c:	9805      	ldr	r0, [sp, #20]
 800920e:	40c1      	lsrs	r1, r0
 8009210:	429a      	cmp	r2, r3
 8009212:	d8f3      	bhi.n	80091fc <__lshift+0x7c>
 8009214:	0020      	movs	r0, r4
 8009216:	3015      	adds	r0, #21
 8009218:	2304      	movs	r3, #4
 800921a:	4282      	cmp	r2, r0
 800921c:	d304      	bcc.n	8009228 <__lshift+0xa8>
 800921e:	1b13      	subs	r3, r2, r4
 8009220:	3b15      	subs	r3, #21
 8009222:	089b      	lsrs	r3, r3, #2
 8009224:	3301      	adds	r3, #1
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	50e9      	str	r1, [r5, r3]
 800922a:	2900      	cmp	r1, #0
 800922c:	d002      	beq.n	8009234 <__lshift+0xb4>
 800922e:	9b02      	ldr	r3, [sp, #8]
 8009230:	3302      	adds	r3, #2
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	9b01      	ldr	r3, [sp, #4]
 8009236:	9804      	ldr	r0, [sp, #16]
 8009238:	3b01      	subs	r3, #1
 800923a:	0021      	movs	r1, r4
 800923c:	6133      	str	r3, [r6, #16]
 800923e:	f7ff fdcd 	bl	8008ddc <_Bfree>
 8009242:	0030      	movs	r0, r6
 8009244:	b007      	add	sp, #28
 8009246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009248:	cb02      	ldmia	r3!, {r1}
 800924a:	c502      	stmia	r5!, {r1}
 800924c:	429a      	cmp	r2, r3
 800924e:	d8fb      	bhi.n	8009248 <__lshift+0xc8>
 8009250:	e7f0      	b.n	8009234 <__lshift+0xb4>
 8009252:	46c0      	nop			; (mov r8, r8)
 8009254:	0800a25f 	.word	0x0800a25f
 8009258:	0800a2d0 	.word	0x0800a2d0

0800925c <__mcmp>:
 800925c:	6902      	ldr	r2, [r0, #16]
 800925e:	690b      	ldr	r3, [r1, #16]
 8009260:	b530      	push	{r4, r5, lr}
 8009262:	0004      	movs	r4, r0
 8009264:	1ad0      	subs	r0, r2, r3
 8009266:	429a      	cmp	r2, r3
 8009268:	d10d      	bne.n	8009286 <__mcmp+0x2a>
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	3414      	adds	r4, #20
 800926e:	3114      	adds	r1, #20
 8009270:	18e2      	adds	r2, r4, r3
 8009272:	18c9      	adds	r1, r1, r3
 8009274:	3a04      	subs	r2, #4
 8009276:	3904      	subs	r1, #4
 8009278:	6815      	ldr	r5, [r2, #0]
 800927a:	680b      	ldr	r3, [r1, #0]
 800927c:	429d      	cmp	r5, r3
 800927e:	d003      	beq.n	8009288 <__mcmp+0x2c>
 8009280:	2001      	movs	r0, #1
 8009282:	429d      	cmp	r5, r3
 8009284:	d303      	bcc.n	800928e <__mcmp+0x32>
 8009286:	bd30      	pop	{r4, r5, pc}
 8009288:	4294      	cmp	r4, r2
 800928a:	d3f3      	bcc.n	8009274 <__mcmp+0x18>
 800928c:	e7fb      	b.n	8009286 <__mcmp+0x2a>
 800928e:	4240      	negs	r0, r0
 8009290:	e7f9      	b.n	8009286 <__mcmp+0x2a>
	...

08009294 <__mdiff>:
 8009294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009296:	000e      	movs	r6, r1
 8009298:	0007      	movs	r7, r0
 800929a:	0011      	movs	r1, r2
 800929c:	0030      	movs	r0, r6
 800929e:	b087      	sub	sp, #28
 80092a0:	0014      	movs	r4, r2
 80092a2:	f7ff ffdb 	bl	800925c <__mcmp>
 80092a6:	1e05      	subs	r5, r0, #0
 80092a8:	d110      	bne.n	80092cc <__mdiff+0x38>
 80092aa:	0001      	movs	r1, r0
 80092ac:	0038      	movs	r0, r7
 80092ae:	f7ff fd51 	bl	8008d54 <_Balloc>
 80092b2:	1e02      	subs	r2, r0, #0
 80092b4:	d104      	bne.n	80092c0 <__mdiff+0x2c>
 80092b6:	4b40      	ldr	r3, [pc, #256]	; (80093b8 <__mdiff+0x124>)
 80092b8:	4940      	ldr	r1, [pc, #256]	; (80093bc <__mdiff+0x128>)
 80092ba:	4841      	ldr	r0, [pc, #260]	; (80093c0 <__mdiff+0x12c>)
 80092bc:	f000 fd2a 	bl	8009d14 <__assert_func>
 80092c0:	2301      	movs	r3, #1
 80092c2:	6145      	str	r5, [r0, #20]
 80092c4:	6103      	str	r3, [r0, #16]
 80092c6:	0010      	movs	r0, r2
 80092c8:	b007      	add	sp, #28
 80092ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092cc:	2301      	movs	r3, #1
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	2800      	cmp	r0, #0
 80092d2:	db04      	blt.n	80092de <__mdiff+0x4a>
 80092d4:	0023      	movs	r3, r4
 80092d6:	0034      	movs	r4, r6
 80092d8:	001e      	movs	r6, r3
 80092da:	2300      	movs	r3, #0
 80092dc:	9301      	str	r3, [sp, #4]
 80092de:	0038      	movs	r0, r7
 80092e0:	6861      	ldr	r1, [r4, #4]
 80092e2:	f7ff fd37 	bl	8008d54 <_Balloc>
 80092e6:	1e02      	subs	r2, r0, #0
 80092e8:	d103      	bne.n	80092f2 <__mdiff+0x5e>
 80092ea:	2190      	movs	r1, #144	; 0x90
 80092ec:	4b32      	ldr	r3, [pc, #200]	; (80093b8 <__mdiff+0x124>)
 80092ee:	0089      	lsls	r1, r1, #2
 80092f0:	e7e3      	b.n	80092ba <__mdiff+0x26>
 80092f2:	9b01      	ldr	r3, [sp, #4]
 80092f4:	2700      	movs	r7, #0
 80092f6:	60c3      	str	r3, [r0, #12]
 80092f8:	6920      	ldr	r0, [r4, #16]
 80092fa:	3414      	adds	r4, #20
 80092fc:	9401      	str	r4, [sp, #4]
 80092fe:	9b01      	ldr	r3, [sp, #4]
 8009300:	0084      	lsls	r4, r0, #2
 8009302:	191b      	adds	r3, r3, r4
 8009304:	0034      	movs	r4, r6
 8009306:	9302      	str	r3, [sp, #8]
 8009308:	6933      	ldr	r3, [r6, #16]
 800930a:	3414      	adds	r4, #20
 800930c:	0099      	lsls	r1, r3, #2
 800930e:	1863      	adds	r3, r4, r1
 8009310:	9303      	str	r3, [sp, #12]
 8009312:	0013      	movs	r3, r2
 8009314:	3314      	adds	r3, #20
 8009316:	469c      	mov	ip, r3
 8009318:	9305      	str	r3, [sp, #20]
 800931a:	9b01      	ldr	r3, [sp, #4]
 800931c:	9304      	str	r3, [sp, #16]
 800931e:	9b04      	ldr	r3, [sp, #16]
 8009320:	cc02      	ldmia	r4!, {r1}
 8009322:	cb20      	ldmia	r3!, {r5}
 8009324:	9304      	str	r3, [sp, #16]
 8009326:	b2ab      	uxth	r3, r5
 8009328:	19df      	adds	r7, r3, r7
 800932a:	b28b      	uxth	r3, r1
 800932c:	1afb      	subs	r3, r7, r3
 800932e:	0c09      	lsrs	r1, r1, #16
 8009330:	0c2d      	lsrs	r5, r5, #16
 8009332:	1a6d      	subs	r5, r5, r1
 8009334:	1419      	asrs	r1, r3, #16
 8009336:	186d      	adds	r5, r5, r1
 8009338:	4661      	mov	r1, ip
 800933a:	142f      	asrs	r7, r5, #16
 800933c:	b29b      	uxth	r3, r3
 800933e:	042d      	lsls	r5, r5, #16
 8009340:	432b      	orrs	r3, r5
 8009342:	c108      	stmia	r1!, {r3}
 8009344:	9b03      	ldr	r3, [sp, #12]
 8009346:	468c      	mov	ip, r1
 8009348:	42a3      	cmp	r3, r4
 800934a:	d8e8      	bhi.n	800931e <__mdiff+0x8a>
 800934c:	0031      	movs	r1, r6
 800934e:	9c03      	ldr	r4, [sp, #12]
 8009350:	3115      	adds	r1, #21
 8009352:	2304      	movs	r3, #4
 8009354:	428c      	cmp	r4, r1
 8009356:	d304      	bcc.n	8009362 <__mdiff+0xce>
 8009358:	1ba3      	subs	r3, r4, r6
 800935a:	3b15      	subs	r3, #21
 800935c:	089b      	lsrs	r3, r3, #2
 800935e:	3301      	adds	r3, #1
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	9901      	ldr	r1, [sp, #4]
 8009364:	18cc      	adds	r4, r1, r3
 8009366:	9905      	ldr	r1, [sp, #20]
 8009368:	0026      	movs	r6, r4
 800936a:	18cb      	adds	r3, r1, r3
 800936c:	469c      	mov	ip, r3
 800936e:	9902      	ldr	r1, [sp, #8]
 8009370:	428e      	cmp	r6, r1
 8009372:	d310      	bcc.n	8009396 <__mdiff+0x102>
 8009374:	9e02      	ldr	r6, [sp, #8]
 8009376:	1ee1      	subs	r1, r4, #3
 8009378:	2500      	movs	r5, #0
 800937a:	428e      	cmp	r6, r1
 800937c:	d304      	bcc.n	8009388 <__mdiff+0xf4>
 800937e:	0031      	movs	r1, r6
 8009380:	3103      	adds	r1, #3
 8009382:	1b0c      	subs	r4, r1, r4
 8009384:	08a4      	lsrs	r4, r4, #2
 8009386:	00a5      	lsls	r5, r4, #2
 8009388:	195b      	adds	r3, r3, r5
 800938a:	3b04      	subs	r3, #4
 800938c:	6819      	ldr	r1, [r3, #0]
 800938e:	2900      	cmp	r1, #0
 8009390:	d00f      	beq.n	80093b2 <__mdiff+0x11e>
 8009392:	6110      	str	r0, [r2, #16]
 8009394:	e797      	b.n	80092c6 <__mdiff+0x32>
 8009396:	ce02      	ldmia	r6!, {r1}
 8009398:	b28d      	uxth	r5, r1
 800939a:	19ed      	adds	r5, r5, r7
 800939c:	0c0f      	lsrs	r7, r1, #16
 800939e:	1429      	asrs	r1, r5, #16
 80093a0:	1879      	adds	r1, r7, r1
 80093a2:	140f      	asrs	r7, r1, #16
 80093a4:	b2ad      	uxth	r5, r5
 80093a6:	0409      	lsls	r1, r1, #16
 80093a8:	430d      	orrs	r5, r1
 80093aa:	4661      	mov	r1, ip
 80093ac:	c120      	stmia	r1!, {r5}
 80093ae:	468c      	mov	ip, r1
 80093b0:	e7dd      	b.n	800936e <__mdiff+0xda>
 80093b2:	3801      	subs	r0, #1
 80093b4:	e7e9      	b.n	800938a <__mdiff+0xf6>
 80093b6:	46c0      	nop			; (mov r8, r8)
 80093b8:	0800a25f 	.word	0x0800a25f
 80093bc:	00000232 	.word	0x00000232
 80093c0:	0800a2d0 	.word	0x0800a2d0

080093c4 <__d2b>:
 80093c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093c6:	2101      	movs	r1, #1
 80093c8:	0014      	movs	r4, r2
 80093ca:	001e      	movs	r6, r3
 80093cc:	9f08      	ldr	r7, [sp, #32]
 80093ce:	f7ff fcc1 	bl	8008d54 <_Balloc>
 80093d2:	1e05      	subs	r5, r0, #0
 80093d4:	d105      	bne.n	80093e2 <__d2b+0x1e>
 80093d6:	0002      	movs	r2, r0
 80093d8:	4b26      	ldr	r3, [pc, #152]	; (8009474 <__d2b+0xb0>)
 80093da:	4927      	ldr	r1, [pc, #156]	; (8009478 <__d2b+0xb4>)
 80093dc:	4827      	ldr	r0, [pc, #156]	; (800947c <__d2b+0xb8>)
 80093de:	f000 fc99 	bl	8009d14 <__assert_func>
 80093e2:	0333      	lsls	r3, r6, #12
 80093e4:	0076      	lsls	r6, r6, #1
 80093e6:	0b1b      	lsrs	r3, r3, #12
 80093e8:	0d76      	lsrs	r6, r6, #21
 80093ea:	d124      	bne.n	8009436 <__d2b+0x72>
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	2c00      	cmp	r4, #0
 80093f0:	d027      	beq.n	8009442 <__d2b+0x7e>
 80093f2:	4668      	mov	r0, sp
 80093f4:	9400      	str	r4, [sp, #0]
 80093f6:	f7ff fd73 	bl	8008ee0 <__lo0bits>
 80093fa:	9c00      	ldr	r4, [sp, #0]
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d01e      	beq.n	800943e <__d2b+0x7a>
 8009400:	9b01      	ldr	r3, [sp, #4]
 8009402:	2120      	movs	r1, #32
 8009404:	001a      	movs	r2, r3
 8009406:	1a09      	subs	r1, r1, r0
 8009408:	408a      	lsls	r2, r1
 800940a:	40c3      	lsrs	r3, r0
 800940c:	4322      	orrs	r2, r4
 800940e:	616a      	str	r2, [r5, #20]
 8009410:	9301      	str	r3, [sp, #4]
 8009412:	9c01      	ldr	r4, [sp, #4]
 8009414:	61ac      	str	r4, [r5, #24]
 8009416:	1e63      	subs	r3, r4, #1
 8009418:	419c      	sbcs	r4, r3
 800941a:	3401      	adds	r4, #1
 800941c:	612c      	str	r4, [r5, #16]
 800941e:	2e00      	cmp	r6, #0
 8009420:	d018      	beq.n	8009454 <__d2b+0x90>
 8009422:	4b17      	ldr	r3, [pc, #92]	; (8009480 <__d2b+0xbc>)
 8009424:	18f6      	adds	r6, r6, r3
 8009426:	2335      	movs	r3, #53	; 0x35
 8009428:	1836      	adds	r6, r6, r0
 800942a:	1a18      	subs	r0, r3, r0
 800942c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800942e:	603e      	str	r6, [r7, #0]
 8009430:	6018      	str	r0, [r3, #0]
 8009432:	0028      	movs	r0, r5
 8009434:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009436:	2280      	movs	r2, #128	; 0x80
 8009438:	0352      	lsls	r2, r2, #13
 800943a:	4313      	orrs	r3, r2
 800943c:	e7d6      	b.n	80093ec <__d2b+0x28>
 800943e:	616c      	str	r4, [r5, #20]
 8009440:	e7e7      	b.n	8009412 <__d2b+0x4e>
 8009442:	a801      	add	r0, sp, #4
 8009444:	f7ff fd4c 	bl	8008ee0 <__lo0bits>
 8009448:	2401      	movs	r4, #1
 800944a:	9b01      	ldr	r3, [sp, #4]
 800944c:	612c      	str	r4, [r5, #16]
 800944e:	616b      	str	r3, [r5, #20]
 8009450:	3020      	adds	r0, #32
 8009452:	e7e4      	b.n	800941e <__d2b+0x5a>
 8009454:	4b0b      	ldr	r3, [pc, #44]	; (8009484 <__d2b+0xc0>)
 8009456:	18c0      	adds	r0, r0, r3
 8009458:	4b0b      	ldr	r3, [pc, #44]	; (8009488 <__d2b+0xc4>)
 800945a:	6038      	str	r0, [r7, #0]
 800945c:	18e3      	adds	r3, r4, r3
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	18eb      	adds	r3, r5, r3
 8009462:	6958      	ldr	r0, [r3, #20]
 8009464:	f7ff fd22 	bl	8008eac <__hi0bits>
 8009468:	0164      	lsls	r4, r4, #5
 800946a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800946c:	1a24      	subs	r4, r4, r0
 800946e:	601c      	str	r4, [r3, #0]
 8009470:	e7df      	b.n	8009432 <__d2b+0x6e>
 8009472:	46c0      	nop			; (mov r8, r8)
 8009474:	0800a25f 	.word	0x0800a25f
 8009478:	0000030a 	.word	0x0000030a
 800947c:	0800a2d0 	.word	0x0800a2d0
 8009480:	fffffbcd 	.word	0xfffffbcd
 8009484:	fffffbce 	.word	0xfffffbce
 8009488:	3fffffff 	.word	0x3fffffff

0800948c <_calloc_r>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	0c13      	lsrs	r3, r2, #16
 8009490:	0c0d      	lsrs	r5, r1, #16
 8009492:	d11e      	bne.n	80094d2 <_calloc_r+0x46>
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10c      	bne.n	80094b2 <_calloc_r+0x26>
 8009498:	b289      	uxth	r1, r1
 800949a:	b294      	uxth	r4, r2
 800949c:	434c      	muls	r4, r1
 800949e:	0021      	movs	r1, r4
 80094a0:	f000 f88c 	bl	80095bc <_malloc_r>
 80094a4:	1e05      	subs	r5, r0, #0
 80094a6:	d01b      	beq.n	80094e0 <_calloc_r+0x54>
 80094a8:	0022      	movs	r2, r4
 80094aa:	2100      	movs	r1, #0
 80094ac:	f7fd fc72 	bl	8006d94 <memset>
 80094b0:	e016      	b.n	80094e0 <_calloc_r+0x54>
 80094b2:	1c1d      	adds	r5, r3, #0
 80094b4:	1c0b      	adds	r3, r1, #0
 80094b6:	b292      	uxth	r2, r2
 80094b8:	b289      	uxth	r1, r1
 80094ba:	b29c      	uxth	r4, r3
 80094bc:	4351      	muls	r1, r2
 80094be:	b2ab      	uxth	r3, r5
 80094c0:	4363      	muls	r3, r4
 80094c2:	0c0c      	lsrs	r4, r1, #16
 80094c4:	191c      	adds	r4, r3, r4
 80094c6:	0c22      	lsrs	r2, r4, #16
 80094c8:	d107      	bne.n	80094da <_calloc_r+0x4e>
 80094ca:	0424      	lsls	r4, r4, #16
 80094cc:	b289      	uxth	r1, r1
 80094ce:	430c      	orrs	r4, r1
 80094d0:	e7e5      	b.n	800949e <_calloc_r+0x12>
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <_calloc_r+0x4e>
 80094d6:	1c13      	adds	r3, r2, #0
 80094d8:	e7ed      	b.n	80094b6 <_calloc_r+0x2a>
 80094da:	230c      	movs	r3, #12
 80094dc:	2500      	movs	r5, #0
 80094de:	6003      	str	r3, [r0, #0]
 80094e0:	0028      	movs	r0, r5
 80094e2:	bd70      	pop	{r4, r5, r6, pc}

080094e4 <_free_r>:
 80094e4:	b570      	push	{r4, r5, r6, lr}
 80094e6:	0005      	movs	r5, r0
 80094e8:	2900      	cmp	r1, #0
 80094ea:	d010      	beq.n	800950e <_free_r+0x2a>
 80094ec:	1f0c      	subs	r4, r1, #4
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	da00      	bge.n	80094f6 <_free_r+0x12>
 80094f4:	18e4      	adds	r4, r4, r3
 80094f6:	0028      	movs	r0, r5
 80094f8:	f000 fcaa 	bl	8009e50 <__malloc_lock>
 80094fc:	4a1d      	ldr	r2, [pc, #116]	; (8009574 <_free_r+0x90>)
 80094fe:	6813      	ldr	r3, [r2, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d105      	bne.n	8009510 <_free_r+0x2c>
 8009504:	6063      	str	r3, [r4, #4]
 8009506:	6014      	str	r4, [r2, #0]
 8009508:	0028      	movs	r0, r5
 800950a:	f000 fca9 	bl	8009e60 <__malloc_unlock>
 800950e:	bd70      	pop	{r4, r5, r6, pc}
 8009510:	42a3      	cmp	r3, r4
 8009512:	d908      	bls.n	8009526 <_free_r+0x42>
 8009514:	6821      	ldr	r1, [r4, #0]
 8009516:	1860      	adds	r0, r4, r1
 8009518:	4283      	cmp	r3, r0
 800951a:	d1f3      	bne.n	8009504 <_free_r+0x20>
 800951c:	6818      	ldr	r0, [r3, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	1841      	adds	r1, r0, r1
 8009522:	6021      	str	r1, [r4, #0]
 8009524:	e7ee      	b.n	8009504 <_free_r+0x20>
 8009526:	001a      	movs	r2, r3
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <_free_r+0x4e>
 800952e:	42a3      	cmp	r3, r4
 8009530:	d9f9      	bls.n	8009526 <_free_r+0x42>
 8009532:	6811      	ldr	r1, [r2, #0]
 8009534:	1850      	adds	r0, r2, r1
 8009536:	42a0      	cmp	r0, r4
 8009538:	d10b      	bne.n	8009552 <_free_r+0x6e>
 800953a:	6820      	ldr	r0, [r4, #0]
 800953c:	1809      	adds	r1, r1, r0
 800953e:	1850      	adds	r0, r2, r1
 8009540:	6011      	str	r1, [r2, #0]
 8009542:	4283      	cmp	r3, r0
 8009544:	d1e0      	bne.n	8009508 <_free_r+0x24>
 8009546:	6818      	ldr	r0, [r3, #0]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	1841      	adds	r1, r0, r1
 800954c:	6011      	str	r1, [r2, #0]
 800954e:	6053      	str	r3, [r2, #4]
 8009550:	e7da      	b.n	8009508 <_free_r+0x24>
 8009552:	42a0      	cmp	r0, r4
 8009554:	d902      	bls.n	800955c <_free_r+0x78>
 8009556:	230c      	movs	r3, #12
 8009558:	602b      	str	r3, [r5, #0]
 800955a:	e7d5      	b.n	8009508 <_free_r+0x24>
 800955c:	6821      	ldr	r1, [r4, #0]
 800955e:	1860      	adds	r0, r4, r1
 8009560:	4283      	cmp	r3, r0
 8009562:	d103      	bne.n	800956c <_free_r+0x88>
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	1841      	adds	r1, r0, r1
 800956a:	6021      	str	r1, [r4, #0]
 800956c:	6063      	str	r3, [r4, #4]
 800956e:	6054      	str	r4, [r2, #4]
 8009570:	e7ca      	b.n	8009508 <_free_r+0x24>
 8009572:	46c0      	nop			; (mov r8, r8)
 8009574:	200003ec 	.word	0x200003ec

08009578 <sbrk_aligned>:
 8009578:	b570      	push	{r4, r5, r6, lr}
 800957a:	4e0f      	ldr	r6, [pc, #60]	; (80095b8 <sbrk_aligned+0x40>)
 800957c:	000d      	movs	r5, r1
 800957e:	6831      	ldr	r1, [r6, #0]
 8009580:	0004      	movs	r4, r0
 8009582:	2900      	cmp	r1, #0
 8009584:	d102      	bne.n	800958c <sbrk_aligned+0x14>
 8009586:	f000 fb53 	bl	8009c30 <_sbrk_r>
 800958a:	6030      	str	r0, [r6, #0]
 800958c:	0029      	movs	r1, r5
 800958e:	0020      	movs	r0, r4
 8009590:	f000 fb4e 	bl	8009c30 <_sbrk_r>
 8009594:	1c43      	adds	r3, r0, #1
 8009596:	d00a      	beq.n	80095ae <sbrk_aligned+0x36>
 8009598:	2303      	movs	r3, #3
 800959a:	1cc5      	adds	r5, r0, #3
 800959c:	439d      	bics	r5, r3
 800959e:	42a8      	cmp	r0, r5
 80095a0:	d007      	beq.n	80095b2 <sbrk_aligned+0x3a>
 80095a2:	1a29      	subs	r1, r5, r0
 80095a4:	0020      	movs	r0, r4
 80095a6:	f000 fb43 	bl	8009c30 <_sbrk_r>
 80095aa:	1c43      	adds	r3, r0, #1
 80095ac:	d101      	bne.n	80095b2 <sbrk_aligned+0x3a>
 80095ae:	2501      	movs	r5, #1
 80095b0:	426d      	negs	r5, r5
 80095b2:	0028      	movs	r0, r5
 80095b4:	bd70      	pop	{r4, r5, r6, pc}
 80095b6:	46c0      	nop			; (mov r8, r8)
 80095b8:	200003f0 	.word	0x200003f0

080095bc <_malloc_r>:
 80095bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095be:	2203      	movs	r2, #3
 80095c0:	1ccb      	adds	r3, r1, #3
 80095c2:	4393      	bics	r3, r2
 80095c4:	3308      	adds	r3, #8
 80095c6:	0006      	movs	r6, r0
 80095c8:	001f      	movs	r7, r3
 80095ca:	2b0c      	cmp	r3, #12
 80095cc:	d232      	bcs.n	8009634 <_malloc_r+0x78>
 80095ce:	270c      	movs	r7, #12
 80095d0:	42b9      	cmp	r1, r7
 80095d2:	d831      	bhi.n	8009638 <_malloc_r+0x7c>
 80095d4:	0030      	movs	r0, r6
 80095d6:	f000 fc3b 	bl	8009e50 <__malloc_lock>
 80095da:	4d32      	ldr	r5, [pc, #200]	; (80096a4 <_malloc_r+0xe8>)
 80095dc:	682b      	ldr	r3, [r5, #0]
 80095de:	001c      	movs	r4, r3
 80095e0:	2c00      	cmp	r4, #0
 80095e2:	d12e      	bne.n	8009642 <_malloc_r+0x86>
 80095e4:	0039      	movs	r1, r7
 80095e6:	0030      	movs	r0, r6
 80095e8:	f7ff ffc6 	bl	8009578 <sbrk_aligned>
 80095ec:	0004      	movs	r4, r0
 80095ee:	1c43      	adds	r3, r0, #1
 80095f0:	d11e      	bne.n	8009630 <_malloc_r+0x74>
 80095f2:	682c      	ldr	r4, [r5, #0]
 80095f4:	0025      	movs	r5, r4
 80095f6:	2d00      	cmp	r5, #0
 80095f8:	d14a      	bne.n	8009690 <_malloc_r+0xd4>
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	0029      	movs	r1, r5
 80095fe:	18e3      	adds	r3, r4, r3
 8009600:	0030      	movs	r0, r6
 8009602:	9301      	str	r3, [sp, #4]
 8009604:	f000 fb14 	bl	8009c30 <_sbrk_r>
 8009608:	9b01      	ldr	r3, [sp, #4]
 800960a:	4283      	cmp	r3, r0
 800960c:	d143      	bne.n	8009696 <_malloc_r+0xda>
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	3703      	adds	r7, #3
 8009612:	1aff      	subs	r7, r7, r3
 8009614:	2303      	movs	r3, #3
 8009616:	439f      	bics	r7, r3
 8009618:	3708      	adds	r7, #8
 800961a:	2f0c      	cmp	r7, #12
 800961c:	d200      	bcs.n	8009620 <_malloc_r+0x64>
 800961e:	270c      	movs	r7, #12
 8009620:	0039      	movs	r1, r7
 8009622:	0030      	movs	r0, r6
 8009624:	f7ff ffa8 	bl	8009578 <sbrk_aligned>
 8009628:	1c43      	adds	r3, r0, #1
 800962a:	d034      	beq.n	8009696 <_malloc_r+0xda>
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	19df      	adds	r7, r3, r7
 8009630:	6027      	str	r7, [r4, #0]
 8009632:	e013      	b.n	800965c <_malloc_r+0xa0>
 8009634:	2b00      	cmp	r3, #0
 8009636:	dacb      	bge.n	80095d0 <_malloc_r+0x14>
 8009638:	230c      	movs	r3, #12
 800963a:	2500      	movs	r5, #0
 800963c:	6033      	str	r3, [r6, #0]
 800963e:	0028      	movs	r0, r5
 8009640:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009642:	6822      	ldr	r2, [r4, #0]
 8009644:	1bd1      	subs	r1, r2, r7
 8009646:	d420      	bmi.n	800968a <_malloc_r+0xce>
 8009648:	290b      	cmp	r1, #11
 800964a:	d917      	bls.n	800967c <_malloc_r+0xc0>
 800964c:	19e2      	adds	r2, r4, r7
 800964e:	6027      	str	r7, [r4, #0]
 8009650:	42a3      	cmp	r3, r4
 8009652:	d111      	bne.n	8009678 <_malloc_r+0xbc>
 8009654:	602a      	str	r2, [r5, #0]
 8009656:	6863      	ldr	r3, [r4, #4]
 8009658:	6011      	str	r1, [r2, #0]
 800965a:	6053      	str	r3, [r2, #4]
 800965c:	0030      	movs	r0, r6
 800965e:	0025      	movs	r5, r4
 8009660:	f000 fbfe 	bl	8009e60 <__malloc_unlock>
 8009664:	2207      	movs	r2, #7
 8009666:	350b      	adds	r5, #11
 8009668:	1d23      	adds	r3, r4, #4
 800966a:	4395      	bics	r5, r2
 800966c:	1aea      	subs	r2, r5, r3
 800966e:	429d      	cmp	r5, r3
 8009670:	d0e5      	beq.n	800963e <_malloc_r+0x82>
 8009672:	1b5b      	subs	r3, r3, r5
 8009674:	50a3      	str	r3, [r4, r2]
 8009676:	e7e2      	b.n	800963e <_malloc_r+0x82>
 8009678:	605a      	str	r2, [r3, #4]
 800967a:	e7ec      	b.n	8009656 <_malloc_r+0x9a>
 800967c:	6862      	ldr	r2, [r4, #4]
 800967e:	42a3      	cmp	r3, r4
 8009680:	d101      	bne.n	8009686 <_malloc_r+0xca>
 8009682:	602a      	str	r2, [r5, #0]
 8009684:	e7ea      	b.n	800965c <_malloc_r+0xa0>
 8009686:	605a      	str	r2, [r3, #4]
 8009688:	e7e8      	b.n	800965c <_malloc_r+0xa0>
 800968a:	0023      	movs	r3, r4
 800968c:	6864      	ldr	r4, [r4, #4]
 800968e:	e7a7      	b.n	80095e0 <_malloc_r+0x24>
 8009690:	002c      	movs	r4, r5
 8009692:	686d      	ldr	r5, [r5, #4]
 8009694:	e7af      	b.n	80095f6 <_malloc_r+0x3a>
 8009696:	230c      	movs	r3, #12
 8009698:	0030      	movs	r0, r6
 800969a:	6033      	str	r3, [r6, #0]
 800969c:	f000 fbe0 	bl	8009e60 <__malloc_unlock>
 80096a0:	e7cd      	b.n	800963e <_malloc_r+0x82>
 80096a2:	46c0      	nop			; (mov r8, r8)
 80096a4:	200003ec 	.word	0x200003ec

080096a8 <__ssputs_r>:
 80096a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096aa:	688e      	ldr	r6, [r1, #8]
 80096ac:	b085      	sub	sp, #20
 80096ae:	0007      	movs	r7, r0
 80096b0:	000c      	movs	r4, r1
 80096b2:	9203      	str	r2, [sp, #12]
 80096b4:	9301      	str	r3, [sp, #4]
 80096b6:	429e      	cmp	r6, r3
 80096b8:	d83c      	bhi.n	8009734 <__ssputs_r+0x8c>
 80096ba:	2390      	movs	r3, #144	; 0x90
 80096bc:	898a      	ldrh	r2, [r1, #12]
 80096be:	00db      	lsls	r3, r3, #3
 80096c0:	421a      	tst	r2, r3
 80096c2:	d034      	beq.n	800972e <__ssputs_r+0x86>
 80096c4:	6909      	ldr	r1, [r1, #16]
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	6960      	ldr	r0, [r4, #20]
 80096ca:	1a5b      	subs	r3, r3, r1
 80096cc:	9302      	str	r3, [sp, #8]
 80096ce:	2303      	movs	r3, #3
 80096d0:	4343      	muls	r3, r0
 80096d2:	0fdd      	lsrs	r5, r3, #31
 80096d4:	18ed      	adds	r5, r5, r3
 80096d6:	9b01      	ldr	r3, [sp, #4]
 80096d8:	9802      	ldr	r0, [sp, #8]
 80096da:	3301      	adds	r3, #1
 80096dc:	181b      	adds	r3, r3, r0
 80096de:	106d      	asrs	r5, r5, #1
 80096e0:	42ab      	cmp	r3, r5
 80096e2:	d900      	bls.n	80096e6 <__ssputs_r+0x3e>
 80096e4:	001d      	movs	r5, r3
 80096e6:	0553      	lsls	r3, r2, #21
 80096e8:	d532      	bpl.n	8009750 <__ssputs_r+0xa8>
 80096ea:	0029      	movs	r1, r5
 80096ec:	0038      	movs	r0, r7
 80096ee:	f7ff ff65 	bl	80095bc <_malloc_r>
 80096f2:	1e06      	subs	r6, r0, #0
 80096f4:	d109      	bne.n	800970a <__ssputs_r+0x62>
 80096f6:	230c      	movs	r3, #12
 80096f8:	603b      	str	r3, [r7, #0]
 80096fa:	2340      	movs	r3, #64	; 0x40
 80096fc:	2001      	movs	r0, #1
 80096fe:	89a2      	ldrh	r2, [r4, #12]
 8009700:	4240      	negs	r0, r0
 8009702:	4313      	orrs	r3, r2
 8009704:	81a3      	strh	r3, [r4, #12]
 8009706:	b005      	add	sp, #20
 8009708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800970a:	9a02      	ldr	r2, [sp, #8]
 800970c:	6921      	ldr	r1, [r4, #16]
 800970e:	f7ff fb18 	bl	8008d42 <memcpy>
 8009712:	89a3      	ldrh	r3, [r4, #12]
 8009714:	4a14      	ldr	r2, [pc, #80]	; (8009768 <__ssputs_r+0xc0>)
 8009716:	401a      	ands	r2, r3
 8009718:	2380      	movs	r3, #128	; 0x80
 800971a:	4313      	orrs	r3, r2
 800971c:	81a3      	strh	r3, [r4, #12]
 800971e:	9b02      	ldr	r3, [sp, #8]
 8009720:	6126      	str	r6, [r4, #16]
 8009722:	18f6      	adds	r6, r6, r3
 8009724:	6026      	str	r6, [r4, #0]
 8009726:	6165      	str	r5, [r4, #20]
 8009728:	9e01      	ldr	r6, [sp, #4]
 800972a:	1aed      	subs	r5, r5, r3
 800972c:	60a5      	str	r5, [r4, #8]
 800972e:	9b01      	ldr	r3, [sp, #4]
 8009730:	429e      	cmp	r6, r3
 8009732:	d900      	bls.n	8009736 <__ssputs_r+0x8e>
 8009734:	9e01      	ldr	r6, [sp, #4]
 8009736:	0032      	movs	r2, r6
 8009738:	9903      	ldr	r1, [sp, #12]
 800973a:	6820      	ldr	r0, [r4, #0]
 800973c:	f000 fb74 	bl	8009e28 <memmove>
 8009740:	68a3      	ldr	r3, [r4, #8]
 8009742:	2000      	movs	r0, #0
 8009744:	1b9b      	subs	r3, r3, r6
 8009746:	60a3      	str	r3, [r4, #8]
 8009748:	6823      	ldr	r3, [r4, #0]
 800974a:	199e      	adds	r6, r3, r6
 800974c:	6026      	str	r6, [r4, #0]
 800974e:	e7da      	b.n	8009706 <__ssputs_r+0x5e>
 8009750:	002a      	movs	r2, r5
 8009752:	0038      	movs	r0, r7
 8009754:	f000 fb8c 	bl	8009e70 <_realloc_r>
 8009758:	1e06      	subs	r6, r0, #0
 800975a:	d1e0      	bne.n	800971e <__ssputs_r+0x76>
 800975c:	0038      	movs	r0, r7
 800975e:	6921      	ldr	r1, [r4, #16]
 8009760:	f7ff fec0 	bl	80094e4 <_free_r>
 8009764:	e7c7      	b.n	80096f6 <__ssputs_r+0x4e>
 8009766:	46c0      	nop			; (mov r8, r8)
 8009768:	fffffb7f 	.word	0xfffffb7f

0800976c <_svfiprintf_r>:
 800976c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800976e:	b0a1      	sub	sp, #132	; 0x84
 8009770:	9003      	str	r0, [sp, #12]
 8009772:	001d      	movs	r5, r3
 8009774:	898b      	ldrh	r3, [r1, #12]
 8009776:	000f      	movs	r7, r1
 8009778:	0016      	movs	r6, r2
 800977a:	061b      	lsls	r3, r3, #24
 800977c:	d511      	bpl.n	80097a2 <_svfiprintf_r+0x36>
 800977e:	690b      	ldr	r3, [r1, #16]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10e      	bne.n	80097a2 <_svfiprintf_r+0x36>
 8009784:	2140      	movs	r1, #64	; 0x40
 8009786:	f7ff ff19 	bl	80095bc <_malloc_r>
 800978a:	6038      	str	r0, [r7, #0]
 800978c:	6138      	str	r0, [r7, #16]
 800978e:	2800      	cmp	r0, #0
 8009790:	d105      	bne.n	800979e <_svfiprintf_r+0x32>
 8009792:	230c      	movs	r3, #12
 8009794:	9a03      	ldr	r2, [sp, #12]
 8009796:	3801      	subs	r0, #1
 8009798:	6013      	str	r3, [r2, #0]
 800979a:	b021      	add	sp, #132	; 0x84
 800979c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800979e:	2340      	movs	r3, #64	; 0x40
 80097a0:	617b      	str	r3, [r7, #20]
 80097a2:	2300      	movs	r3, #0
 80097a4:	ac08      	add	r4, sp, #32
 80097a6:	6163      	str	r3, [r4, #20]
 80097a8:	3320      	adds	r3, #32
 80097aa:	7663      	strb	r3, [r4, #25]
 80097ac:	3310      	adds	r3, #16
 80097ae:	76a3      	strb	r3, [r4, #26]
 80097b0:	9507      	str	r5, [sp, #28]
 80097b2:	0035      	movs	r5, r6
 80097b4:	782b      	ldrb	r3, [r5, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <_svfiprintf_r+0x52>
 80097ba:	2b25      	cmp	r3, #37	; 0x25
 80097bc:	d147      	bne.n	800984e <_svfiprintf_r+0xe2>
 80097be:	1bab      	subs	r3, r5, r6
 80097c0:	9305      	str	r3, [sp, #20]
 80097c2:	42b5      	cmp	r5, r6
 80097c4:	d00c      	beq.n	80097e0 <_svfiprintf_r+0x74>
 80097c6:	0032      	movs	r2, r6
 80097c8:	0039      	movs	r1, r7
 80097ca:	9803      	ldr	r0, [sp, #12]
 80097cc:	f7ff ff6c 	bl	80096a8 <__ssputs_r>
 80097d0:	1c43      	adds	r3, r0, #1
 80097d2:	d100      	bne.n	80097d6 <_svfiprintf_r+0x6a>
 80097d4:	e0ae      	b.n	8009934 <_svfiprintf_r+0x1c8>
 80097d6:	6962      	ldr	r2, [r4, #20]
 80097d8:	9b05      	ldr	r3, [sp, #20]
 80097da:	4694      	mov	ip, r2
 80097dc:	4463      	add	r3, ip
 80097de:	6163      	str	r3, [r4, #20]
 80097e0:	782b      	ldrb	r3, [r5, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d100      	bne.n	80097e8 <_svfiprintf_r+0x7c>
 80097e6:	e0a5      	b.n	8009934 <_svfiprintf_r+0x1c8>
 80097e8:	2201      	movs	r2, #1
 80097ea:	2300      	movs	r3, #0
 80097ec:	4252      	negs	r2, r2
 80097ee:	6062      	str	r2, [r4, #4]
 80097f0:	a904      	add	r1, sp, #16
 80097f2:	3254      	adds	r2, #84	; 0x54
 80097f4:	1852      	adds	r2, r2, r1
 80097f6:	1c6e      	adds	r6, r5, #1
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	60e3      	str	r3, [r4, #12]
 80097fc:	60a3      	str	r3, [r4, #8]
 80097fe:	7013      	strb	r3, [r2, #0]
 8009800:	65a3      	str	r3, [r4, #88]	; 0x58
 8009802:	2205      	movs	r2, #5
 8009804:	7831      	ldrb	r1, [r6, #0]
 8009806:	4854      	ldr	r0, [pc, #336]	; (8009958 <_svfiprintf_r+0x1ec>)
 8009808:	f7ff fa90 	bl	8008d2c <memchr>
 800980c:	1c75      	adds	r5, r6, #1
 800980e:	2800      	cmp	r0, #0
 8009810:	d11f      	bne.n	8009852 <_svfiprintf_r+0xe6>
 8009812:	6822      	ldr	r2, [r4, #0]
 8009814:	06d3      	lsls	r3, r2, #27
 8009816:	d504      	bpl.n	8009822 <_svfiprintf_r+0xb6>
 8009818:	2353      	movs	r3, #83	; 0x53
 800981a:	a904      	add	r1, sp, #16
 800981c:	185b      	adds	r3, r3, r1
 800981e:	2120      	movs	r1, #32
 8009820:	7019      	strb	r1, [r3, #0]
 8009822:	0713      	lsls	r3, r2, #28
 8009824:	d504      	bpl.n	8009830 <_svfiprintf_r+0xc4>
 8009826:	2353      	movs	r3, #83	; 0x53
 8009828:	a904      	add	r1, sp, #16
 800982a:	185b      	adds	r3, r3, r1
 800982c:	212b      	movs	r1, #43	; 0x2b
 800982e:	7019      	strb	r1, [r3, #0]
 8009830:	7833      	ldrb	r3, [r6, #0]
 8009832:	2b2a      	cmp	r3, #42	; 0x2a
 8009834:	d016      	beq.n	8009864 <_svfiprintf_r+0xf8>
 8009836:	0035      	movs	r5, r6
 8009838:	2100      	movs	r1, #0
 800983a:	200a      	movs	r0, #10
 800983c:	68e3      	ldr	r3, [r4, #12]
 800983e:	782a      	ldrb	r2, [r5, #0]
 8009840:	1c6e      	adds	r6, r5, #1
 8009842:	3a30      	subs	r2, #48	; 0x30
 8009844:	2a09      	cmp	r2, #9
 8009846:	d94e      	bls.n	80098e6 <_svfiprintf_r+0x17a>
 8009848:	2900      	cmp	r1, #0
 800984a:	d111      	bne.n	8009870 <_svfiprintf_r+0x104>
 800984c:	e017      	b.n	800987e <_svfiprintf_r+0x112>
 800984e:	3501      	adds	r5, #1
 8009850:	e7b0      	b.n	80097b4 <_svfiprintf_r+0x48>
 8009852:	4b41      	ldr	r3, [pc, #260]	; (8009958 <_svfiprintf_r+0x1ec>)
 8009854:	6822      	ldr	r2, [r4, #0]
 8009856:	1ac0      	subs	r0, r0, r3
 8009858:	2301      	movs	r3, #1
 800985a:	4083      	lsls	r3, r0
 800985c:	4313      	orrs	r3, r2
 800985e:	002e      	movs	r6, r5
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	e7ce      	b.n	8009802 <_svfiprintf_r+0x96>
 8009864:	9b07      	ldr	r3, [sp, #28]
 8009866:	1d19      	adds	r1, r3, #4
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	9107      	str	r1, [sp, #28]
 800986c:	2b00      	cmp	r3, #0
 800986e:	db01      	blt.n	8009874 <_svfiprintf_r+0x108>
 8009870:	930b      	str	r3, [sp, #44]	; 0x2c
 8009872:	e004      	b.n	800987e <_svfiprintf_r+0x112>
 8009874:	425b      	negs	r3, r3
 8009876:	60e3      	str	r3, [r4, #12]
 8009878:	2302      	movs	r3, #2
 800987a:	4313      	orrs	r3, r2
 800987c:	6023      	str	r3, [r4, #0]
 800987e:	782b      	ldrb	r3, [r5, #0]
 8009880:	2b2e      	cmp	r3, #46	; 0x2e
 8009882:	d10a      	bne.n	800989a <_svfiprintf_r+0x12e>
 8009884:	786b      	ldrb	r3, [r5, #1]
 8009886:	2b2a      	cmp	r3, #42	; 0x2a
 8009888:	d135      	bne.n	80098f6 <_svfiprintf_r+0x18a>
 800988a:	9b07      	ldr	r3, [sp, #28]
 800988c:	3502      	adds	r5, #2
 800988e:	1d1a      	adds	r2, r3, #4
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	9207      	str	r2, [sp, #28]
 8009894:	2b00      	cmp	r3, #0
 8009896:	db2b      	blt.n	80098f0 <_svfiprintf_r+0x184>
 8009898:	9309      	str	r3, [sp, #36]	; 0x24
 800989a:	4e30      	ldr	r6, [pc, #192]	; (800995c <_svfiprintf_r+0x1f0>)
 800989c:	2203      	movs	r2, #3
 800989e:	0030      	movs	r0, r6
 80098a0:	7829      	ldrb	r1, [r5, #0]
 80098a2:	f7ff fa43 	bl	8008d2c <memchr>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d006      	beq.n	80098b8 <_svfiprintf_r+0x14c>
 80098aa:	2340      	movs	r3, #64	; 0x40
 80098ac:	1b80      	subs	r0, r0, r6
 80098ae:	4083      	lsls	r3, r0
 80098b0:	6822      	ldr	r2, [r4, #0]
 80098b2:	3501      	adds	r5, #1
 80098b4:	4313      	orrs	r3, r2
 80098b6:	6023      	str	r3, [r4, #0]
 80098b8:	7829      	ldrb	r1, [r5, #0]
 80098ba:	2206      	movs	r2, #6
 80098bc:	4828      	ldr	r0, [pc, #160]	; (8009960 <_svfiprintf_r+0x1f4>)
 80098be:	1c6e      	adds	r6, r5, #1
 80098c0:	7621      	strb	r1, [r4, #24]
 80098c2:	f7ff fa33 	bl	8008d2c <memchr>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d03c      	beq.n	8009944 <_svfiprintf_r+0x1d8>
 80098ca:	4b26      	ldr	r3, [pc, #152]	; (8009964 <_svfiprintf_r+0x1f8>)
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d125      	bne.n	800991c <_svfiprintf_r+0x1b0>
 80098d0:	2207      	movs	r2, #7
 80098d2:	9b07      	ldr	r3, [sp, #28]
 80098d4:	3307      	adds	r3, #7
 80098d6:	4393      	bics	r3, r2
 80098d8:	3308      	adds	r3, #8
 80098da:	9307      	str	r3, [sp, #28]
 80098dc:	6963      	ldr	r3, [r4, #20]
 80098de:	9a04      	ldr	r2, [sp, #16]
 80098e0:	189b      	adds	r3, r3, r2
 80098e2:	6163      	str	r3, [r4, #20]
 80098e4:	e765      	b.n	80097b2 <_svfiprintf_r+0x46>
 80098e6:	4343      	muls	r3, r0
 80098e8:	0035      	movs	r5, r6
 80098ea:	2101      	movs	r1, #1
 80098ec:	189b      	adds	r3, r3, r2
 80098ee:	e7a6      	b.n	800983e <_svfiprintf_r+0xd2>
 80098f0:	2301      	movs	r3, #1
 80098f2:	425b      	negs	r3, r3
 80098f4:	e7d0      	b.n	8009898 <_svfiprintf_r+0x12c>
 80098f6:	2300      	movs	r3, #0
 80098f8:	200a      	movs	r0, #10
 80098fa:	001a      	movs	r2, r3
 80098fc:	3501      	adds	r5, #1
 80098fe:	6063      	str	r3, [r4, #4]
 8009900:	7829      	ldrb	r1, [r5, #0]
 8009902:	1c6e      	adds	r6, r5, #1
 8009904:	3930      	subs	r1, #48	; 0x30
 8009906:	2909      	cmp	r1, #9
 8009908:	d903      	bls.n	8009912 <_svfiprintf_r+0x1a6>
 800990a:	2b00      	cmp	r3, #0
 800990c:	d0c5      	beq.n	800989a <_svfiprintf_r+0x12e>
 800990e:	9209      	str	r2, [sp, #36]	; 0x24
 8009910:	e7c3      	b.n	800989a <_svfiprintf_r+0x12e>
 8009912:	4342      	muls	r2, r0
 8009914:	0035      	movs	r5, r6
 8009916:	2301      	movs	r3, #1
 8009918:	1852      	adds	r2, r2, r1
 800991a:	e7f1      	b.n	8009900 <_svfiprintf_r+0x194>
 800991c:	ab07      	add	r3, sp, #28
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	003a      	movs	r2, r7
 8009922:	0021      	movs	r1, r4
 8009924:	4b10      	ldr	r3, [pc, #64]	; (8009968 <_svfiprintf_r+0x1fc>)
 8009926:	9803      	ldr	r0, [sp, #12]
 8009928:	f7fd fae6 	bl	8006ef8 <_printf_float>
 800992c:	9004      	str	r0, [sp, #16]
 800992e:	9b04      	ldr	r3, [sp, #16]
 8009930:	3301      	adds	r3, #1
 8009932:	d1d3      	bne.n	80098dc <_svfiprintf_r+0x170>
 8009934:	89bb      	ldrh	r3, [r7, #12]
 8009936:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009938:	065b      	lsls	r3, r3, #25
 800993a:	d400      	bmi.n	800993e <_svfiprintf_r+0x1d2>
 800993c:	e72d      	b.n	800979a <_svfiprintf_r+0x2e>
 800993e:	2001      	movs	r0, #1
 8009940:	4240      	negs	r0, r0
 8009942:	e72a      	b.n	800979a <_svfiprintf_r+0x2e>
 8009944:	ab07      	add	r3, sp, #28
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	003a      	movs	r2, r7
 800994a:	0021      	movs	r1, r4
 800994c:	4b06      	ldr	r3, [pc, #24]	; (8009968 <_svfiprintf_r+0x1fc>)
 800994e:	9803      	ldr	r0, [sp, #12]
 8009950:	f7fd fd84 	bl	800745c <_printf_i>
 8009954:	e7ea      	b.n	800992c <_svfiprintf_r+0x1c0>
 8009956:	46c0      	nop			; (mov r8, r8)
 8009958:	0800a42c 	.word	0x0800a42c
 800995c:	0800a432 	.word	0x0800a432
 8009960:	0800a436 	.word	0x0800a436
 8009964:	08006ef9 	.word	0x08006ef9
 8009968:	080096a9 	.word	0x080096a9

0800996c <__sfputc_r>:
 800996c:	6893      	ldr	r3, [r2, #8]
 800996e:	b510      	push	{r4, lr}
 8009970:	3b01      	subs	r3, #1
 8009972:	6093      	str	r3, [r2, #8]
 8009974:	2b00      	cmp	r3, #0
 8009976:	da04      	bge.n	8009982 <__sfputc_r+0x16>
 8009978:	6994      	ldr	r4, [r2, #24]
 800997a:	42a3      	cmp	r3, r4
 800997c:	db07      	blt.n	800998e <__sfputc_r+0x22>
 800997e:	290a      	cmp	r1, #10
 8009980:	d005      	beq.n	800998e <__sfputc_r+0x22>
 8009982:	6813      	ldr	r3, [r2, #0]
 8009984:	1c58      	adds	r0, r3, #1
 8009986:	6010      	str	r0, [r2, #0]
 8009988:	7019      	strb	r1, [r3, #0]
 800998a:	0008      	movs	r0, r1
 800998c:	bd10      	pop	{r4, pc}
 800998e:	f7fe f80d 	bl	80079ac <__swbuf_r>
 8009992:	0001      	movs	r1, r0
 8009994:	e7f9      	b.n	800998a <__sfputc_r+0x1e>

08009996 <__sfputs_r>:
 8009996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009998:	0006      	movs	r6, r0
 800999a:	000f      	movs	r7, r1
 800999c:	0014      	movs	r4, r2
 800999e:	18d5      	adds	r5, r2, r3
 80099a0:	42ac      	cmp	r4, r5
 80099a2:	d101      	bne.n	80099a8 <__sfputs_r+0x12>
 80099a4:	2000      	movs	r0, #0
 80099a6:	e007      	b.n	80099b8 <__sfputs_r+0x22>
 80099a8:	7821      	ldrb	r1, [r4, #0]
 80099aa:	003a      	movs	r2, r7
 80099ac:	0030      	movs	r0, r6
 80099ae:	f7ff ffdd 	bl	800996c <__sfputc_r>
 80099b2:	3401      	adds	r4, #1
 80099b4:	1c43      	adds	r3, r0, #1
 80099b6:	d1f3      	bne.n	80099a0 <__sfputs_r+0xa>
 80099b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099bc <_vfiprintf_r>:
 80099bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099be:	b0a1      	sub	sp, #132	; 0x84
 80099c0:	0006      	movs	r6, r0
 80099c2:	000c      	movs	r4, r1
 80099c4:	001f      	movs	r7, r3
 80099c6:	9203      	str	r2, [sp, #12]
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d004      	beq.n	80099d6 <_vfiprintf_r+0x1a>
 80099cc:	6983      	ldr	r3, [r0, #24]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d101      	bne.n	80099d6 <_vfiprintf_r+0x1a>
 80099d2:	f7ff f88d 	bl	8008af0 <__sinit>
 80099d6:	4b8e      	ldr	r3, [pc, #568]	; (8009c10 <_vfiprintf_r+0x254>)
 80099d8:	429c      	cmp	r4, r3
 80099da:	d11c      	bne.n	8009a16 <_vfiprintf_r+0x5a>
 80099dc:	6874      	ldr	r4, [r6, #4]
 80099de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099e0:	07db      	lsls	r3, r3, #31
 80099e2:	d405      	bmi.n	80099f0 <_vfiprintf_r+0x34>
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	059b      	lsls	r3, r3, #22
 80099e8:	d402      	bmi.n	80099f0 <_vfiprintf_r+0x34>
 80099ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ec:	f7ff f925 	bl	8008c3a <__retarget_lock_acquire_recursive>
 80099f0:	89a3      	ldrh	r3, [r4, #12]
 80099f2:	071b      	lsls	r3, r3, #28
 80099f4:	d502      	bpl.n	80099fc <_vfiprintf_r+0x40>
 80099f6:	6923      	ldr	r3, [r4, #16]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d11d      	bne.n	8009a38 <_vfiprintf_r+0x7c>
 80099fc:	0021      	movs	r1, r4
 80099fe:	0030      	movs	r0, r6
 8009a00:	f7fe f82a 	bl	8007a58 <__swsetup_r>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d017      	beq.n	8009a38 <_vfiprintf_r+0x7c>
 8009a08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a0a:	07db      	lsls	r3, r3, #31
 8009a0c:	d50d      	bpl.n	8009a2a <_vfiprintf_r+0x6e>
 8009a0e:	2001      	movs	r0, #1
 8009a10:	4240      	negs	r0, r0
 8009a12:	b021      	add	sp, #132	; 0x84
 8009a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a16:	4b7f      	ldr	r3, [pc, #508]	; (8009c14 <_vfiprintf_r+0x258>)
 8009a18:	429c      	cmp	r4, r3
 8009a1a:	d101      	bne.n	8009a20 <_vfiprintf_r+0x64>
 8009a1c:	68b4      	ldr	r4, [r6, #8]
 8009a1e:	e7de      	b.n	80099de <_vfiprintf_r+0x22>
 8009a20:	4b7d      	ldr	r3, [pc, #500]	; (8009c18 <_vfiprintf_r+0x25c>)
 8009a22:	429c      	cmp	r4, r3
 8009a24:	d1db      	bne.n	80099de <_vfiprintf_r+0x22>
 8009a26:	68f4      	ldr	r4, [r6, #12]
 8009a28:	e7d9      	b.n	80099de <_vfiprintf_r+0x22>
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	059b      	lsls	r3, r3, #22
 8009a2e:	d4ee      	bmi.n	8009a0e <_vfiprintf_r+0x52>
 8009a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a32:	f7ff f903 	bl	8008c3c <__retarget_lock_release_recursive>
 8009a36:	e7ea      	b.n	8009a0e <_vfiprintf_r+0x52>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	ad08      	add	r5, sp, #32
 8009a3c:	616b      	str	r3, [r5, #20]
 8009a3e:	3320      	adds	r3, #32
 8009a40:	766b      	strb	r3, [r5, #25]
 8009a42:	3310      	adds	r3, #16
 8009a44:	76ab      	strb	r3, [r5, #26]
 8009a46:	9707      	str	r7, [sp, #28]
 8009a48:	9f03      	ldr	r7, [sp, #12]
 8009a4a:	783b      	ldrb	r3, [r7, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d001      	beq.n	8009a54 <_vfiprintf_r+0x98>
 8009a50:	2b25      	cmp	r3, #37	; 0x25
 8009a52:	d14e      	bne.n	8009af2 <_vfiprintf_r+0x136>
 8009a54:	9b03      	ldr	r3, [sp, #12]
 8009a56:	1afb      	subs	r3, r7, r3
 8009a58:	9305      	str	r3, [sp, #20]
 8009a5a:	9b03      	ldr	r3, [sp, #12]
 8009a5c:	429f      	cmp	r7, r3
 8009a5e:	d00d      	beq.n	8009a7c <_vfiprintf_r+0xc0>
 8009a60:	9b05      	ldr	r3, [sp, #20]
 8009a62:	0021      	movs	r1, r4
 8009a64:	0030      	movs	r0, r6
 8009a66:	9a03      	ldr	r2, [sp, #12]
 8009a68:	f7ff ff95 	bl	8009996 <__sfputs_r>
 8009a6c:	1c43      	adds	r3, r0, #1
 8009a6e:	d100      	bne.n	8009a72 <_vfiprintf_r+0xb6>
 8009a70:	e0b5      	b.n	8009bde <_vfiprintf_r+0x222>
 8009a72:	696a      	ldr	r2, [r5, #20]
 8009a74:	9b05      	ldr	r3, [sp, #20]
 8009a76:	4694      	mov	ip, r2
 8009a78:	4463      	add	r3, ip
 8009a7a:	616b      	str	r3, [r5, #20]
 8009a7c:	783b      	ldrb	r3, [r7, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d100      	bne.n	8009a84 <_vfiprintf_r+0xc8>
 8009a82:	e0ac      	b.n	8009bde <_vfiprintf_r+0x222>
 8009a84:	2201      	movs	r2, #1
 8009a86:	1c7b      	adds	r3, r7, #1
 8009a88:	9303      	str	r3, [sp, #12]
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	4252      	negs	r2, r2
 8009a8e:	606a      	str	r2, [r5, #4]
 8009a90:	a904      	add	r1, sp, #16
 8009a92:	3254      	adds	r2, #84	; 0x54
 8009a94:	1852      	adds	r2, r2, r1
 8009a96:	602b      	str	r3, [r5, #0]
 8009a98:	60eb      	str	r3, [r5, #12]
 8009a9a:	60ab      	str	r3, [r5, #8]
 8009a9c:	7013      	strb	r3, [r2, #0]
 8009a9e:	65ab      	str	r3, [r5, #88]	; 0x58
 8009aa0:	9b03      	ldr	r3, [sp, #12]
 8009aa2:	2205      	movs	r2, #5
 8009aa4:	7819      	ldrb	r1, [r3, #0]
 8009aa6:	485d      	ldr	r0, [pc, #372]	; (8009c1c <_vfiprintf_r+0x260>)
 8009aa8:	f7ff f940 	bl	8008d2c <memchr>
 8009aac:	9b03      	ldr	r3, [sp, #12]
 8009aae:	1c5f      	adds	r7, r3, #1
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d120      	bne.n	8009af6 <_vfiprintf_r+0x13a>
 8009ab4:	682a      	ldr	r2, [r5, #0]
 8009ab6:	06d3      	lsls	r3, r2, #27
 8009ab8:	d504      	bpl.n	8009ac4 <_vfiprintf_r+0x108>
 8009aba:	2353      	movs	r3, #83	; 0x53
 8009abc:	a904      	add	r1, sp, #16
 8009abe:	185b      	adds	r3, r3, r1
 8009ac0:	2120      	movs	r1, #32
 8009ac2:	7019      	strb	r1, [r3, #0]
 8009ac4:	0713      	lsls	r3, r2, #28
 8009ac6:	d504      	bpl.n	8009ad2 <_vfiprintf_r+0x116>
 8009ac8:	2353      	movs	r3, #83	; 0x53
 8009aca:	a904      	add	r1, sp, #16
 8009acc:	185b      	adds	r3, r3, r1
 8009ace:	212b      	movs	r1, #43	; 0x2b
 8009ad0:	7019      	strb	r1, [r3, #0]
 8009ad2:	9b03      	ldr	r3, [sp, #12]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ad8:	d016      	beq.n	8009b08 <_vfiprintf_r+0x14c>
 8009ada:	2100      	movs	r1, #0
 8009adc:	68eb      	ldr	r3, [r5, #12]
 8009ade:	9f03      	ldr	r7, [sp, #12]
 8009ae0:	783a      	ldrb	r2, [r7, #0]
 8009ae2:	1c78      	adds	r0, r7, #1
 8009ae4:	3a30      	subs	r2, #48	; 0x30
 8009ae6:	4684      	mov	ip, r0
 8009ae8:	2a09      	cmp	r2, #9
 8009aea:	d94f      	bls.n	8009b8c <_vfiprintf_r+0x1d0>
 8009aec:	2900      	cmp	r1, #0
 8009aee:	d111      	bne.n	8009b14 <_vfiprintf_r+0x158>
 8009af0:	e017      	b.n	8009b22 <_vfiprintf_r+0x166>
 8009af2:	3701      	adds	r7, #1
 8009af4:	e7a9      	b.n	8009a4a <_vfiprintf_r+0x8e>
 8009af6:	4b49      	ldr	r3, [pc, #292]	; (8009c1c <_vfiprintf_r+0x260>)
 8009af8:	682a      	ldr	r2, [r5, #0]
 8009afa:	1ac0      	subs	r0, r0, r3
 8009afc:	2301      	movs	r3, #1
 8009afe:	4083      	lsls	r3, r0
 8009b00:	4313      	orrs	r3, r2
 8009b02:	602b      	str	r3, [r5, #0]
 8009b04:	9703      	str	r7, [sp, #12]
 8009b06:	e7cb      	b.n	8009aa0 <_vfiprintf_r+0xe4>
 8009b08:	9b07      	ldr	r3, [sp, #28]
 8009b0a:	1d19      	adds	r1, r3, #4
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	9107      	str	r1, [sp, #28]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	db01      	blt.n	8009b18 <_vfiprintf_r+0x15c>
 8009b14:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b16:	e004      	b.n	8009b22 <_vfiprintf_r+0x166>
 8009b18:	425b      	negs	r3, r3
 8009b1a:	60eb      	str	r3, [r5, #12]
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	602b      	str	r3, [r5, #0]
 8009b22:	783b      	ldrb	r3, [r7, #0]
 8009b24:	2b2e      	cmp	r3, #46	; 0x2e
 8009b26:	d10a      	bne.n	8009b3e <_vfiprintf_r+0x182>
 8009b28:	787b      	ldrb	r3, [r7, #1]
 8009b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b2c:	d137      	bne.n	8009b9e <_vfiprintf_r+0x1e2>
 8009b2e:	9b07      	ldr	r3, [sp, #28]
 8009b30:	3702      	adds	r7, #2
 8009b32:	1d1a      	adds	r2, r3, #4
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	9207      	str	r2, [sp, #28]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	db2d      	blt.n	8009b98 <_vfiprintf_r+0x1dc>
 8009b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b3e:	2203      	movs	r2, #3
 8009b40:	7839      	ldrb	r1, [r7, #0]
 8009b42:	4837      	ldr	r0, [pc, #220]	; (8009c20 <_vfiprintf_r+0x264>)
 8009b44:	f7ff f8f2 	bl	8008d2c <memchr>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d007      	beq.n	8009b5c <_vfiprintf_r+0x1a0>
 8009b4c:	4b34      	ldr	r3, [pc, #208]	; (8009c20 <_vfiprintf_r+0x264>)
 8009b4e:	682a      	ldr	r2, [r5, #0]
 8009b50:	1ac0      	subs	r0, r0, r3
 8009b52:	2340      	movs	r3, #64	; 0x40
 8009b54:	4083      	lsls	r3, r0
 8009b56:	4313      	orrs	r3, r2
 8009b58:	3701      	adds	r7, #1
 8009b5a:	602b      	str	r3, [r5, #0]
 8009b5c:	7839      	ldrb	r1, [r7, #0]
 8009b5e:	1c7b      	adds	r3, r7, #1
 8009b60:	2206      	movs	r2, #6
 8009b62:	4830      	ldr	r0, [pc, #192]	; (8009c24 <_vfiprintf_r+0x268>)
 8009b64:	9303      	str	r3, [sp, #12]
 8009b66:	7629      	strb	r1, [r5, #24]
 8009b68:	f7ff f8e0 	bl	8008d2c <memchr>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	d045      	beq.n	8009bfc <_vfiprintf_r+0x240>
 8009b70:	4b2d      	ldr	r3, [pc, #180]	; (8009c28 <_vfiprintf_r+0x26c>)
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d127      	bne.n	8009bc6 <_vfiprintf_r+0x20a>
 8009b76:	2207      	movs	r2, #7
 8009b78:	9b07      	ldr	r3, [sp, #28]
 8009b7a:	3307      	adds	r3, #7
 8009b7c:	4393      	bics	r3, r2
 8009b7e:	3308      	adds	r3, #8
 8009b80:	9307      	str	r3, [sp, #28]
 8009b82:	696b      	ldr	r3, [r5, #20]
 8009b84:	9a04      	ldr	r2, [sp, #16]
 8009b86:	189b      	adds	r3, r3, r2
 8009b88:	616b      	str	r3, [r5, #20]
 8009b8a:	e75d      	b.n	8009a48 <_vfiprintf_r+0x8c>
 8009b8c:	210a      	movs	r1, #10
 8009b8e:	434b      	muls	r3, r1
 8009b90:	4667      	mov	r7, ip
 8009b92:	189b      	adds	r3, r3, r2
 8009b94:	3909      	subs	r1, #9
 8009b96:	e7a3      	b.n	8009ae0 <_vfiprintf_r+0x124>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	425b      	negs	r3, r3
 8009b9c:	e7ce      	b.n	8009b3c <_vfiprintf_r+0x180>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	001a      	movs	r2, r3
 8009ba2:	3701      	adds	r7, #1
 8009ba4:	606b      	str	r3, [r5, #4]
 8009ba6:	7839      	ldrb	r1, [r7, #0]
 8009ba8:	1c78      	adds	r0, r7, #1
 8009baa:	3930      	subs	r1, #48	; 0x30
 8009bac:	4684      	mov	ip, r0
 8009bae:	2909      	cmp	r1, #9
 8009bb0:	d903      	bls.n	8009bba <_vfiprintf_r+0x1fe>
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0c3      	beq.n	8009b3e <_vfiprintf_r+0x182>
 8009bb6:	9209      	str	r2, [sp, #36]	; 0x24
 8009bb8:	e7c1      	b.n	8009b3e <_vfiprintf_r+0x182>
 8009bba:	230a      	movs	r3, #10
 8009bbc:	435a      	muls	r2, r3
 8009bbe:	4667      	mov	r7, ip
 8009bc0:	1852      	adds	r2, r2, r1
 8009bc2:	3b09      	subs	r3, #9
 8009bc4:	e7ef      	b.n	8009ba6 <_vfiprintf_r+0x1ea>
 8009bc6:	ab07      	add	r3, sp, #28
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	0022      	movs	r2, r4
 8009bcc:	0029      	movs	r1, r5
 8009bce:	0030      	movs	r0, r6
 8009bd0:	4b16      	ldr	r3, [pc, #88]	; (8009c2c <_vfiprintf_r+0x270>)
 8009bd2:	f7fd f991 	bl	8006ef8 <_printf_float>
 8009bd6:	9004      	str	r0, [sp, #16]
 8009bd8:	9b04      	ldr	r3, [sp, #16]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	d1d1      	bne.n	8009b82 <_vfiprintf_r+0x1c6>
 8009bde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009be0:	07db      	lsls	r3, r3, #31
 8009be2:	d405      	bmi.n	8009bf0 <_vfiprintf_r+0x234>
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	059b      	lsls	r3, r3, #22
 8009be8:	d402      	bmi.n	8009bf0 <_vfiprintf_r+0x234>
 8009bea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bec:	f7ff f826 	bl	8008c3c <__retarget_lock_release_recursive>
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	065b      	lsls	r3, r3, #25
 8009bf4:	d500      	bpl.n	8009bf8 <_vfiprintf_r+0x23c>
 8009bf6:	e70a      	b.n	8009a0e <_vfiprintf_r+0x52>
 8009bf8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009bfa:	e70a      	b.n	8009a12 <_vfiprintf_r+0x56>
 8009bfc:	ab07      	add	r3, sp, #28
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	0022      	movs	r2, r4
 8009c02:	0029      	movs	r1, r5
 8009c04:	0030      	movs	r0, r6
 8009c06:	4b09      	ldr	r3, [pc, #36]	; (8009c2c <_vfiprintf_r+0x270>)
 8009c08:	f7fd fc28 	bl	800745c <_printf_i>
 8009c0c:	e7e3      	b.n	8009bd6 <_vfiprintf_r+0x21a>
 8009c0e:	46c0      	nop			; (mov r8, r8)
 8009c10:	0800a290 	.word	0x0800a290
 8009c14:	0800a2b0 	.word	0x0800a2b0
 8009c18:	0800a270 	.word	0x0800a270
 8009c1c:	0800a42c 	.word	0x0800a42c
 8009c20:	0800a432 	.word	0x0800a432
 8009c24:	0800a436 	.word	0x0800a436
 8009c28:	08006ef9 	.word	0x08006ef9
 8009c2c:	08009997 	.word	0x08009997

08009c30 <_sbrk_r>:
 8009c30:	2300      	movs	r3, #0
 8009c32:	b570      	push	{r4, r5, r6, lr}
 8009c34:	4d06      	ldr	r5, [pc, #24]	; (8009c50 <_sbrk_r+0x20>)
 8009c36:	0004      	movs	r4, r0
 8009c38:	0008      	movs	r0, r1
 8009c3a:	602b      	str	r3, [r5, #0]
 8009c3c:	f7f8 ff7e 	bl	8002b3c <_sbrk>
 8009c40:	1c43      	adds	r3, r0, #1
 8009c42:	d103      	bne.n	8009c4c <_sbrk_r+0x1c>
 8009c44:	682b      	ldr	r3, [r5, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d000      	beq.n	8009c4c <_sbrk_r+0x1c>
 8009c4a:	6023      	str	r3, [r4, #0]
 8009c4c:	bd70      	pop	{r4, r5, r6, pc}
 8009c4e:	46c0      	nop			; (mov r8, r8)
 8009c50:	200003f4 	.word	0x200003f4

08009c54 <__sread>:
 8009c54:	b570      	push	{r4, r5, r6, lr}
 8009c56:	000c      	movs	r4, r1
 8009c58:	250e      	movs	r5, #14
 8009c5a:	5f49      	ldrsh	r1, [r1, r5]
 8009c5c:	f000 f938 	bl	8009ed0 <_read_r>
 8009c60:	2800      	cmp	r0, #0
 8009c62:	db03      	blt.n	8009c6c <__sread+0x18>
 8009c64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009c66:	181b      	adds	r3, r3, r0
 8009c68:	6563      	str	r3, [r4, #84]	; 0x54
 8009c6a:	bd70      	pop	{r4, r5, r6, pc}
 8009c6c:	89a3      	ldrh	r3, [r4, #12]
 8009c6e:	4a02      	ldr	r2, [pc, #8]	; (8009c78 <__sread+0x24>)
 8009c70:	4013      	ands	r3, r2
 8009c72:	81a3      	strh	r3, [r4, #12]
 8009c74:	e7f9      	b.n	8009c6a <__sread+0x16>
 8009c76:	46c0      	nop			; (mov r8, r8)
 8009c78:	ffffefff 	.word	0xffffefff

08009c7c <__swrite>:
 8009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7e:	001f      	movs	r7, r3
 8009c80:	898b      	ldrh	r3, [r1, #12]
 8009c82:	0005      	movs	r5, r0
 8009c84:	000c      	movs	r4, r1
 8009c86:	0016      	movs	r6, r2
 8009c88:	05db      	lsls	r3, r3, #23
 8009c8a:	d505      	bpl.n	8009c98 <__swrite+0x1c>
 8009c8c:	230e      	movs	r3, #14
 8009c8e:	5ec9      	ldrsh	r1, [r1, r3]
 8009c90:	2200      	movs	r2, #0
 8009c92:	2302      	movs	r3, #2
 8009c94:	f000 f8a2 	bl	8009ddc <_lseek_r>
 8009c98:	89a3      	ldrh	r3, [r4, #12]
 8009c9a:	4a05      	ldr	r2, [pc, #20]	; (8009cb0 <__swrite+0x34>)
 8009c9c:	0028      	movs	r0, r5
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	81a3      	strh	r3, [r4, #12]
 8009ca2:	0032      	movs	r2, r6
 8009ca4:	230e      	movs	r3, #14
 8009ca6:	5ee1      	ldrsh	r1, [r4, r3]
 8009ca8:	003b      	movs	r3, r7
 8009caa:	f000 f81f 	bl	8009cec <_write_r>
 8009cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cb0:	ffffefff 	.word	0xffffefff

08009cb4 <__sseek>:
 8009cb4:	b570      	push	{r4, r5, r6, lr}
 8009cb6:	000c      	movs	r4, r1
 8009cb8:	250e      	movs	r5, #14
 8009cba:	5f49      	ldrsh	r1, [r1, r5]
 8009cbc:	f000 f88e 	bl	8009ddc <_lseek_r>
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	1c42      	adds	r2, r0, #1
 8009cc4:	d103      	bne.n	8009cce <__sseek+0x1a>
 8009cc6:	4a05      	ldr	r2, [pc, #20]	; (8009cdc <__sseek+0x28>)
 8009cc8:	4013      	ands	r3, r2
 8009cca:	81a3      	strh	r3, [r4, #12]
 8009ccc:	bd70      	pop	{r4, r5, r6, pc}
 8009cce:	2280      	movs	r2, #128	; 0x80
 8009cd0:	0152      	lsls	r2, r2, #5
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	81a3      	strh	r3, [r4, #12]
 8009cd6:	6560      	str	r0, [r4, #84]	; 0x54
 8009cd8:	e7f8      	b.n	8009ccc <__sseek+0x18>
 8009cda:	46c0      	nop			; (mov r8, r8)
 8009cdc:	ffffefff 	.word	0xffffefff

08009ce0 <__sclose>:
 8009ce0:	b510      	push	{r4, lr}
 8009ce2:	230e      	movs	r3, #14
 8009ce4:	5ec9      	ldrsh	r1, [r1, r3]
 8009ce6:	f000 f833 	bl	8009d50 <_close_r>
 8009cea:	bd10      	pop	{r4, pc}

08009cec <_write_r>:
 8009cec:	b570      	push	{r4, r5, r6, lr}
 8009cee:	0004      	movs	r4, r0
 8009cf0:	0008      	movs	r0, r1
 8009cf2:	0011      	movs	r1, r2
 8009cf4:	001a      	movs	r2, r3
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	4d05      	ldr	r5, [pc, #20]	; (8009d10 <_write_r+0x24>)
 8009cfa:	602b      	str	r3, [r5, #0]
 8009cfc:	f7f8 fd5a 	bl	80027b4 <_write>
 8009d00:	1c43      	adds	r3, r0, #1
 8009d02:	d103      	bne.n	8009d0c <_write_r+0x20>
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d000      	beq.n	8009d0c <_write_r+0x20>
 8009d0a:	6023      	str	r3, [r4, #0]
 8009d0c:	bd70      	pop	{r4, r5, r6, pc}
 8009d0e:	46c0      	nop			; (mov r8, r8)
 8009d10:	200003f4 	.word	0x200003f4

08009d14 <__assert_func>:
 8009d14:	b530      	push	{r4, r5, lr}
 8009d16:	0014      	movs	r4, r2
 8009d18:	001a      	movs	r2, r3
 8009d1a:	4b09      	ldr	r3, [pc, #36]	; (8009d40 <__assert_func+0x2c>)
 8009d1c:	0005      	movs	r5, r0
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	b085      	sub	sp, #20
 8009d22:	68d8      	ldr	r0, [r3, #12]
 8009d24:	4b07      	ldr	r3, [pc, #28]	; (8009d44 <__assert_func+0x30>)
 8009d26:	2c00      	cmp	r4, #0
 8009d28:	d101      	bne.n	8009d2e <__assert_func+0x1a>
 8009d2a:	4b07      	ldr	r3, [pc, #28]	; (8009d48 <__assert_func+0x34>)
 8009d2c:	001c      	movs	r4, r3
 8009d2e:	9301      	str	r3, [sp, #4]
 8009d30:	9100      	str	r1, [sp, #0]
 8009d32:	002b      	movs	r3, r5
 8009d34:	4905      	ldr	r1, [pc, #20]	; (8009d4c <__assert_func+0x38>)
 8009d36:	9402      	str	r4, [sp, #8]
 8009d38:	f000 f81c 	bl	8009d74 <fiprintf>
 8009d3c:	f000 f8e9 	bl	8009f12 <abort>
 8009d40:	20000064 	.word	0x20000064
 8009d44:	0800a43d 	.word	0x0800a43d
 8009d48:	0800a478 	.word	0x0800a478
 8009d4c:	0800a44a 	.word	0x0800a44a

08009d50 <_close_r>:
 8009d50:	2300      	movs	r3, #0
 8009d52:	b570      	push	{r4, r5, r6, lr}
 8009d54:	4d06      	ldr	r5, [pc, #24]	; (8009d70 <_close_r+0x20>)
 8009d56:	0004      	movs	r4, r0
 8009d58:	0008      	movs	r0, r1
 8009d5a:	602b      	str	r3, [r5, #0]
 8009d5c:	f7f8 fd58 	bl	8002810 <_close>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d103      	bne.n	8009d6c <_close_r+0x1c>
 8009d64:	682b      	ldr	r3, [r5, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d000      	beq.n	8009d6c <_close_r+0x1c>
 8009d6a:	6023      	str	r3, [r4, #0]
 8009d6c:	bd70      	pop	{r4, r5, r6, pc}
 8009d6e:	46c0      	nop			; (mov r8, r8)
 8009d70:	200003f4 	.word	0x200003f4

08009d74 <fiprintf>:
 8009d74:	b40e      	push	{r1, r2, r3}
 8009d76:	b503      	push	{r0, r1, lr}
 8009d78:	0001      	movs	r1, r0
 8009d7a:	ab03      	add	r3, sp, #12
 8009d7c:	4804      	ldr	r0, [pc, #16]	; (8009d90 <fiprintf+0x1c>)
 8009d7e:	cb04      	ldmia	r3!, {r2}
 8009d80:	6800      	ldr	r0, [r0, #0]
 8009d82:	9301      	str	r3, [sp, #4]
 8009d84:	f7ff fe1a 	bl	80099bc <_vfiprintf_r>
 8009d88:	b002      	add	sp, #8
 8009d8a:	bc08      	pop	{r3}
 8009d8c:	b003      	add	sp, #12
 8009d8e:	4718      	bx	r3
 8009d90:	20000064 	.word	0x20000064

08009d94 <_fstat_r>:
 8009d94:	2300      	movs	r3, #0
 8009d96:	b570      	push	{r4, r5, r6, lr}
 8009d98:	4d06      	ldr	r5, [pc, #24]	; (8009db4 <_fstat_r+0x20>)
 8009d9a:	0004      	movs	r4, r0
 8009d9c:	0008      	movs	r0, r1
 8009d9e:	0011      	movs	r1, r2
 8009da0:	602b      	str	r3, [r5, #0]
 8009da2:	f7f8 fd87 	bl	80028b4 <_fstat>
 8009da6:	1c43      	adds	r3, r0, #1
 8009da8:	d103      	bne.n	8009db2 <_fstat_r+0x1e>
 8009daa:	682b      	ldr	r3, [r5, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d000      	beq.n	8009db2 <_fstat_r+0x1e>
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	bd70      	pop	{r4, r5, r6, pc}
 8009db4:	200003f4 	.word	0x200003f4

08009db8 <_isatty_r>:
 8009db8:	2300      	movs	r3, #0
 8009dba:	b570      	push	{r4, r5, r6, lr}
 8009dbc:	4d06      	ldr	r5, [pc, #24]	; (8009dd8 <_isatty_r+0x20>)
 8009dbe:	0004      	movs	r4, r0
 8009dc0:	0008      	movs	r0, r1
 8009dc2:	602b      	str	r3, [r5, #0]
 8009dc4:	f7f8 fce0 	bl	8002788 <_isatty>
 8009dc8:	1c43      	adds	r3, r0, #1
 8009dca:	d103      	bne.n	8009dd4 <_isatty_r+0x1c>
 8009dcc:	682b      	ldr	r3, [r5, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d000      	beq.n	8009dd4 <_isatty_r+0x1c>
 8009dd2:	6023      	str	r3, [r4, #0]
 8009dd4:	bd70      	pop	{r4, r5, r6, pc}
 8009dd6:	46c0      	nop			; (mov r8, r8)
 8009dd8:	200003f4 	.word	0x200003f4

08009ddc <_lseek_r>:
 8009ddc:	b570      	push	{r4, r5, r6, lr}
 8009dde:	0004      	movs	r4, r0
 8009de0:	0008      	movs	r0, r1
 8009de2:	0011      	movs	r1, r2
 8009de4:	001a      	movs	r2, r3
 8009de6:	2300      	movs	r3, #0
 8009de8:	4d05      	ldr	r5, [pc, #20]	; (8009e00 <_lseek_r+0x24>)
 8009dea:	602b      	str	r3, [r5, #0]
 8009dec:	f7f8 fd27 	bl	800283e <_lseek>
 8009df0:	1c43      	adds	r3, r0, #1
 8009df2:	d103      	bne.n	8009dfc <_lseek_r+0x20>
 8009df4:	682b      	ldr	r3, [r5, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d000      	beq.n	8009dfc <_lseek_r+0x20>
 8009dfa:	6023      	str	r3, [r4, #0]
 8009dfc:	bd70      	pop	{r4, r5, r6, pc}
 8009dfe:	46c0      	nop			; (mov r8, r8)
 8009e00:	200003f4 	.word	0x200003f4

08009e04 <__ascii_mbtowc>:
 8009e04:	b082      	sub	sp, #8
 8009e06:	2900      	cmp	r1, #0
 8009e08:	d100      	bne.n	8009e0c <__ascii_mbtowc+0x8>
 8009e0a:	a901      	add	r1, sp, #4
 8009e0c:	1e10      	subs	r0, r2, #0
 8009e0e:	d006      	beq.n	8009e1e <__ascii_mbtowc+0x1a>
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d006      	beq.n	8009e22 <__ascii_mbtowc+0x1e>
 8009e14:	7813      	ldrb	r3, [r2, #0]
 8009e16:	600b      	str	r3, [r1, #0]
 8009e18:	7810      	ldrb	r0, [r2, #0]
 8009e1a:	1e43      	subs	r3, r0, #1
 8009e1c:	4198      	sbcs	r0, r3
 8009e1e:	b002      	add	sp, #8
 8009e20:	4770      	bx	lr
 8009e22:	2002      	movs	r0, #2
 8009e24:	4240      	negs	r0, r0
 8009e26:	e7fa      	b.n	8009e1e <__ascii_mbtowc+0x1a>

08009e28 <memmove>:
 8009e28:	b510      	push	{r4, lr}
 8009e2a:	4288      	cmp	r0, r1
 8009e2c:	d902      	bls.n	8009e34 <memmove+0xc>
 8009e2e:	188b      	adds	r3, r1, r2
 8009e30:	4298      	cmp	r0, r3
 8009e32:	d303      	bcc.n	8009e3c <memmove+0x14>
 8009e34:	2300      	movs	r3, #0
 8009e36:	e007      	b.n	8009e48 <memmove+0x20>
 8009e38:	5c8b      	ldrb	r3, [r1, r2]
 8009e3a:	5483      	strb	r3, [r0, r2]
 8009e3c:	3a01      	subs	r2, #1
 8009e3e:	d2fb      	bcs.n	8009e38 <memmove+0x10>
 8009e40:	bd10      	pop	{r4, pc}
 8009e42:	5ccc      	ldrb	r4, [r1, r3]
 8009e44:	54c4      	strb	r4, [r0, r3]
 8009e46:	3301      	adds	r3, #1
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d1fa      	bne.n	8009e42 <memmove+0x1a>
 8009e4c:	e7f8      	b.n	8009e40 <memmove+0x18>
	...

08009e50 <__malloc_lock>:
 8009e50:	b510      	push	{r4, lr}
 8009e52:	4802      	ldr	r0, [pc, #8]	; (8009e5c <__malloc_lock+0xc>)
 8009e54:	f7fe fef1 	bl	8008c3a <__retarget_lock_acquire_recursive>
 8009e58:	bd10      	pop	{r4, pc}
 8009e5a:	46c0      	nop			; (mov r8, r8)
 8009e5c:	200003e8 	.word	0x200003e8

08009e60 <__malloc_unlock>:
 8009e60:	b510      	push	{r4, lr}
 8009e62:	4802      	ldr	r0, [pc, #8]	; (8009e6c <__malloc_unlock+0xc>)
 8009e64:	f7fe feea 	bl	8008c3c <__retarget_lock_release_recursive>
 8009e68:	bd10      	pop	{r4, pc}
 8009e6a:	46c0      	nop			; (mov r8, r8)
 8009e6c:	200003e8 	.word	0x200003e8

08009e70 <_realloc_r>:
 8009e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e72:	0007      	movs	r7, r0
 8009e74:	000e      	movs	r6, r1
 8009e76:	0014      	movs	r4, r2
 8009e78:	2900      	cmp	r1, #0
 8009e7a:	d105      	bne.n	8009e88 <_realloc_r+0x18>
 8009e7c:	0011      	movs	r1, r2
 8009e7e:	f7ff fb9d 	bl	80095bc <_malloc_r>
 8009e82:	0005      	movs	r5, r0
 8009e84:	0028      	movs	r0, r5
 8009e86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e88:	2a00      	cmp	r2, #0
 8009e8a:	d103      	bne.n	8009e94 <_realloc_r+0x24>
 8009e8c:	f7ff fb2a 	bl	80094e4 <_free_r>
 8009e90:	0025      	movs	r5, r4
 8009e92:	e7f7      	b.n	8009e84 <_realloc_r+0x14>
 8009e94:	f000 f844 	bl	8009f20 <_malloc_usable_size_r>
 8009e98:	9001      	str	r0, [sp, #4]
 8009e9a:	4284      	cmp	r4, r0
 8009e9c:	d803      	bhi.n	8009ea6 <_realloc_r+0x36>
 8009e9e:	0035      	movs	r5, r6
 8009ea0:	0843      	lsrs	r3, r0, #1
 8009ea2:	42a3      	cmp	r3, r4
 8009ea4:	d3ee      	bcc.n	8009e84 <_realloc_r+0x14>
 8009ea6:	0021      	movs	r1, r4
 8009ea8:	0038      	movs	r0, r7
 8009eaa:	f7ff fb87 	bl	80095bc <_malloc_r>
 8009eae:	1e05      	subs	r5, r0, #0
 8009eb0:	d0e8      	beq.n	8009e84 <_realloc_r+0x14>
 8009eb2:	9b01      	ldr	r3, [sp, #4]
 8009eb4:	0022      	movs	r2, r4
 8009eb6:	429c      	cmp	r4, r3
 8009eb8:	d900      	bls.n	8009ebc <_realloc_r+0x4c>
 8009eba:	001a      	movs	r2, r3
 8009ebc:	0031      	movs	r1, r6
 8009ebe:	0028      	movs	r0, r5
 8009ec0:	f7fe ff3f 	bl	8008d42 <memcpy>
 8009ec4:	0031      	movs	r1, r6
 8009ec6:	0038      	movs	r0, r7
 8009ec8:	f7ff fb0c 	bl	80094e4 <_free_r>
 8009ecc:	e7da      	b.n	8009e84 <_realloc_r+0x14>
	...

08009ed0 <_read_r>:
 8009ed0:	b570      	push	{r4, r5, r6, lr}
 8009ed2:	0004      	movs	r4, r0
 8009ed4:	0008      	movs	r0, r1
 8009ed6:	0011      	movs	r1, r2
 8009ed8:	001a      	movs	r2, r3
 8009eda:	2300      	movs	r3, #0
 8009edc:	4d05      	ldr	r5, [pc, #20]	; (8009ef4 <_read_r+0x24>)
 8009ede:	602b      	str	r3, [r5, #0]
 8009ee0:	f7f8 fcbe 	bl	8002860 <_read>
 8009ee4:	1c43      	adds	r3, r0, #1
 8009ee6:	d103      	bne.n	8009ef0 <_read_r+0x20>
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d000      	beq.n	8009ef0 <_read_r+0x20>
 8009eee:	6023      	str	r3, [r4, #0]
 8009ef0:	bd70      	pop	{r4, r5, r6, pc}
 8009ef2:	46c0      	nop			; (mov r8, r8)
 8009ef4:	200003f4 	.word	0x200003f4

08009ef8 <__ascii_wctomb>:
 8009ef8:	0003      	movs	r3, r0
 8009efa:	1e08      	subs	r0, r1, #0
 8009efc:	d005      	beq.n	8009f0a <__ascii_wctomb+0x12>
 8009efe:	2aff      	cmp	r2, #255	; 0xff
 8009f00:	d904      	bls.n	8009f0c <__ascii_wctomb+0x14>
 8009f02:	228a      	movs	r2, #138	; 0x8a
 8009f04:	2001      	movs	r0, #1
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	4240      	negs	r0, r0
 8009f0a:	4770      	bx	lr
 8009f0c:	2001      	movs	r0, #1
 8009f0e:	700a      	strb	r2, [r1, #0]
 8009f10:	e7fb      	b.n	8009f0a <__ascii_wctomb+0x12>

08009f12 <abort>:
 8009f12:	2006      	movs	r0, #6
 8009f14:	b510      	push	{r4, lr}
 8009f16:	f000 f835 	bl	8009f84 <raise>
 8009f1a:	2001      	movs	r0, #1
 8009f1c:	f000 f862 	bl	8009fe4 <_exit>

08009f20 <_malloc_usable_size_r>:
 8009f20:	1f0b      	subs	r3, r1, #4
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	1f18      	subs	r0, r3, #4
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	da01      	bge.n	8009f2e <_malloc_usable_size_r+0xe>
 8009f2a:	580b      	ldr	r3, [r1, r0]
 8009f2c:	18c0      	adds	r0, r0, r3
 8009f2e:	4770      	bx	lr

08009f30 <_raise_r>:
 8009f30:	b570      	push	{r4, r5, r6, lr}
 8009f32:	0004      	movs	r4, r0
 8009f34:	000d      	movs	r5, r1
 8009f36:	291f      	cmp	r1, #31
 8009f38:	d904      	bls.n	8009f44 <_raise_r+0x14>
 8009f3a:	2316      	movs	r3, #22
 8009f3c:	6003      	str	r3, [r0, #0]
 8009f3e:	2001      	movs	r0, #1
 8009f40:	4240      	negs	r0, r0
 8009f42:	bd70      	pop	{r4, r5, r6, pc}
 8009f44:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d004      	beq.n	8009f54 <_raise_r+0x24>
 8009f4a:	008a      	lsls	r2, r1, #2
 8009f4c:	189b      	adds	r3, r3, r2
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	2a00      	cmp	r2, #0
 8009f52:	d108      	bne.n	8009f66 <_raise_r+0x36>
 8009f54:	0020      	movs	r0, r4
 8009f56:	f000 f831 	bl	8009fbc <_getpid_r>
 8009f5a:	002a      	movs	r2, r5
 8009f5c:	0001      	movs	r1, r0
 8009f5e:	0020      	movs	r0, r4
 8009f60:	f000 f81a 	bl	8009f98 <_kill_r>
 8009f64:	e7ed      	b.n	8009f42 <_raise_r+0x12>
 8009f66:	2000      	movs	r0, #0
 8009f68:	2a01      	cmp	r2, #1
 8009f6a:	d0ea      	beq.n	8009f42 <_raise_r+0x12>
 8009f6c:	1c51      	adds	r1, r2, #1
 8009f6e:	d103      	bne.n	8009f78 <_raise_r+0x48>
 8009f70:	2316      	movs	r3, #22
 8009f72:	3001      	adds	r0, #1
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	e7e4      	b.n	8009f42 <_raise_r+0x12>
 8009f78:	2400      	movs	r4, #0
 8009f7a:	0028      	movs	r0, r5
 8009f7c:	601c      	str	r4, [r3, #0]
 8009f7e:	4790      	blx	r2
 8009f80:	0020      	movs	r0, r4
 8009f82:	e7de      	b.n	8009f42 <_raise_r+0x12>

08009f84 <raise>:
 8009f84:	b510      	push	{r4, lr}
 8009f86:	4b03      	ldr	r3, [pc, #12]	; (8009f94 <raise+0x10>)
 8009f88:	0001      	movs	r1, r0
 8009f8a:	6818      	ldr	r0, [r3, #0]
 8009f8c:	f7ff ffd0 	bl	8009f30 <_raise_r>
 8009f90:	bd10      	pop	{r4, pc}
 8009f92:	46c0      	nop			; (mov r8, r8)
 8009f94:	20000064 	.word	0x20000064

08009f98 <_kill_r>:
 8009f98:	2300      	movs	r3, #0
 8009f9a:	b570      	push	{r4, r5, r6, lr}
 8009f9c:	4d06      	ldr	r5, [pc, #24]	; (8009fb8 <_kill_r+0x20>)
 8009f9e:	0004      	movs	r4, r0
 8009fa0:	0008      	movs	r0, r1
 8009fa2:	0011      	movs	r1, r2
 8009fa4:	602b      	str	r3, [r5, #0]
 8009fa6:	f000 f815 	bl	8009fd4 <_kill>
 8009faa:	1c43      	adds	r3, r0, #1
 8009fac:	d103      	bne.n	8009fb6 <_kill_r+0x1e>
 8009fae:	682b      	ldr	r3, [r5, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d000      	beq.n	8009fb6 <_kill_r+0x1e>
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	bd70      	pop	{r4, r5, r6, pc}
 8009fb8:	200003f4 	.word	0x200003f4

08009fbc <_getpid_r>:
 8009fbc:	b510      	push	{r4, lr}
 8009fbe:	f000 f801 	bl	8009fc4 <_getpid>
 8009fc2:	bd10      	pop	{r4, pc}

08009fc4 <_getpid>:
 8009fc4:	2258      	movs	r2, #88	; 0x58
 8009fc6:	2001      	movs	r0, #1
 8009fc8:	4b01      	ldr	r3, [pc, #4]	; (8009fd0 <_getpid+0xc>)
 8009fca:	4240      	negs	r0, r0
 8009fcc:	601a      	str	r2, [r3, #0]
 8009fce:	4770      	bx	lr
 8009fd0:	200003f4 	.word	0x200003f4

08009fd4 <_kill>:
 8009fd4:	2258      	movs	r2, #88	; 0x58
 8009fd6:	2001      	movs	r0, #1
 8009fd8:	4b01      	ldr	r3, [pc, #4]	; (8009fe0 <_kill+0xc>)
 8009fda:	4240      	negs	r0, r0
 8009fdc:	601a      	str	r2, [r3, #0]
 8009fde:	4770      	bx	lr
 8009fe0:	200003f4 	.word	0x200003f4

08009fe4 <_exit>:
 8009fe4:	e7fe      	b.n	8009fe4 <_exit>
	...

08009fe8 <_init>:
 8009fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fea:	46c0      	nop			; (mov r8, r8)
 8009fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fee:	bc08      	pop	{r3}
 8009ff0:	469e      	mov	lr, r3
 8009ff2:	4770      	bx	lr

08009ff4 <_fini>:
 8009ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff6:	46c0      	nop			; (mov r8, r8)
 8009ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ffa:	bc08      	pop	{r3}
 8009ffc:	469e      	mov	lr, r3
 8009ffe:	4770      	bx	lr
